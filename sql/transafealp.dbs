<?xml version="1.0" encoding="UTF-8" ?>
<project name="PostgreSQL" id="Project2000134" database="PostgreSQL" >
	<schema name="public" catalogname="transafe" schemaname="public" >
		<table name="action" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="scenario_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="name" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="numcode" type="integer" length="10" jt="4" mandatory="y" >
				<defo>0</defo>
			</column>
			<column name="description" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="duration" type="integer" length="10" jt="4" mandatory="y" >
				<defo>15</defo>
			</column>
			<index name="action_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="action_scenario_id_name_key" unique="UNIQUE" >
				<column name="scenario_id" />
				<column name="name" />
			</index>
			<constraint name="action_duration_check" >
				<string>(duration &gt;= 0) AND ((duration % 15) = 0)</string>
			</constraint>
			<fk name="action_scenario_id_fkey" to_schema="public" to_table="scenario" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="scenario_id" pk="id" />
			</fk>
		</table>
		<table name="actor" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="name" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="istitution" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="contact_info" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="email" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="phone" type="text" length="2147483647" jt="12" mandatory="y" />
			<index name="actor_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="actor_email_key" unique="UNIQUE" >
				<column name="email" />
			</index>
		</table>
		<table name="managing_authority" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="name" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="description" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="address" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="email" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="phone" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="auth_user_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<index name="managing_authority_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="managing_authority_name_key" unique="UNIQUE" >
				<column name="name" />
			</index>
			<fk name="managing_authority_auth_user_id_fkey" to_schema="public" to_table="auth_user" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="auth_user_id" pk="id" />
			</fk>
		</table>
		<table name="scenario" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="managing_authority_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="name" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="description" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="subcategory_id" type="bigint" length="19" jt="-5" />
			<column name="geom" type="geometry" length="2147483647" jt="1111" />
			<index name="scenario_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="scenario_name_key" unique="UNIQUE" >
				<column name="name" />
			</index>
			<fk name="scenario_managing_authority_id_fkey" to_schema="public" to_table="managing_authority" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="managing_authority_id" pk="id" />
			</fk>
			<fk name="scenario_subcategory_id_fkey" to_schema="public" to_table="scenario_subcategory" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="subcategory_id" pk="id" />
			</fk>
		</table>
		<table name="spatial_ref_sys" >
			<column name="srid" type="integer" length="10" jt="4" mandatory="y" />
			<column name="auth_name" type="varchar" length="256" jt="12" />
			<column name="auth_srid" type="integer" length="10" jt="4" />
			<column name="srtext" type="varchar" length="2048" jt="12" />
			<column name="proj4text" type="varchar" length="2048" jt="12" />
			<index name="spatial_ref_sys_pkey" unique="PRIMARY_KEY" >
				<column name="srid" />
			</index>
			<constraint name="spatial_ref_sys_srid_check" >
				<string>(srid &gt; 0) AND (srid &lt;= 998999)</string>
			</constraint>
		</table>
		<table name="visualization" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="action_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="description" type="text" length="2147483647" jt="12" />
			<column name="type" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="resource" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="options" type="text" length="2147483647" jt="12" />
			<index name="visualization_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<fk name="visualization_action_id_fkey" to_schema="public" to_table="action" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="action_id" pk="id" />
			</fk>
		</table>
		<table name="interruptions" >
			<column name="gid" type="serial" length="10" jt="4" mandatory="y" />
			<column name="id" type="integer" length="10" jt="4" />
			<column name="geom" type="geometry" length="2147483647" jt="1111" mandatory="y" />
			<index name="interruptions_pkey" unique="PRIMARY_KEY" >
				<column name="gid" />
			</index>
		</table>
		<table name="action_m2m_actor" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="action_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="actor_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<index name="action_m2m_actor_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="action_m2m_actor_action_id_actor_id_key" unique="UNIQUE" >
				<column name="action_id" />
				<column name="actor_id" />
			</index>
			<fk name="action_m2m_actor_action_id_fkey" to_schema="public" to_table="action" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="action_id" pk="id" />
			</fk>
			<fk name="action_m2m_actor_actor_id_fkey" to_schema="public" to_table="actor" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="actor_id" pk="id" />
			</fk>
		</table>
		<table name="action_graph" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="action_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="parent_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="is_main_parent" type="bool" length="1" jt="-7" mandatory="y" >
				<defo>true</defo>
			</column>
			<index name="action_graph_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="action_graph_action_id_parent_id_key" unique="UNIQUE" >
				<column name="action_id" />
				<column name="parent_id" />
			</index>
			<constraint name="action_graph_check" >
				<string>action_id &lt;&gt; parent_id</string>
			</constraint>
			<fk name="action_graph_action_id_fkey" to_schema="public" to_table="action" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="action_id" pk="id" />
			</fk>
			<fk name="action_graph_parent_id_fkey" to_schema="public" to_table="action" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="parent_id" pk="id" />
			</fk>
		</table>
		<table name="scenario_category" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="name" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="description" type="text" length="2147483647" jt="12" mandatory="y" />
			<index name="scenario_category_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="scenario_category_name_key" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="scenario_subcategory" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="category_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="name" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="description" type="text" length="2147483647" jt="12" mandatory="y" />
			<index name="scenario_subcategory_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="scenario_subcategory_name_key" unique="UNIQUE" >
				<column name="name" />
			</index>
			<fk name="scenario_subcategory_category_id_fkey" to_schema="public" to_table="scenario_category" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="category_id" pk="id" />
			</fk>
		</table>
		<table name="admin_tools_dashboard_preferences" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="user_id" type="integer" length="10" jt="4" mandatory="y" />
			<column name="data" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="dashboard_id" type="varchar" length="100" jt="12" mandatory="y" />
			<index name="admin_tools_dashboard_preferences_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="admin_tools_dashboard_preferences_user_id_dashboard_id_key" unique="UNIQUE" >
				<column name="user_id" />
				<column name="dashboard_id" />
			</index>
			<index name="admin_tools_dashboard_preferences_user_id" unique="NORMAL" >
				<column name="user_id" />
			</index>
			<fk name="admin_tools_dashboard_preferences_user_id_fkey" to_schema="public" to_table="auth_user" >
				<fk_column name="user_id" pk="id" />
			</fk>
		</table>
		<table name="admin_tools_menu_bookmark" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="user_id" type="integer" length="10" jt="4" mandatory="y" />
			<column name="url" type="varchar" length="255" jt="12" mandatory="y" />
			<column name="title" type="varchar" length="255" jt="12" mandatory="y" />
			<index name="admin_tools_menu_bookmark_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="admin_tools_menu_bookmark_user_id" unique="NORMAL" >
				<column name="user_id" />
			</index>
			<fk name="admin_tools_menu_bookmark_user_id_fkey" to_schema="public" to_table="auth_user" >
				<fk_column name="user_id" pk="id" />
			</fk>
		</table>
		<table name="auth_group" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="name" type="varchar" length="80" jt="12" mandatory="y" />
			<index name="auth_group_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="auth_group_permissions" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="group_id" type="integer" length="10" jt="4" mandatory="y" />
			<column name="permission_id" type="integer" length="10" jt="4" mandatory="y" />
			<index name="auth_group_permissions_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="auth_group_permissions_group_id_permission_id_key" unique="UNIQUE" >
				<column name="group_id" />
				<column name="permission_id" />
			</index>
			<fk name="group_id_refs_id_f4b32aac" to_schema="public" to_table="auth_group" >
				<fk_column name="group_id" pk="id" />
			</fk>
			<fk name="auth_group_permissions_permission_id_fkey" to_schema="public" to_table="auth_permission" >
				<fk_column name="permission_id" pk="id" />
			</fk>
		</table>
		<table name="auth_permission" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="name" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="content_type_id" type="integer" length="10" jt="4" mandatory="y" />
			<column name="codename" type="varchar" length="100" jt="12" mandatory="y" />
			<index name="auth_permission_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="auth_permission_content_type_id_codename_key" unique="UNIQUE" >
				<column name="content_type_id" />
				<column name="codename" />
			</index>
			<index name="auth_permission_content_type_id" unique="NORMAL" >
				<column name="content_type_id" />
			</index>
		</table>
		<table name="auth_user" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="password" type="varchar" length="128" jt="12" mandatory="y" />
			<column name="last_login" type="timestamptz" length="35" decimal="6" jt="93" mandatory="y" />
			<column name="is_superuser" type="bool" length="1" jt="-7" mandatory="y" />
			<column name="username" type="varchar" length="30" jt="12" mandatory="y" />
			<column name="first_name" type="varchar" length="30" jt="12" mandatory="y" />
			<column name="last_name" type="varchar" length="30" jt="12" mandatory="y" />
			<column name="email" type="varchar" length="75" jt="12" mandatory="y" />
			<column name="is_staff" type="bool" length="1" jt="-7" mandatory="y" />
			<column name="is_active" type="bool" length="1" jt="-7" mandatory="y" />
			<column name="date_joined" type="timestamptz" length="35" decimal="6" jt="93" mandatory="y" />
			<index name="auth_user_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="auth_user_groups" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="user_id" type="integer" length="10" jt="4" mandatory="y" />
			<column name="group_id" type="integer" length="10" jt="4" mandatory="y" />
			<index name="auth_user_groups_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="auth_user_groups_user_id_group_id_key" unique="UNIQUE" >
				<column name="user_id" />
				<column name="group_id" />
			</index>
			<fk name="auth_user_groups_group_id_fkey" to_schema="public" to_table="auth_group" >
				<fk_column name="group_id" pk="id" />
			</fk>
			<fk name="user_id_refs_id_40c41112" to_schema="public" to_table="auth_user" >
				<fk_column name="user_id" pk="id" />
			</fk>
		</table>
		<table name="auth_user_user_permissions" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="user_id" type="integer" length="10" jt="4" mandatory="y" />
			<column name="permission_id" type="integer" length="10" jt="4" mandatory="y" />
			<index name="auth_user_user_permissions_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="auth_user_user_permissions_user_id_permission_id_key" unique="UNIQUE" >
				<column name="user_id" />
				<column name="permission_id" />
			</index>
			<fk name="auth_user_user_permissions_permission_id_fkey" to_schema="public" to_table="auth_permission" >
				<fk_column name="permission_id" pk="id" />
			</fk>
			<fk name="user_id_refs_id_4dc23c39" to_schema="public" to_table="auth_user" >
				<fk_column name="user_id" pk="id" />
			</fk>
		</table>
		<table name="django_admin_log" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="action_time" type="timestamptz" length="35" decimal="6" jt="93" mandatory="y" />
			<column name="user_id" type="integer" length="10" jt="4" mandatory="y" />
			<column name="content_type_id" type="integer" length="10" jt="4" />
			<column name="object_id" type="text" length="2147483647" jt="12" />
			<column name="object_repr" type="varchar" length="200" jt="12" mandatory="y" />
			<column name="action_flag" type="smallint" length="5" jt="5" mandatory="y" />
			<column name="change_message" type="text" length="2147483647" jt="12" mandatory="y" />
			<index name="django_admin_log_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="django_admin_log_content_type_id" unique="NORMAL" >
				<column name="content_type_id" />
			</index>
			<index name="django_admin_log_user_id" unique="NORMAL" >
				<column name="user_id" />
			</index>
			<constraint name="django_admin_log_action_flag_check" >
				<string>action_flag &gt;= 0</string>
			</constraint>
			<fk name="django_admin_log_user_id_fkey" to_schema="public" to_table="auth_user" >
				<fk_column name="user_id" pk="id" />
			</fk>
			<fk name="django_admin_log_content_type_id_fkey" to_schema="public" to_table="django_content_type" >
				<fk_column name="content_type_id" pk="id" />
			</fk>
		</table>
		<table name="django_content_type" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="name" type="varchar" length="100" jt="12" mandatory="y" />
			<column name="app_label" type="varchar" length="100" jt="12" mandatory="y" />
			<column name="model" type="varchar" length="100" jt="12" mandatory="y" />
			<index name="django_content_type_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="django_content_type_app_label_model_key" unique="UNIQUE" >
				<column name="app_label" />
				<column name="model" />
			</index>
		</table>
		<table name="django_flatpage" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="url" type="varchar" length="100" jt="12" mandatory="y" />
			<column name="title" type="varchar" length="200" jt="12" mandatory="y" />
			<column name="content" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="enable_comments" type="bool" length="1" jt="-7" mandatory="y" />
			<column name="template_name" type="varchar" length="70" jt="12" mandatory="y" />
			<column name="registration_required" type="bool" length="1" jt="-7" mandatory="y" />
			<index name="django_flatpage_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="django_flatpage_sites" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="flatpage_id" type="integer" length="10" jt="4" mandatory="y" />
			<column name="site_id" type="integer" length="10" jt="4" mandatory="y" />
			<index name="django_flatpage_sites_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="django_flatpage_sites_flatpage_id_site_id_key" unique="UNIQUE" >
				<column name="flatpage_id" />
				<column name="site_id" />
			</index>
			<index name="django_flatpage_sites_flatpage_id" unique="NORMAL" >
				<column name="flatpage_id" />
			</index>
			<index name="django_flatpage_sites_site_id" unique="NORMAL" >
				<column name="site_id" />
			</index>
			<fk name="flatpage_id_refs_id_83cd0023" to_schema="public" to_table="django_flatpage" >
				<fk_column name="flatpage_id" pk="id" />
			</fk>
			<fk name="django_flatpage_sites_site_id_fkey" to_schema="public" to_table="django_site" >
				<fk_column name="site_id" pk="id" />
			</fk>
		</table>
		<table name="django_session" >
			<column name="session_key" type="varchar" length="40" jt="12" mandatory="y" />
			<column name="session_data" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="expire_date" type="timestamptz" length="35" decimal="6" jt="93" mandatory="y" />
			<index name="django_session_pkey" unique="PRIMARY_KEY" >
				<column name="session_key" />
			</index>
			<index name="django_session_expire_date" unique="NORMAL" >
				<column name="expire_date" />
			</index>
		</table>
		<table name="django_site" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="domain" type="varchar" length="100" jt="12" mandatory="y" />
			<column name="name" type="varchar" length="50" jt="12" mandatory="y" />
			<index name="django_site_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="plrutils_database" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="name" type="varchar" length="255" jt="12" mandatory="y" />
			<index name="plrutils_database_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="plrutils_graphfunction" >
			<column name="id" type="serial" length="10" jt="4" mandatory="y" />
			<column name="name" type="varchar" length="255" jt="12" mandatory="y" />
			<column name="database_id" type="integer" length="10" jt="4" mandatory="y" />
			<column name="params" type="text" length="2147483647" jt="12" />
			<index name="plrutils_graphfunction_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="plrutils_graphfunction_database_id" unique="NORMAL" >
				<column name="database_id" />
			</index>
			<fk name="plrutils_graphfunction_database_id_fkey" to_schema="public" to_table="plrutils_database" >
				<fk_column name="database_id" pk="id" />
			</fk>
		</table>
		<table name="ev_action" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="event_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="name" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="numcode" type="integer" length="10" jt="4" mandatory="y" >
				<defo>0</defo>
			</column>
			<column name="description" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="duration" type="integer" length="10" jt="4" mandatory="y" >
				<defo>15</defo>
			</column>
			<column name="status" type="text" length="2147483647" jt="12" mandatory="y" >
				<defo>&#039;non executable&#039;::text</defo>
			</column>
			<column name="comment" type="text" length="2147483647" jt="12" />
			<index name="ev_action_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="ev_action_event_id_name_key" unique="UNIQUE" >
				<column name="event_id" />
				<column name="name" />
			</index>
			<constraint name="ev_action_status_check" >
				<string>status = ANY (ARRAY[&#039;executable&#039;::text, &#039;non executable&#039;::text, &#039;running&#039;::text, &#039;terminated (success)&#039;::text, &#039;terminated (not needed)&#039;::text, &#039;terminated (failed)&#039;::text])</string>
			</constraint>
			<constraint name="ev_action_duration_check" >
				<string>(duration &gt;= 0) AND ((duration % 15) = 0)</string>
			</constraint>
			<fk name="ev_action_event_id_fkey" to_schema="public" to_table="event" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="event_id" pk="id" />
			</fk>
		</table>
		<table name="ev_action_graph" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="action_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="parent_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="is_main_parent" type="bool" length="1" jt="-7" mandatory="y" >
				<defo>true</defo>
			</column>
			<index name="ev_action_graph_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="ev_action_graph_action_id_parent_id_key" unique="UNIQUE" >
				<column name="action_id" />
				<column name="parent_id" />
			</index>
			<fk name="ev_action_graph_action_id_fkey" to_schema="public" to_table="ev_action" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="action_id" pk="id" />
			</fk>
			<fk name="ev_action_graph_parent_id_fkey" to_schema="public" to_table="ev_action" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="parent_id" pk="id" />
			</fk>
		</table>
		<table name="ev_action_m2m_actor" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="action_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="actor_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<index name="ev_action_m2m_actor_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="ev_action_m2m_actor_action_id_actor_id_key" unique="UNIQUE" >
				<column name="action_id" />
				<column name="actor_id" />
			</index>
			<fk name="ev_action_m2m_actor_action_id_fkey" to_schema="public" to_table="ev_action" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="action_id" pk="id" />
			</fk>
			<fk name="ev_action_m2m_actor_actor_id_fkey" to_schema="public" to_table="ev_actor" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="actor_id" pk="id" />
			</fk>
		</table>
		<table name="ev_actor" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="event_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="name" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="istitution" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="contact_info" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="email" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="phone" type="text" length="2147483647" jt="12" mandatory="y" />
			<index name="ev_actor_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="ev_actor_event_id_email_key" unique="UNIQUE" >
				<column name="event_id" />
				<column name="email" />
			</index>
			<fk name="ev_actor_event_id_fkey" to_schema="public" to_table="event" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="event_id" pk="id" />
			</fk>
		</table>
		<table name="ev_visualization" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="action_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="description" type="text" length="2147483647" jt="12" />
			<column name="type" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="resource" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="options" type="text" length="2147483647" jt="12" />
			<index name="ev_visualization_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<fk name="ev_visualization_action_id_fkey" to_schema="public" to_table="ev_action" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="action_id" pk="id" />
			</fk>
		</table>
		<table name="event" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="category_name" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="category_description" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="subcategory_name" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="subcategory_description" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="status" type="text" length="2147483647" jt="12" mandatory="y" >
				<defo>&#039;open&#039;::text</defo>
			</column>
			<column name="is_real" type="bool" length="1" jt="-7" mandatory="y" >
				<defo>false</defo>
			</column>
			<column name="time_start" type="timestamp" length="29" decimal="6" jt="93" mandatory="y" >
				<defo>now()</defo>
			</column>
			<column name="time_end" type="timestamp" length="29" decimal="6" jt="93" />
			<column name="event_name" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="event_description" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="managing_authority_id" type="bigint" length="19" jt="-5" />
			<column name="event_geom" type="geometry" length="2147483647" jt="1111" mandatory="y" />
			<column name="scenario_geom" type="geometry" length="2147483647" jt="1111" mandatory="y" />
			<index name="event_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<constraint name="event_status_check" >
				<string>status = ANY (ARRAY[&#039;open&#039;::text, &#039;closed&#039;::text])</string>
			</constraint>
			<fk name="event_managing_authority_id_fkey" to_schema="public" to_table="managing_authority" delete_action="SET_NULL" update_action="CASCADE" >
				<fk_column name="managing_authority_id" pk="id" />
			</fk>
		</table>
		<table name="ev_message" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="event_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="ts" type="timestamptz" length="35" decimal="6" jt="93" mandatory="y" >
				<defo>now()</defo>
			</column>
			<column name="username" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="content" type="text" length="2147483647" jt="12" mandatory="y" />
			<index name="ev_message_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="ev_message_event_id_ts_username_key" unique="UNIQUE" >
				<column name="event_id" />
				<column name="ts" />
				<column name="username" />
			</index>
			<fk name="ev_message_event_id_fkey" to_schema="public" to_table="event" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="event_id" pk="id" />
			</fk>
		</table>
		<table name="event_log" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="event_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="txid" type="bigint" length="19" jt="-5" mandatory="y" >
				<defo>txid_current()</defo>
			</column>
			<column name="ts" type="timestamptz" length="35" decimal="6" jt="93" mandatory="y" >
				<defo>now()</defo>
			</column>
			<column name="table_name" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="action" type="text" length="2147483647" jt="12" mandatory="y" />
			<column name="row_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="fields" type="hstore" length="2147483647" jt="1111" mandatory="y" />
			<index name="event_log_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<constraint name="event_log_action_check" >
				<string>action = ANY (ARRAY[&#039;I&#039;::text, &#039;U&#039;::text])</string>
			</constraint>
			<fk name="event_log_event_id_fkey" to_schema="public" to_table="event" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="event_id" pk="id" />
			</fk>
		</table>
		<table name="gt_catalog" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="name" type="varchar" length="255" jt="12" mandatory="y" />
			<column name="creation_time" type="timestamp" length="22" jt="93" mandatory="y" >
				<defo>now()</defo>
			</column>
			<column name="numcode" type="integer" length="10" jt="4" mandatory="y" >
				<defo>0</defo>
			</column>
			<column name="tabletype" type="text" length="2147483647" jt="12" mandatory="y" >
				<defo>&#039;local&#039;::text</defo>
			</column>
			<column name="tableschema" type="name" length="2147483647" jt="-1" />
			<column name="tablename" type="name" length="2147483647" jt="-1" />
			<column name="code_column" type="name" length="2147483647" jt="-1" />
			<column name="time_column" type="name" length="2147483647" jt="-1" />
			<index name="gt_catalog_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<constraint name="gt_catalog_tabletype_check" >
				<string>tabletype = ANY (ARRAY[&#039;local&#039;::text, &#039;pgsql&#039;::text, &#039;csv&#039;::text, &#039;multicorn&#039;::text])</string>
			</constraint>
		</table>
		<table name="gt_catalog_layer" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="name" type="varchar" length="255" jt="12" mandatory="y" />
			<column name="creation_time" type="timestamp" length="22" jt="93" mandatory="y" >
				<defo>now()</defo>
			</column>
			<column name="numcode" type="integer" length="10" jt="4" mandatory="y" >
				<defo>0</defo>
			</column>
			<column name="tabletype" type="text" length="2147483647" jt="12" mandatory="y" >
				<defo>&#039;local&#039;::text</defo>
			</column>
			<column name="tableschema" type="name" length="2147483647" jt="-1" />
			<column name="tablename" type="name" length="2147483647" jt="-1" />
			<column name="code_column" type="name" length="2147483647" jt="-1" />
			<column name="time_column" type="name" length="2147483647" jt="-1" />
			<column name="group_id" type="bigint" length="19" jt="-5" mandatory="y" >
				<defo>0</defo>
			</column>
			<column name="gt_style_id" type="bigint" length="19" jt="-5" />
			<column name="geom_column" type="name" length="2147483647" jt="-1" />
			<column name="ui_qtip" type="varchar" length="255" jt="12" />
			<column name="gs_name" type="varchar" length="255" jt="12" mandatory="y" />
			<column name="gs_workspace" type="varchar" length="255" jt="12" />
			<column name="gs_url" type="varchar" length="255" jt="12" mandatory="y" />
			<column name="gs_legend_url" type="varchar" length="255" jt="12" />
			<index name="gt_catalog_layer_id_key" unique="UNIQUE" >
				<column name="id" />
			</index>
			<index name="gt_catalog_layer_tableschema_tablename_code_column_geom_col_key" unique="UNIQUE" >
				<column name="tableschema" />
				<column name="tablename" />
				<column name="code_column" />
				<column name="geom_column" />
			</index>
			<constraint name="set_all_table_fields" >
				<string>(((tableschema IS NULL) = (tablename IS NULL)) AND ((tablename IS NULL) = (geom_column IS NULL))) OR (((tableschema IS NOT NULL) AND (tablename IS NOT NULL)) AND (geom_column IS NULL))</string>
			</constraint>
			<constraint name="gt_catalog_tabletype_check" >
				<string>tabletype = ANY (ARRAY[&#039;local&#039;::text, &#039;pgsql&#039;::text, &#039;csv&#039;::text, &#039;multicorn&#039;::text])</string>
			</constraint>
			<fk name="gt_catalog_layer_group_id_fkey" to_schema="public" to_table="gt_layer_group" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="group_id" pk="id" />
			</fk>
			<fk name="gt_catalog_layer_gt_style_id_fkey" to_schema="public" to_table="gt_style" update_action="CASCADE" >
				<fk_column name="gt_style_id" pk="id" />
			</fk>
		</table>
		<table name="gt_layer_group" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="name" type="varchar" length="255" jt="12" mandatory="y" />
			<index name="gt_layer_group_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="gt_layer_meta" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="layer_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="title" type="varchar" length="255" jt="12" />
			<column name="description" type="text" length="2147483647" jt="12" />
			<column name="category" type="text" length="2147483647" jt="12" />
			<column name="extent" type="text" length="2147483647" jt="12" />
			<column name="measure_unit" type="text" length="2147483647" jt="12" />
			<column name="author" type="text" length="2147483647" jt="12" />
			<column name="ref_year" type="integer" length="10" jt="4" />
			<column name="creation_year" type="integer" length="10" jt="4" />
			<column name="native_format" type="text" length="2147483647" jt="12" />
			<column name="genealogy" type="text" length="2147483647" jt="12" />
			<column name="spatial_resolution" type="text" length="2147483647" jt="12" />
			<column name="ref_system" type="text" length="2147483647" jt="12" />
			<column name="availability" type="text" length="2147483647" jt="12" />
			<column name="has_attributes" type="bool" length="1" jt="-7" />
			<column name="source" type="text" length="2147483647" jt="12" />
			<index name="gt_layer_meta_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="gt_layer_meta_layer_id_key" unique="UNIQUE" >
				<column name="layer_id" />
			</index>
			<fk name="gt_layer_meta_layer_id_fkey" to_schema="public" to_table="gt_catalog_layer" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="layer_id" pk="id" />
			</fk>
		</table>
		<table name="gt_layer_tree" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="group_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<column name="parent_group_id" type="bigint" length="19" jt="-5" mandatory="y" />
			<index name="gt_layer_tree_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="gt_layer_tree_group_id_key" unique="UNIQUE" >
				<column name="group_id" />
			</index>
			<fk name="gt_layer_tree_group_id_fkey" to_schema="public" to_table="gt_layer_group" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="group_id" pk="id" />
			</fk>
			<fk name="gt_layer_tree_parent_group_id_fkey" to_schema="public" to_table="gt_layer_group" delete_action="CASCADE" update_action="CASCADE" >
				<fk_column name="parent_group_id" pk="id" />
			</fk>
		</table>
		<table name="gt_style" >
			<column name="id" type="bigserial" length="19" jt="-5" mandatory="y" />
			<column name="name" type="varchar" length="255" jt="12" mandatory="y" />
			<column name="label" type="varchar" length="255" jt="12" mandatory="y" />
			<column name="xml" type="xml" length="2147483647" jt="1111" />
			<column name="feature_type" type="text" length="2147483647" jt="12" />
			<index name="gt_style_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="gt_style_name_key" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="brenner" >
			<column name="gid" type="serial" length="10" jt="4" mandatory="y" />
			<column name="externalid" type="numeric" jt="2" />
			<column name="cod_node_a" type="numeric" jt="2" />
			<column name="cod_node_b" type="numeric" jt="2" />
			<column name="oneway" type="numeric" jt="2" />
			<column name="roadtype" type="numeric" jt="2" />
			<column name="stateroadn" type="varchar" length="50" jt="12" />
			<column name="streetname" type="varchar" length="50" jt="12" />
			<column name="alpcheckco" type="numeric" jt="2" />
			<column name="lanes" type="numeric" jt="2" />
			<column name="capacity" type="numeric" jt="2" />
			<column name="v0" type="numeric" jt="2" />
			<column name="vc" type="numeric" jt="2" />
			<column name="lcf" type="numeric" jt="2" />
			<column name="aadt_lv" type="numeric" jt="2" />
			<column name="aadt_hv" type="numeric" jt="2" />
			<column name="aadt_tot" type="numeric" jt="2" />
			<column name="length" type="numeric" jt="2" />
			<column name="lv_ab" type="numeric" jt="2" />
			<column name="hv_ab" type="numeric" jt="2" />
			<column name="dgtv_ab" type="numeric" jt="2" />
			<column name="lv_ba" type="numeric" jt="2" />
			<column name="hv_ba" type="numeric" jt="2" />
			<column name="dgtv_ba" type="numeric" jt="2" />
			<column name="the_geom" type="geometry" length="2147483647" jt="1111" />
			<column name="source" type="integer" length="10" jt="4" />
			<column name="target" type="integer" length="10" jt="4" />
			<column name="cost" type="float8" length="17" decimal="17" jt="8" />
			<column name="available" type="bool" length="1" jt="-7" mandatory="y" >
				<defo>true</defo>
			</column>
			<column name="id" type="integer" length="10" jt="4" />
			<column name="time" type="float8" length="17" decimal="17" jt="8" />
			<column name="reverse_cost" type="float8" length="17" decimal="17" jt="8" />
			<column name="reverse_time" type="float8" length="17" decimal="17" jt="8" />
			<column name="nat01" type="smallint" length="5" jt="5" />
			<column name="nat02" type="smallint" length="5" jt="5" />
			<column name="nat03" type="smallint" length="5" jt="5" />
			<column name="nat04" type="smallint" length="5" jt="5" />
			<column name="nat05" type="smallint" length="5" jt="5" />
			<column name="nat06" type="smallint" length="5" jt="5" />
			<column name="nat07" type="smallint" length="5" jt="5" />
			<index name="data_pkey" unique="PRIMARY_KEY" >
				<column name="gid" />
			</index>
			<constraint name="enforce_srid_the_geom" >
				<string>st_srid(the_geom) = 4326</string>
			</constraint>
			<constraint name="enforce_geotype_the_geom" >
				<string>(geometrytype(the_geom) = &#039;LINESTRING&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_dims_the_geom" >
				<string>st_ndims(the_geom) = 2</string>
			</constraint>
		</table>
		<view name="geography_columns" >
			<view_script><![CDATA[SELECT current_database() AS f_table_catalog, n.nspname AS f_table_schema, c.relname AS f_table_name, a.attname AS f_geography_column, postgis_typmod_dims(a.atttypmod) AS coord_dimension, postgis_typmod_srid(a.atttypmod) AS srid, postgis_typmod_type(a.atttypmod) AS type FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n WHERE (((((((t.typname = 'geography'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND (NOT pg_is_other_temp_schema(c.relnamespace))) AND has_table_privilege(c.oid, 'SELECT'::text));]]></view_script>
			<column name="f_table_catalog" type="name" />
			<column name="f_table_schema" type="name" />
			<column name="f_table_name" type="name" />
			<column name="f_geography_column" type="name" />
			<column name="coord_dimension" type="integer" />
			<column name="srid" type="integer" />
			<column name="type" type="text" />
		</view>
		<view name="geometry_columns" >
			<view_script><![CDATA[SELECT (current_database())::character varying(256) AS f_table_catalog, (n.nspname)::character varying(256) AS f_table_schema, (c.relname)::character varying(256) AS f_table_name, (a.attname)::character varying(256) AS f_geometry_column, COALESCE(NULLIF(postgis_typmod_dims(a.atttypmod), 2), postgis_constraint_dims((n.nspname)::text, (c.relname)::text, (a.attname)::text), 2) AS coord_dimension, COALESCE(NULLIF(postgis_typmod_srid(a.atttypmod), 0), postgis_constraint_srid((n.nspname)::text, (c.relname)::text, (a.attname)::text), 0) AS srid, (replace(replace(COALESCE(NULLIF(upper(postgis_typmod_type(a.atttypmod)), 'GEOMETRY'::text), (postgis_constraint_type((n.nspname)::text, (c.relname)::text, (a.attname)::text))::text, 'GEOMETRY'::text), 'ZM'::text, ''::text), 'Z'::text, ''::text))::character varying(30) AS type FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n WHERE (((((((((t.typname = 'geometry'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND ((c.relkind = 'r'::"char") OR (c.relkind = 'v'::"char"))) AND (NOT pg_is_other_temp_schema(c.relnamespace))) AND (NOT ((n.nspname = 'public'::name) AND (c.relname = 'raster_columns'::name)))) AND has_table_privilege(c.oid, 'SELECT'::text));]]></view_script>
			<column name="f_table_catalog" type="varchar" />
			<column name="f_table_schema" type="varchar" />
			<column name="f_table_name" type="varchar" />
			<column name="f_geometry_column" type="varchar" />
			<column name="coord_dimension" type="integer" />
			<column name="srid" type="integer" />
			<column name="type" type="varchar" />
		</view>
		<view name="raster_columns" >
			<view_script><![CDATA[SELECT current_database() AS r_table_catalog, n.nspname AS r_table_schema, c.relname AS r_table_name, a.attname AS r_raster_column, COALESCE(_raster_constraint_info_srid(n.nspname, c.relname, a.attname), (SELECT st_srid('010100000000000000000000000000000000000000'::geometry) AS st_srid)) AS srid, _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'x'::bpchar) AS scale_x, _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'y'::bpchar) AS scale_y, _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'width'::text) AS blocksize_x, _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'height'::text) AS blocksize_y, COALESCE(_raster_constraint_info_alignment(n.nspname, c.relname, a.attname), false) AS same_alignment, COALESCE(_raster_constraint_info_regular_blocking(n.nspname, c.relname, a.attname), false) AS regular_blocking, _raster_constraint_info_num_bands(n.nspname, c.relname, a.attname) AS num_bands, _raster_constraint_info_pixel_types(n.nspname, c.relname, a.attname) AS pixel_types, _raster_constraint_info_nodata_values(n.nspname, c.relname, a.attname) AS nodata_values, _raster_constraint_info_out_db(n.nspname, c.relname, a.attname) AS out_db, _raster_constraint_info_extent(n.nspname, c.relname, a.attname) AS extent FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n WHERE (((((((t.typname = 'raster'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND ((c.relkind = 'r'::"char") OR (c.relkind = 'v'::"char"))) AND (NOT pg_is_other_temp_schema(c.relnamespace)));]]></view_script>
			<column name="r_table_catalog" type="name" />
			<column name="r_table_schema" type="name" />
			<column name="r_table_name" type="name" />
			<column name="r_raster_column" type="name" />
			<column name="srid" type="integer" />
			<column name="scale_x" type="float8" />
			<column name="scale_y" type="float8" />
			<column name="blocksize_x" type="integer" />
			<column name="blocksize_y" type="integer" />
			<column name="same_alignment" type="bool" />
			<column name="regular_blocking" type="bool" />
			<column name="num_bands" type="integer" />
			<column name="pixel_types" type="_text" />
			<column name="nodata_values" type="_float8" />
			<column name="out_db" type="_bool" />
			<column name="extent" type="geometry" />
		</view>
		<view name="raster_overviews" >
			<view_script><![CDATA[SELECT current_database() AS o_table_catalog, n.nspname AS o_table_schema, c.relname AS o_table_name, a.attname AS o_raster_column, current_database() AS r_table_catalog, (split_part(split_part(s.consrc, '''::name'::text, 1), ''''::text, 2))::name AS r_table_schema, (split_part(split_part(s.consrc, '''::name'::text, 2), ''''::text, 2))::name AS r_table_name, (split_part(split_part(s.consrc, '''::name'::text, 3), ''''::text, 2))::name AS r_raster_column, (btrim(split_part(s.consrc, ','::text, 2)))::integer AS overview_factor FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n, pg_constraint s WHERE ((((((((((t.typname = 'raster'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND ((c.relkind = 'r'::"char") OR (c.relkind = 'v'::"char"))) AND (s.connamespace = n.oid)) AND (s.conrelid = c.oid)) AND (s.consrc ~~ '%_overview_constraint(%'::text)) AND (NOT pg_is_other_temp_schema(c.relnamespace)));]]></view_script>
			<column name="o_table_catalog" type="name" />
			<column name="o_table_schema" type="name" />
			<column name="o_table_name" type="name" />
			<column name="o_raster_column" type="name" />
			<column name="r_table_catalog" type="name" />
			<column name="r_table_schema" type="name" />
			<column name="r_table_name" type="name" />
			<column name="r_raster_column" type="name" />
			<column name="overview_factor" type="integer" />
		</view>
		<sequence name="scenario_id_seq" start="1" />
		<sequence name="managing_authority_id_seq" start="1" />
		<sequence name="actor_id_seq" start="1" />
		<sequence name="action_id_seq" start="1" />
		<sequence name="visualization_id_seq" start="1" />
		<sequence name="interruptions_gid_seq" start="1" />
		<sequence name="action_m2m_actor_id_seq" start="1" />
		<sequence name="action_graph_id_seq" start="1" />
		<sequence name="scenario_category_id_seq" start="1" />
		<sequence name="scenario_subcategory_id_seq" start="1" />
		<sequence name="django_content_type_id_seq" start="1" />
		<sequence name="django_site_id_seq" start="1" />
		<sequence name="django_admin_log_id_seq" start="1" />
		<sequence name="admin_tools_menu_bookmark_id_seq" start="1" />
		<sequence name="admin_tools_dashboard_preferences_id_seq" start="1" />
		<sequence name="plrutils_database_id_seq" start="1" />
		<sequence name="plrutils_graphfunction_id_seq" start="1" />
		<sequence name="django_flatpage_sites_id_seq" start="1" />
		<sequence name="django_flatpage_id_seq" start="1" />
		<sequence name="auth_permission_id_seq" start="1" />
		<sequence name="auth_group_permissions_id_seq" start="1" />
		<sequence name="auth_group_id_seq" start="1" />
		<sequence name="auth_user_groups_id_seq" start="1" />
		<sequence name="auth_user_user_permissions_id_seq" start="1" />
		<sequence name="auth_user_id_seq" start="1" />
		<sequence name="event_id_seq" start="1" />
		<sequence name="ev_message_id_seq" start="1" />
		<sequence name="event_log_id_seq" start="1" />
		<sequence name="ev_action_graph_id_seq" start="1" />
		<sequence name="ev_action_id_seq" start="1" />
		<sequence name="ev_actor_id_seq" start="1" />
		<sequence name="ev_action_m2m_actor_id_seq" start="1" />
		<sequence name="ev_visualization_id_seq" start="1" />
		<sequence name="gt_catalog_id_seq" start="1" />
		<sequence name="gt_style_id_seq" start="1" />
		<sequence name="gt_layer_group_id_seq" start="1" />
		<sequence name="gt_layer_tree_id_seq" start="1" />
		<sequence name="gt_layer_meta_id_seq" start="1" />
		<sequence name="data_gid_seq" start="1" />
		<trigger name="after_new_action_graph" id="Trigger2058498" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER after_new_action_graph AFTER INSERT ON action_graph FOR EACH ROW EXECUTE PROCEDURE after_new_action_graph()]]></string>
		</trigger>
		<trigger name="new_action_graph" id="Trigger2058499" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER new_action_graph BEFORE INSERT ON action_graph FOR EACH ROW EXECUTE PROCEDURE new_action_graph()]]></string>
		</trigger>
		<trigger name="update_action_graph_after" id="Trigger2058500" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER update_action_graph_after AFTER UPDATE ON action_graph FOR EACH ROW EXECUTE PROCEDURE update_action_graph_after()]]></string>
		</trigger>
		<trigger name="update_action_graph" id="Trigger2058500" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER update_action_graph BEFORE UPDATE ON action_graph FOR EACH ROW EXECUTE PROCEDURE update_action_graph()]]></string>
		</trigger>
		<trigger name="after_delete_action_graph" id="Trigger2058500" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER after_delete_action_graph AFTER DELETE ON action_graph FOR EACH ROW EXECUTE PROCEDURE after_delete_action_graph()]]></string>
		</trigger>
		<trigger name="new_scenario" id="Trigger2058500" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER new_scenario AFTER INSERT ON scenario FOR EACH ROW EXECUTE PROCEDURE new_scenario()]]></string>
		</trigger>
		<trigger name="update_action" id="Trigger2058500" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER update_action BEFORE UPDATE ON action FOR EACH ROW EXECUTE PROCEDURE update_action()]]></string>
		</trigger>
		<trigger name="new_action_check" id="Trigger2058500" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER new_action_check AFTER INSERT ON action FOR EACH ROW EXECUTE PROCEDURE new_action()]]></string>
		</trigger>
		<trigger name="delete_ev_action" id="Trigger8170648" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER delete_ev_action BEFORE DELETE ON ev_action FOR EACH ROW EXECUTE PROCEDURE delete_ev_action()]]></string>
		</trigger>
		<trigger name="ev_logger" id="Trigger1544934" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER ev_logger AFTER INSERT OR UPDATE ON event FOR EACH ROW EXECUTE PROCEDURE ev_logger()]]></string>
		</trigger>
		<trigger name="ev_logger_001" id="Trigger1544934" isSystem="false" />
		<trigger name="ev_logger_002" id="Trigger1544934" isSystem="false" />
		<trigger name="ev_logger_003" id="Trigger1544934" isSystem="false" />
		<trigger name="ev_logger_004" id="Trigger1544934" isSystem="false" />
		<trigger name="ev_logger_005" id="Trigger1544935" isSystem="false" />
		<trigger name="update_ev_action" id="Trigger6871542" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER update_ev_action BEFORE UPDATE ON ev_action FOR EACH ROW EXECUTE PROCEDURE update_ev_action()]]></string>
		</trigger>
		<trigger name="after_update_ev_action" id="Trigger6871542" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER after_update_ev_action AFTER UPDATE ON ev_action FOR EACH ROW EXECUTE PROCEDURE after_update_ev_action()]]></string>
		</trigger>
		<trigger name="gt_catalog_noedit_check" id="Trigger8113829" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER gt_catalog_noedit_check BEFORE INSERT OR DELETE OR UPDATE ON gt_catalog FOR EACH STATEMENT EXECUTE PROCEDURE gt_catalog_noedit()]]></string>
		</trigger>
		<trigger name="gt_layer_tree_after_check" id="Trigger8113829" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER gt_layer_tree_after_check AFTER INSERT OR UPDATE ON gt_layer_tree FOR EACH ROW EXECUTE PROCEDURE gt_group_tree_check()]]></string>
		</trigger>
		<trigger name="gt_catalog_layer_after_check" id="Trigger8113830" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER gt_catalog_layer_after_check AFTER INSERT ON gt_catalog_layer FOR EACH ROW EXECUTE PROCEDURE gt_catalog_layer_after_insert_check()]]></string>
		</trigger>
		<trigger name="gt_catalog_noedit_check_001" id="Trigger8113830" isSystem="false" />
		<trigger name="gt_catalog_noedit_check_002" id="Trigger8113830" isSystem="false" />
		<trigger name="gt_layer_tree_after_check_001" id="Trigger8113830" isSystem="false" />
		<function name="_add_overview_constraint" id="Function2000181" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_overview_constraint(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, factor integer)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_overview_' || $3;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_overview_constraint(' || quote_ident($3)
			|| ',' || $7
			|| ',' || quote_literal($4)
			|| ',' || quote_literal($5)
			|| ',' || quote_literal($6)
			|| '))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint" id="Function2000181" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint(cn name, sql text)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	BEGIN
		BEGIN
			EXECUTE sql;
		EXCEPTION
			WHEN duplicate_object THEN
				RAISE NOTICE 'The constraint "%" already exists.  To replace the existing constraint, delete the constraint and call ApplyRasterConstraints again', cn;
			WHEN OTHERS THEN
				RAISE NOTICE 'Unable to add constraint "%"', cn;
				RETURN FALSE;
		END;
		RETURN TRUE;
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_alignment" id="Function2000182" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_same_alignment_' || $3;
		sql := 'SELECT st_makeemptyraster(1, 1, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid) FROM st_metadata((SELECT '
			|| quote_ident($3)
			|| ' FROM ' || fqtn || ' LIMIT 1))';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the alignment of a sample raster';
			RETURN FALSE;
		END;
		sql := 'ALTER TABLE ' || fqtn ||
			' ADD CONSTRAINT ' || quote_ident(cn) ||
			' CHECK (st_samealignment(' || quote_ident($3) || ', ''' || attr || '''::raster))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_blocksize" id="Function2000182" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr int;
	BEGIN
		IF lower($4) != 'width' AND lower($4) != 'height' THEN
			RAISE EXCEPTION 'axis must be either "width" or "height"';
			RETURN FALSE;
		END IF;
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_' || $4 || '_' || $3;
		sql := 'SELECT st_' || $4 || '('
			|| quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the % of a sample raster', $4;
			RETURN FALSE;
		END;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_' || $4 || '('
			|| quote_ident($3)
			|| ') = ' || attr || ')';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_extent" id="Function2000183" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_max_extent_' || $3;
		sql := 'SELECT st_ashexewkb(st_convexhull(st_collect(st_convexhull('
			|| quote_ident($3)
			|| ')))) FROM '
			|| fqtn;
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the extent of a sample raster. Attempting memory efficient (slower) approach';
			sql := 'SELECT st_ashexewkb(st_convexhull(st_memunion(st_convexhull('
				|| quote_ident($3)
				|| ')))) FROM '
				|| fqtn;
			BEGIN
				EXECUTE sql INTO attr;
			EXCEPTION WHEN OTHERS THEN
				RAISE NOTICE 'Still unable to get the extent of a sample raster. Cannot add extent constraint';
				RETURN FALSE;
			END;
		END;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_coveredby(st_convexhull('
			|| quote_ident($3)
			|| '), ''' || attr || '''::geometry))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_nodata_values" id="Function2000183" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr double precision[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_nodata_values_' || $3;
		sql := 'SELECT _raster_constraint_nodata_values(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the nodata values of a sample raster';
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the nodata values of a sample raster';
			RETURN FALSE;
		END IF;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_nodata_values(' || quote_ident($3)
			|| ')::numeric(16,10)[] = ''{';
		FOR x in 1..max LOOP
			IF attr[x] IS NULL THEN
				sql := sql || 'NULL';
			ELSE
				sql := sql || attr[x];
			END IF;
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::numeric(16,10)[])';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_num_bands" id="Function2000184" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_num_bands_' || $3;
		sql := 'SELECT st_numbands(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the number of bands of a sample raster';
			RETURN FALSE;
		END;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_numbands(' || quote_ident($3)
			|| ') = ' || attr
			|| ')';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_out_db" id="Function2000185" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr boolean[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_out_db_' || $3;
		sql := 'SELECT _raster_constraint_out_db(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the out-of-database bands of a sample raster';
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the out-of-database bands of a sample raster';
			RETURN FALSE;
		END IF;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_out_db(' || quote_ident($3)
			|| ') = ''{';
		FOR x in 1..max LOOP
			IF attr[x] IS FALSE THEN
				sql := sql || 'FALSE';
			ELSE
				sql := sql || 'TRUE';
			END IF;
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::boolean[])';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_pixel_types" id="Function2000185" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_pixel_types_' || $3;
		sql := 'SELECT _raster_constraint_pixel_types(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the pixel types of a sample raster';
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the pixel types of a sample raster';
			RETURN FALSE;
		END IF;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_pixel_types(' || quote_ident($3)
			|| ') = ''{';
		FOR x in 1..max LOOP
			sql := sql || '"' || attr[x] || '"';
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::text[])';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_regular_blocking" id="Function2000186" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
	BEGIN
		RAISE INFO 'The regular_blocking constraint is just a flag indicating that the column "%" is regularly blocked.  It is up to the end-user to ensure that the column is truely regularly blocked.', quote_ident($3);
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_regular_blocking_' || $3;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (TRUE)';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_scale" id="Function2000187" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr double precision;
	BEGIN
		IF lower($4) != 'x' AND lower($4) != 'y' THEN
			RAISE EXCEPTION 'axis must be either "x" or "y"';
			RETURN FALSE;
		END IF;
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_scale' || $4 || '_' || $3;
		sql := 'SELECT st_scale' || $4 || '('
			|| quote_ident($3)
			|| ') FROM '
			|| fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the %-scale of a sample raster', upper($4);
			RETURN FALSE;
		END;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_scale' || $4 || '('
			|| quote_ident($3)
			|| ')::numeric(16,10) = (' || attr || ')::numeric(16,10))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_srid" id="Function2000187" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_srid_' || $3;
		sql := 'SELECT st_srid('
			|| quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the SRID of a sample raster';
			RETURN FALSE;
		END;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_srid('
			|| quote_ident($3)
			|| ') = ' || attr || ')';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_drop_overview_constraint" id="Function2000188" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_overview_constraint(ovschema name, ovtable name, ovcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_overview_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint" id="Function2000188" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint(rastschema name, rasttable name, cn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		BEGIN
			EXECUTE 'ALTER TABLE '
				|| fqtn
				|| ' DROP CONSTRAINT '
				|| quote_ident(cn);
			RETURN TRUE;
		EXCEPTION
			WHEN undefined_object THEN
				RAISE NOTICE 'The constraint "%" does not exist.  Skipping', cn;
			WHEN OTHERS THEN
				RAISE NOTICE 'Unable to drop constraint "%"', cn;
				RETURN FALSE;
		END;
		RETURN TRUE;
	END;
	$function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_alignment" id="Function2000188" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_same_alignment_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_blocksize" id="Function2000189" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	BEGIN
		IF lower($4) != 'width' AND lower($4) != 'height' THEN
			RAISE EXCEPTION 'axis must be either "width" or "height"';
			RETURN FALSE;
		END IF;
		RETURN _drop_raster_constraint($1, $2, 'enforce_' || $4 || '_' || $3);
	END;
	$function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_extent" id="Function2000189" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_max_extent_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_nodata_values" id="Function2000189" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_nodata_values_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_num_bands" id="Function2000190" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_num_bands_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_out_db" id="Function2000190" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_out_db_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_pixel_types" id="Function2000190" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_pixel_types_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_regular_blocking" id="Function2000191" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_regular_blocking_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_scale" id="Function2000191" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	BEGIN
		IF lower($4) != 'x' AND lower($4) != 'y' THEN
			RAISE EXCEPTION 'axis must be either "x" or "y"';
			RETURN FALSE;
		END IF;
		RETURN _drop_raster_constraint($1, $2, 'enforce_scale' || $4 || '_' || $3);
	END;
	$function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_srid" id="Function2000191" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_srid_' || $3) $function$
]]></string>
		</function>
		<function name="_overview_constraint" id="Function2000191" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._overview_constraint(ov raster, factor integer, refschema name, reftable name, refcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STABLE
AS $function$ SELECT COALESCE((SELECT TRUE FROM raster_columns WHERE r_table_catalog = current_database() AND r_table_schema = $3 AND r_table_name = $4 AND r_raster_column = $5), FALSE) $function$
]]></string>
		</function>
		<function name="_overview_constraint_info" id="Function2000200" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._overview_constraint_info(ovschema name, ovtable name, ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer)
 RETURNS record
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		split_part(split_part(s.consrc, '''::name', 1), '''', 2)::name,
		split_part(split_part(s.consrc, '''::name', 2), '''', 2)::name,
		split_part(split_part(s.consrc, '''::name', 3), '''', 2)::name,
		trim(both from split_part(s.consrc, ',', 2))::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_overview_constraint(%'
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_alignment" id="Function2000200" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_alignment(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		TRUE
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_samealignment(%';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_blocksize" id="Function2000201" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_blocksize(rastschema name, rasttable name, rastcolumn name, axis text)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_' || $4 || '(% = %';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_extent" id="Function2000202" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_extent(rastschema name, rasttable name, rastcolumn name)
 RETURNS geometry
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		trim(both '''' from split_part(trim(split_part(s.consrc, ',', 2)), '::', 1))::geometry
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_coveredby(st_convexhull(%';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_nodata_values" id="Function2000203" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name)
 RETURNS double precision[]
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		trim(both '''' from split_part(replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', ''), '::', 1))::double precision[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_nodata_values(%';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_num_bands" id="Function2000203" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_num_bands(rastschema name, rasttable name, rastcolumn name)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_numbands(%';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_out_db" id="Function2000204" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean[]
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		trim(both '''' from split_part(replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', ''), '::', 1))::boolean[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_out_db(%';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_pixel_types" id="Function2000205" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_pixel_types(rastschema name, rasttable name, rastcolumn name)
 RETURNS text[]
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		trim(both '''' from split_part(replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', ''), '::', 1))::text[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_pixel_types(%';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_regular_blocking" id="Function2000205" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_regular_blocking(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
	DECLARE
		cn text;
		sql text;
		rtn boolean;
	BEGIN
		cn := 'enforce_regular_blocking_' || $3;
		sql := 'SELECT TRUE FROM pg_class c, pg_namespace n, pg_constraint s'
			|| ' WHERE n.nspname = ' || quote_literal($1)
			|| ' AND c.relname = ' || quote_literal($2)
			|| ' AND s.connamespace = n.oid AND s.conrelid = c.oid'
			|| ' AND s.conname = ' || quote_literal(cn);
		EXECUTE sql INTO rtn;
		RETURN rtn;
	END;
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_scale" id="Function2000206" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_scale(rastschema name, rasttable name, rastcolumn name, axis character)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		replace(replace(split_part(split_part(s.consrc, ' = ', 2), '::', 1), ')', ''), '(', '')::double precision
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_scale' || $4 || '(% = %';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_srid" id="Function2000206" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_srid(rastschema name, rasttable name, rastcolumn name)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_srid(% = %';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_nodata_values" id="Function2000206" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_nodata_values(rast raster)
 RETURNS double precision[]
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT array_agg(nodatavalue)::double precision[] FROM st_bandmetadata($1, ARRAY[]::int[]); $function$
]]></string>
		</function>
		<function name="_raster_constraint_out_db" id="Function2000207" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_out_db(rast raster)
 RETURNS boolean[]
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT array_agg(isoutdb)::boolean[] FROM st_bandmetadata($1, ARRAY[]::int[]); $function$
]]></string>
		</function>
		<function name="_raster_constraint_pixel_types" id="Function2000207" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_pixel_types(rast raster)
 RETURNS text[]
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT array_agg(pixeltype)::text[] FROM st_bandmetadata($1, ARRAY[]::int[]); $function$
]]></string>
		</function>
		<function name="_st_3ddfullywithin" id="Function2000207" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$LWGEOM_dfullywithin3d$function$
]]></string>
		</function>
		<function name="_st_3ddwithin" id="Function2000207" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_3ddwithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$LWGEOM_dwithin3d$function$
]]></string>
		</function>
		<function name="_st_asgeojson" id="Function2000208" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_asgeojson(integer, geometry, integer, integer)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_asGeoJson$function$
CREATE OR REPLACE FUNCTION public._st_asgeojson(integer, geography, integer, integer)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_as_geojson$function$
]]></string>
		</function>
		<function name="_st_asgeojson_001" id="Function2000208" isSystem="false" />
		<function name="_st_asgml" id="Function2000208" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_asgml(integer, geometry, integer, integer, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$LWGEOM_asGML$function$
CREATE OR REPLACE FUNCTION public._st_asgml(integer, geography, integer, integer, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$geography_as_gml$function$
]]></string>
		</function>
		<function name="_st_asgml_001" id="Function2000208" isSystem="false" />
		<function name="_st_askml" id="Function2000208" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_askml(integer, geometry, integer, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$LWGEOM_asKML$function$
CREATE OR REPLACE FUNCTION public._st_askml(integer, geography, integer, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$geography_as_kml$function$
]]></string>
		</function>
		<function name="_st_askml_001" id="Function2000209" isSystem="false" />
		<function name="_st_aspect4ma" id="Function2000209" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_aspect4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
    DECLARE
        pwidth float;
        pheight float;
        dz_dx float;
        dz_dy float;
        aspect float;
    BEGIN
        pwidth := args[1]::float;
        pheight := args[2]::float;
        dz_dx := ((matrix[3][1] + 2.0 * matrix[3][2] + matrix[3][3]) - (matrix[1][1] + 2.0 * matrix[1][2] + matrix[1][3])) / (8.0 * pwidth);
        dz_dy := ((matrix[1][3] + 2.0 * matrix[2][3] + matrix[3][3]) - (matrix[1][1] + 2.0 * matrix[2][1] + matrix[3][1])) / (8.0 * pheight);
        IF abs(dz_dx) = 0::float AND abs(dz_dy) = 0::float THEN
            RETURN -1;
        END IF;
        aspect := atan2(dz_dy, -dz_dx);
        IF aspect > (pi() / 2.0) THEN
            RETURN (5.0 * pi() / 2.0) - aspect;
        ELSE
            RETURN (pi() / 2.0) - aspect;
        END IF;
    END;
    $function$
]]></string>
		</function>
		<function name="_st_asraster" id="Function2000209" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_asraster(geom geometry, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0, width integer DEFAULT 0, height integer DEFAULT 0, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE c
 STABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_asRaster$function$
]]></string>
		</function>
		<function name="_st_asx3d" id="Function2000209" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_asx3d(integer, geometry, integer, integer, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$LWGEOM_asX3D$function$
]]></string>
		</function>
		<function name="_st_bestsrid" id="Function2000210" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_bestsrid(geography)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_BestSRID($1,$1)$function$
CREATE OR REPLACE FUNCTION public._st_bestsrid(geography, geography)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_bestsrid$function$
]]></string>
		</function>
		<function name="_st_bestsrid_001" id="Function2000210" isSystem="false" />
		<function name="_st_buffer" id="Function2000210" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_buffer(geometry, double precision, cstring)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$buffer$function$
]]></string>
		</function>
		<function name="_st_concavehull" id="Function2000210" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_concavehull(param_inputgeom geometry)
 RETURNS geometry
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE     
	vexhull GEOMETRY;
	var_resultgeom geometry;
	var_inputgeom geometry;
	vexring GEOMETRY;
	cavering GEOMETRY;
	cavept geometry[];
	seglength double precision;
	var_tempgeom geometry;
	scale_factor integer := 1;
	i integer;
	
	BEGIN
		-- First compute the ConvexHull of the geometry
		vexhull := ST_ConvexHull(param_inputgeom);
		var_inputgeom := param_inputgeom;
		--A point really has no concave hull
		IF ST_GeometryType(vexhull) = 'ST_Point' OR ST_GeometryType(vexHull) = 'ST_LineString' THEN
			RETURN vexhull;
		END IF;
		-- convert the hull perimeter to a linestring so we can manipulate individual points
		vexring := CASE WHEN ST_GeometryType(vexhull) = 'ST_LineString' THEN vexhull ELSE ST_ExteriorRing(vexhull) END;
		IF abs(ST_X(ST_PointN(vexring,1))) < 1 THEN --scale the geometry to prevent stupid precision errors - not sure it works so make low for now
			scale_factor := 100;
			vexring := ST_Scale(vexring, scale_factor,scale_factor);
			var_inputgeom := ST_Scale(var_inputgeom, scale_factor, scale_factor);
			--RAISE NOTICE 'Scaling';
		END IF;
		seglength := ST_Length(vexring)/least(ST_NPoints(vexring)*2,1000) ;
		vexring := ST_Segmentize(vexring, seglength);
		-- find the point on the original geom that is closest to each point of the convex hull and make a new linestring out of it.
		cavering := ST_Collect(
			ARRAY(
				SELECT 
					ST_ClosestPoint(var_inputgeom, pt ) As the_geom
					FROM (
						SELECT  ST_PointN(vexring, n ) As pt, n
							FROM 
							generate_series(1, ST_NPoints(vexring) ) As n
						) As pt
				
				)
			)
		; 
		
		var_resultgeom := ST_MakeLine(geom) 
			FROM ST_Dump(cavering) As foo;
		IF ST_IsSimple(var_resultgeom) THEN
			var_resultgeom := ST_MakePolygon(var_resultgeom);
			--RAISE NOTICE 'is Simple: %', var_resultgeom;
		ELSE 
			--RAISE NOTICE 'is not Simple: %', var_resultgeom;
			var_resultgeom := ST_ConvexHull(var_resultgeom);
		END IF;
		
		IF scale_factor > 1 THEN -- scale the result back
			var_resultgeom := ST_Scale(var_resultgeom, 1/scale_factor, 1/scale_factor);
		END IF;
		RETURN var_resultgeom;
	
	END;
$function$
]]></string>
		</function>
		<function name="_st_contains" id="Function2000211" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_contains(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$contains$function$
]]></string>
		</function>
		<function name="_st_containsproperly" id="Function2000211" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_containsproperly(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$containsproperly$function$
]]></string>
		</function>
		<function name="_st_count" id="Function2000211" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_count(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1)
 RETURNS bigint
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		rtn bigint;
	BEGIN
		IF exclude_nodata_value IS FALSE THEN
			SELECT width * height INTO rtn FROM ST_Metadata(rast);
		ELSE
			SELECT count INTO rtn FROM _st_summarystats($1, $2, $3, $4);
		END IF;
		RETURN rtn;
	END;
	$function$
CREATE OR REPLACE FUNCTION public._st_count(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1)
 RETURNS bigint
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
	DECLARE
		curs refcursor;
		ctable text;
		ccolumn text;
		rast raster;
		stats summarystats;
		rtn bigint;
		tmp bigint;
	BEGIN
		-- nband
		IF nband < 1 THEN
			RAISE WARNING 'Invalid band index (must use 1-based). Returning NULL';
			RETURN NULL;
		END IF;
		-- sample percent
		IF sample_percent < 0 OR sample_percent > 1 THEN
			RAISE WARNING 'Invalid sample percentage (must be between 0 and 1). Returning NULL';
			RETURN NULL;
		END IF;
		-- exclude_nodata_value IS TRUE
		IF exclude_nodata_value IS TRUE THEN
			SELECT count INTO rtn FROM _st_summarystats($1, $2, $3, $4, $5);
			RETURN rtn;
		END IF;
		-- clean rastertable and rastercolumn
		ctable := quote_ident(rastertable);
		ccolumn := quote_ident(rastercolumn);
		BEGIN
			OPEN curs FOR EXECUTE 'SELECT '
					|| ccolumn
					|| ' FROM '
					|| ctable
					|| ' WHERE '
					|| ccolumn
					|| ' IS NOT NULL';
		EXCEPTION
			WHEN OTHERS THEN
				RAISE WARNING 'Invalid table or column name. Returning NULL';
				RETURN NULL;
		END;
		rtn := 0;
		LOOP
			FETCH curs INTO rast;
			EXIT WHEN NOT FOUND;
			SELECT (width * height) INTO tmp FROM ST_Metadata(rast);
			rtn := rtn + tmp;
		END LOOP;
		CLOSE curs;
		RETURN rtn;
	END;
	$function$
]]></string>
		</function>
		<function name="_st_count_001" id="Function2000212" isSystem="false" />
		<function name="_st_coveredby" id="Function2000212" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_coveredby(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$coveredby$function$
]]></string>
		</function>
		<function name="_st_covers" id="Function2000212" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_covers(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$covers$function$
CREATE OR REPLACE FUNCTION public._st_covers(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$geography_covers$function$
]]></string>
		</function>
		<function name="_st_covers_001" id="Function2000212" isSystem="false" />
		<function name="_st_crosses" id="Function2000213" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_crosses(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$crosses$function$
]]></string>
		</function>
		<function name="_st_dfullywithin" id="Function2000213" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_dfullywithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_dfullywithin$function$
]]></string>
		</function>
		<function name="_st_distance" id="Function2000213" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_distance(geography, geography, double precision, boolean)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$geography_distance$function$
]]></string>
		</function>
		<function name="_st_dumppoints" id="Function2000213" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_dumppoints(the_geom geometry, cur_path integer[])
 RETURNS SETOF geometry_dump
 LANGUAGE plpgsql
AS $function$
DECLARE
  tmp geometry_dump;
  tmp2 geometry_dump;
  nb_points integer;
  nb_geom integer;
  i integer;
  j integer;
  g geometry;
  
BEGIN
  
  -- RAISE DEBUG '%,%', cur_path, ST_GeometryType(the_geom);
  -- Special case collections : iterate and return the DumpPoints of the geometries
  IF (ST_IsCollection(the_geom)) THEN
 
    i = 1;
    FOR tmp2 IN SELECT (ST_Dump(the_geom)).* LOOP
      FOR tmp IN SELECT * FROM _ST_DumpPoints(tmp2.geom, cur_path || tmp2.path) LOOP
	    RETURN NEXT tmp;
      END LOOP;
      i = i + 1;
      
    END LOOP;
    RETURN;
  END IF;
  
  -- Special case (POLYGON) : return the points of the rings of a polygon
  IF (ST_GeometryType(the_geom) = 'ST_Polygon') THEN
    FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_ExteriorRing(the_geom), cur_path || ARRAY[1]) LOOP
      RETURN NEXT tmp;
    END LOOP;
    
    j := ST_NumInteriorRings(the_geom);
    FOR i IN 1..j LOOP
        FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_InteriorRingN(the_geom, i), cur_path || ARRAY[i+1]) LOOP
          RETURN NEXT tmp;
        END LOOP;
    END LOOP;
    
    RETURN;
  END IF;
  -- Special case (TRIANGLE) : return the points of the external rings of a TRIANGLE
  IF (ST_GeometryType(the_geom) = 'ST_Triangle') THEN
    FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_ExteriorRing(the_geom), cur_path || ARRAY[1]) LOOP
      RETURN NEXT tmp;
    END LOOP;
    
    RETURN;
  END IF;
    
  -- Special case (POINT) : return the point
  IF (ST_GeometryType(the_geom) = 'ST_Point') THEN
    tmp.path = cur_path || ARRAY[1];
    tmp.geom = the_geom;
    RETURN NEXT tmp;
    RETURN;
  END IF;

  -- Use ST_NumPoints rather than ST_NPoints to have a NULL value if the_geom isn't
  -- a LINESTRING, CIRCULARSTRING.
  SELECT ST_NumPoints(the_geom) INTO nb_points;
  -- This should never happen
  IF (nb_points IS NULL) THEN
    RAISE EXCEPTION 'Unexpected error while dumping geometry %', ST_AsText(the_geom);
  END IF;
  FOR i IN 1..nb_points LOOP
    tmp.path = cur_path || ARRAY[i];
    tmp.geom := ST_PointN(the_geom, i);
    RETURN NEXT tmp;
  END LOOP;
   
END
$function$
]]></string>
		</function>
		<function name="_st_dwithin" id="Function2000214" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_dwithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$LWGEOM_dwithin$function$
CREATE OR REPLACE FUNCTION public._st_dwithin(geography, geography, double precision, boolean)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$geography_dwithin$function$
]]></string>
		</function>
		<function name="_st_dwithin_001" id="Function2000214" isSystem="false" />
		<function name="_st_equals" id="Function2000214" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_equals(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$ST_Equals$function$
]]></string>
		</function>
		<function name="_st_expand" id="Function2000215" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_expand(geography, double precision)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_expand$function$
]]></string>
		</function>
		<function name="_st_geomfromgml" id="Function2000215" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_geomfromgml(text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$geom_from_gml$function$
]]></string>
		</function>
		<function name="_st_hillshade4ma" id="Function2000215" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_hillshade4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
    DECLARE
        pwidth float;
        pheight float;
        dz_dx float;
        dz_dy float;
        zenith float;
        azimuth float;
        slope float;
        aspect float;
        max_bright float;
        elevation_scale float;
    BEGIN
        pwidth := args[1]::float;
        pheight := args[2]::float;
        azimuth := (5.0 * pi() / 2.0) - args[3]::float;
        zenith := (pi() / 2.0) - args[4]::float;
        dz_dx := ((matrix[3][1] + 2.0 * matrix[3][2] + matrix[3][3]) - (matrix[1][1] + 2.0 * matrix[1][2] + matrix[1][3])) / (8.0 * pwidth);
        dz_dy := ((matrix[1][3] + 2.0 * matrix[2][3] + matrix[3][3]) - (matrix[1][1] + 2.0 * matrix[2][1] + matrix[3][1])) / (8.0 * pheight);
        elevation_scale := args[6]::float;
        slope := atan(sqrt(elevation_scale * pow(dz_dx, 2.0) + pow(dz_dy, 2.0)));
        IF dz_dx != 0. THEN
            aspect := atan2(dz_dy, -dz_dx);
						IF aspect < 0 THEN
							aspect := aspect + (2.0 * pi());
						END IF;
				ELSE
					IF dz_dy > 0.THEN
						aspect := pi() / 2.;
					ELSEIF dz_dy < 0.THEN
						aspect := (2 * pi()) - (pi() / 2.);
					-- set to pi as that is the expected PostgreSQL answer in Linux
					ELSE
            aspect := pi();
        	END IF;
        END IF;
        max_bright := args[5]::float;
        RETURN max_bright * ( (cos(zenith)*cos(slope)) + (sin(zenith)*sin(slope)*cos(azimuth - aspect)) );
    END;
    $function$
]]></string>
		</function>
		<function name="_st_histogram" id="Function2000216" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_histogram(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false)
 RETURNS SETOF histogram
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_histogramCoverage$function$
CREATE OR REPLACE FUNCTION public._st_histogram(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, min double precision DEFAULT NULL::double precision, max double precision DEFAULT NULL::double precision)
 RETURNS SETOF histogram
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_histogram$function$
]]></string>
		</function>
		<function name="_st_histogram_001" id="Function2000216" isSystem="false" />
		<function name="_st_intersects" id="Function2000216" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_intersects(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$intersects$function$
CREATE OR REPLACE FUNCTION public._st_intersects(geom geometry, rast raster, nband integer DEFAULT NULL::integer)
 RETURNS boolean
 LANGUAGE plpgsql
 IMMUTABLE COST 1000
AS $function$
	DECLARE
		hasnodata boolean := TRUE;
		nodata float8 := 0.0;
		convexhull geometry;
		geomintersect geometry;
		x1w double precision := 0.0;
		x2w double precision := 0.0;
		y1w double precision := 0.0;
		y2w double precision := 0.0;
		x1 integer := 0;
		x2 integer := 0;
		x3 integer := 0;
		x4 integer := 0;
		y1 integer := 0;
		y2 integer := 0;
		y3 integer := 0;
		y4 integer := 0;
		x integer := 0;
		y integer := 0;
		xinc integer := 0;
		yinc integer := 0;
		pixelval double precision;
		bintersect boolean := FALSE;
		gtype text;
		scale float8;
		w int;
		h int;
	BEGIN
		IF ST_SRID(rast) != ST_SRID(geom) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		convexhull := ST_ConvexHull(rast);
		IF nband IS NOT NULL THEN
			SELECT CASE WHEN bmd.nodatavalue IS NULL THEN FALSE ELSE NULL END INTO hasnodata FROM ST_BandMetaData(rast, nband) AS bmd;
		END IF;
		IF ST_Intersects(geom, convexhull) IS NOT TRUE THEN
			RETURN FALSE;
		ELSEIF nband IS NULL OR hasnodata IS FALSE THEN
			RETURN TRUE;
		END IF;
		-- Get the intersection between with the geometry.
		-- We will search for withvalue pixel only in this area.
		geomintersect := st_intersection(geom, convexhull);
--RAISE NOTICE 'geomintersect=%', st_astext(geomintersect);
		-- If the intersection is empty, return false
		IF st_isempty(geomintersect) THEN
			RETURN FALSE;
		END IF;
		-- We create a minimalistic buffer around the intersection in order to scan every pixels
		-- that would touch the edge or intersect with the geometry
		SELECT sqrt(scalex * scalex + skewy * skewy), width, height INTO scale, w, h FROM ST_Metadata(rast);
		IF scale != 0 THEN
			geomintersect := st_buffer(geomintersect, scale / 1000000);
		END IF;
--RAISE NOTICE 'geomintersect2=%', st_astext(geomintersect);
		-- Find the world coordinates of the bounding box of the intersecting area
		x1w := st_xmin(geomintersect);
		y1w := st_ymin(geomintersect);
		x2w := st_xmax(geomintersect);
		y2w := st_ymax(geomintersect);
		nodata := st_bandnodatavalue(rast, nband);
--RAISE NOTICE 'x1w=%, y1w=%, x2w=%, y2w=%', x1w, y1w, x2w, y2w;
		-- Convert world coordinates to raster coordinates
		x1 := st_world2rastercoordx(rast, x1w, y1w);
		y1 := st_world2rastercoordy(rast, x1w, y1w);
		x2 := st_world2rastercoordx(rast, x2w, y1w);
		y2 := st_world2rastercoordy(rast, x2w, y1w);
		x3 := st_world2rastercoordx(rast, x1w, y2w);
		y3 := st_world2rastercoordy(rast, x1w, y2w);
		x4 := st_world2rastercoordx(rast, x2w, y2w);
		y4 := st_world2rastercoordy(rast, x2w, y2w);
--RAISE NOTICE 'x1=%, y1=%, x2=%, y2=%, x3=%, y3=%, x4=%, y4=%', x1, y1, x2, y2, x3, y3, x4, y4;
		-- Order the raster coordinates for the upcoming FOR loop.
		x1 := int4smaller(int4smaller(int4smaller(x1, x2), x3), x4);
		y1 := int4smaller(int4smaller(int4smaller(y1, y2), y3), y4);
		x2 := int4larger(int4larger(int4larger(x1, x2), x3), x4);
		y2 := int4larger(int4larger(int4larger(y1, y2), y3), y4);
		-- Make sure the range is not lower than 1.
		-- This can happen when world coordinate are exactly on the left border
		-- of the raster and that they do not span on more than one pixel.
		x1 := int4smaller(int4larger(x1, 1), w);
		y1 := int4smaller(int4larger(y1, 1), h);
		-- Also make sure the range does not exceed the width and height of the raster.
		-- This can happen when world coordinate are exactly on the lower right border
		-- of the raster.
		x2 := int4smaller(x2, w);
		y2 := int4smaller(y2, h);
--RAISE NOTICE 'x1=%, y1=%, x2=%, y2=%', x1, y1, x2, y2;
		-- Search exhaustively for withvalue pixel on a moving 3x3 grid
		-- (very often more efficient than searching on a mere 1x1 grid)
		FOR xinc in 0..2 LOOP
			FOR yinc in 0..2 LOOP
				FOR x IN x1+xinc..x2 BY 3 LOOP
					FOR y IN y1+yinc..y2 BY 3 LOOP
						-- Check first if the pixel intersects with the geometry. Often many won't.
						bintersect := NOT st_isempty(st_intersection(st_pixelaspolygon(rast, x, y), geom));
						IF bintersect THEN
							-- If the pixel really intersects, check its value. Return TRUE if with value.
							pixelval := st_value(rast, nband, x, y);
							IF pixelval != nodata THEN
								RETURN TRUE;
							END IF;
						END IF;
					END LOOP;
				END LOOP;
			END LOOP;
		END LOOP;
		RETURN FALSE;
	END;
	$function$
CREATE OR REPLACE FUNCTION public._st_intersects(rast raster, geom geometry, nband integer DEFAULT NULL::integer)
 RETURNS boolean
 LANGUAGE plpgsql
 IMMUTABLE COST 1000
AS $function$
	DECLARE
		gr raster;
		scale double precision;
	BEGIN
		IF ST_SRID(rast) != ST_SRID(geom) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		IF ST_Intersects(geom, ST_ConvexHull(rast)) IS NOT TRUE THEN
			RETURN FALSE;
		ELSEIF nband IS NULL THEN
			RETURN TRUE;
		END IF;
		-- scale is set to 1/100th of raster for granularity
		SELECT least(scalex, scaley) / 100. INTO scale FROM ST_Metadata(rast);
		gr := _st_asraster(geom, scale, scale);
		IF gr IS NULL THEN
			RAISE EXCEPTION 'Unable to convert geometry to a raster';
			RETURN FALSE;
		END IF;
		RETURN ST_Intersects(rast, nband, gr, 1);
	END;
	$function$
CREATE OR REPLACE FUNCTION public._st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 1000
AS '$libdir/rtpostgis-2.0', $function$RASTER_intersects$function$
]]></string>
		</function>
		<function name="_st_intersects_001" id="Function2000217" isSystem="false" />
		<function name="_st_intersects_002" id="Function2000218" isSystem="false" />
		<function name="_st_intersects_003" id="Function2000218" isSystem="false" />
		<function name="_st_linecrossingdirection" id="Function2000218" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_linecrossingdirection(geom1 geometry, geom2 geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$ST_LineCrossingDirection$function$
]]></string>
		</function>
		<function name="_st_longestline" id="Function2000218" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_longestline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_longestline2d$function$
]]></string>
		</function>
		<function name="_st_mapalgebra4unionfinal1" id="Function2000218" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_mapalgebra4unionfinal1(rast raster)
 RETURNS raster
 LANGUAGE plpgsql
AS $function$
    DECLARE
    BEGIN
    	-- NOTE: I have to sacrifice RANGE.  Sorry RANGE.  Any 2 banded raster is going to be treated
    	-- as a MEAN
        IF ST_NumBands(rast) = 2 THEN
            RETURN ST_MapAlgebraExpr(rast, 1, rast, 2, 'CASE WHEN [rast2.val] > 0 THEN [rast1.val] / [rast2.val]::float8 ELSE NULL END'::text, NULL::text, 'UNION'::text, NULL::text, NULL::text, NULL::double precision);
        ELSE
            RETURN rast;
        END IF;
    END;
    $function$
]]></string>
		</function>
		<function name="_st_mapalgebra4unionstate" id="Function2000219" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_mapalgebra4unionstate(rast1 raster, rast2 raster)
 RETURNS raster
 LANGUAGE sql
AS $function$
        SELECT _ST_MapAlgebra4UnionState($1,$2, 'LAST', NULL, NULL, NULL, NULL, NULL, NULL, NULL)
    $function$
CREATE OR REPLACE FUNCTION public._st_mapalgebra4unionstate(rast1 raster, rast2 raster, bandnum integer)
 RETURNS raster
 LANGUAGE sql
AS $function$
        SELECT _ST_MapAlgebra4UnionState($1,ST_Band($2,$3), 'LAST', NULL, NULL, NULL, NULL, NULL, NULL, NULL)
    $function$
CREATE OR REPLACE FUNCTION public._st_mapalgebra4unionstate(rast1 raster, rast2 raster, p_expression text)
 RETURNS raster
 LANGUAGE sql
AS $function$
        SELECT _ST_MapAlgebra4UnionState($1,$2, $3, NULL, NULL, NULL, NULL, NULL, NULL, NULL)
    $function$
CREATE OR REPLACE FUNCTION public._st_mapalgebra4unionstate(rast1 raster, rast2 raster, bandnum integer, p_expression text)
 RETURNS raster
 LANGUAGE sql
AS $function$
        SELECT _ST_MapAlgebra4UnionState($1, ST_Band($2,$3), $4, NULL, NULL, NULL, NULL, NULL, NULL, NULL)
    $function$
CREATE OR REPLACE FUNCTION public._st_mapalgebra4unionstate(rast1 raster, rast2 raster, p_expression text, p_nodata1expr text, p_nodata2expr text, p_nodatanodataval double precision, t_expression text, t_nodata1expr text, t_nodata2expr text, t_nodatanodataval double precision)
 RETURNS raster
 LANGUAGE plpgsql
AS $function$
    DECLARE
        t_raster raster;
        p_raster raster;
    BEGIN
        -- With the new ST_MapAlgebraExpr we must split the main expression in three expressions: expression, nodata1expr, nodata2expr and a nodatanodataval
        -- ST_MapAlgebraExpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extentexpr text, nodata1expr text, nodata2expr text, nodatanodatadaval double precision)
        -- We must make sure that when NULL is passed as the first raster to ST_MapAlgebraExpr, ST_MapAlgebraExpr resolve the nodata1expr
        -- Note: rast2 is always a single band raster since it is the accumulated raster thus far
        -- 		There we always set that to band 1 regardless of what band num is requested
        IF upper(p_expression) = 'LAST' THEN
            --RAISE NOTICE 'last asked for ';
            RETURN ST_MapAlgebraExpr(rast1, 1, rast2, 1, '[rast2.val]'::text, NULL::text, 'UNION'::text, '[rast2.val]'::text, '[rast1.val]'::text, NULL::double precision);
        ELSIF upper(p_expression) = 'FIRST' THEN
            RETURN ST_MapAlgebraExpr(rast1, 1, rast2, 1, '[rast1.val]'::text, NULL::text, 'UNION'::text, '[rast2.val]'::text, '[rast1.val]'::text, NULL::double precision);
        ELSIF upper(p_expression) = 'MIN' THEN
            RETURN ST_MapAlgebraExpr(rast1, 1, rast2, 1, 'LEAST([rast1.val], [rast2.val])'::text, NULL::text, 'UNION'::text, '[rast2.val]'::text, '[rast1.val]'::text, NULL::double precision);
        ELSIF upper(p_expression) = 'MAX' THEN
            RETURN ST_MapAlgebraExpr(rast1, 1, rast2, 1, 'GREATEST([rast1.val], [rast2.val])'::text, NULL::text, 'UNION'::text, '[rast2.val]'::text, '[rast1.val]'::text, NULL::double precision);
        ELSIF upper(p_expression) = 'COUNT' THEN
            RETURN ST_MapAlgebraExpr(rast1, 1, rast2, 1, '[rast1.val] + 1'::text, NULL::text, 'UNION'::text, '1'::text, '[rast1.val]'::text, 0::double precision);
        ELSIF upper(p_expression) = 'SUM' THEN
            RETURN ST_MapAlgebraExpr(rast1, 1, rast2, 1, '[rast1.val] + [rast2.val]'::text, NULL::text, 'UNION'::text, '[rast2.val]'::text, '[rast1.val]'::text, NULL::double precision);
        ELSIF upper(p_expression) = 'RANGE' THEN
        -- have no idea what this is 
            t_raster = ST_MapAlgebraExpr(rast1, 2, rast2, 1, 'LEAST([rast1.val], [rast2.val])'::text, NULL::text, 'UNION'::text, '[rast2.val]'::text, '[rast1.val]'::text, NULL::double precision);
            p_raster := _ST_MapAlgebra4UnionState(rast1, rast2, 'MAX'::text, NULL::text, NULL::text, NULL::double precision, NULL::text, NULL::text, NULL::text, NULL::double precision);
            RETURN ST_AddBand(p_raster, t_raster, 1, 2);
        ELSIF upper(p_expression) = 'MEAN' THEN
        -- looks like t_raster is used to keep track of accumulated count
        -- and p_raster is there to keep track of accumulated sum and final state function
        -- would then do a final map to divide them.  This one is currently broken because 
        	-- have not reworked it so it can do without a final function
            t_raster = ST_MapAlgebraExpr(rast1, 2, rast2, 1, '[rast1.val] + 1'::text, NULL::text, 'UNION'::text, '1'::text, '[rast1.val]'::text, 0::double precision);
            p_raster := _ST_MapAlgebra4UnionState(rast1, rast2, 'SUM'::text, NULL::text, NULL::text, NULL::double precision, NULL::text, NULL::text, NULL::text, NULL::double precision);
            RETURN ST_AddBand(p_raster, t_raster, 1, 2);
        ELSE
            IF t_expression NOTNULL AND t_expression != '' THEN
                t_raster = ST_MapAlgebraExpr(rast1, 2, rast2, 1, t_expression, NULL::text, 'UNION'::text, t_nodata1expr, t_nodata2expr, t_nodatanodataval::double precision);
                p_raster = ST_MapAlgebraExpr(rast1, 1, rast2, 1, p_expression, NULL::text, 'UNION'::text, p_nodata1expr, p_nodata2expr, p_nodatanodataval::double precision);
                RETURN ST_AddBand(p_raster, t_raster, 1, 2);
            END IF;
            RETURN ST_MapAlgebraExpr(rast1, 1, rast2, 1, p_expression, NULL, 'UNION'::text, NULL::text, NULL::text, NULL::double precision);
        END IF;
    END;
    $function$
]]></string>
		</function>
		<function name="_st_mapalgebra4unionstate_001" id="Function2000220" isSystem="false" />
		<function name="_st_mapalgebra4unionstate_002" id="Function2000221" isSystem="false" />
		<function name="_st_mapalgebra4unionstate_003" id="Function2000221" isSystem="false" />
		<function name="_st_mapalgebra4unionstate_004" id="Function2000221" isSystem="false" />
		<function name="_st_maxdistance" id="Function2000221" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_maxdistance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_maxdistance2d_linestring$function$
]]></string>
		</function>
		<function name="_st_orderingequals" id="Function2000222" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_orderingequals(geometrya geometry, geometryb geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$LWGEOM_same$function$
]]></string>
		</function>
		<function name="_st_overlaps" id="Function2000222" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_overlaps(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$overlaps$function$
]]></string>
		</function>
		<function name="_st_pointoutside" id="Function2000222" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_pointoutside(geography)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_point_outside$function$
]]></string>
		</function>
		<function name="_st_quantile" id="Function2000223" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_quantile(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1, quantiles double precision[] DEFAULT NULL::double precision[])
 RETURNS SETOF quantile
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_quantile$function$
CREATE OR REPLACE FUNCTION public._st_quantile(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1, quantiles double precision[] DEFAULT NULL::double precision[])
 RETURNS SETOF quantile
 LANGUAGE c
 STABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_quantileCoverage$function$
]]></string>
		</function>
		<function name="_st_quantile_001" id="Function2000223" isSystem="false" />
		<function name="_st_raster2worldcoord" id="Function2000223" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_raster2worldcoord(rast raster, columnx integer DEFAULT NULL::integer, rowy integer DEFAULT NULL::integer, OUT longitude double precision, OUT latitude double precision)
 RETURNS record
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_rasterToWorldCoord$function$
]]></string>
		</function>
		<function name="_st_reclass" id="Function2000223" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_reclass(rast raster, VARIADIC reclassargset reclassarg[])
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_reclass$function$
]]></string>
		</function>
		<function name="_st_resample" id="Function2000224" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_resample(rast raster, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, srid integer DEFAULT NULL::integer, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, width integer DEFAULT NULL::integer, height integer DEFAULT NULL::integer)
 RETURNS raster
 LANGUAGE c
 STABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_resample$function$
]]></string>
		</function>
		<function name="_st_slope4ma" id="Function2000224" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_slope4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
    DECLARE
        pwidth float;
        pheight float;
        dz_dx float;
        dz_dy float;
    BEGIN
        pwidth := args[1]::float;
        pheight := args[2]::float;
        dz_dx := ((matrix[3][1] + 2.0 * matrix[3][2] + matrix[3][3]) - (matrix[1][1] + 2.0 * matrix[1][2] + matrix[1][3])) / (8.0 * pwidth);
        dz_dy := ((matrix[1][3] + 2.0 * matrix[2][3] + matrix[3][3]) - (matrix[1][1] + 2.0 * matrix[2][1] + matrix[3][1])) / (8.0 * pheight);
        RETURN atan(sqrt(pow(dz_dx, 2.0) + pow(dz_dy, 2.0)));
    END;
    $function$
]]></string>
		</function>
		<function name="_st_summarystats" id="Function2000224" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_summarystats(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1)
 RETURNS summarystats
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_summaryStats$function$
CREATE OR REPLACE FUNCTION public._st_summarystats(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1)
 RETURNS summarystats
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_summaryStatsCoverage$function$
]]></string>
		</function>
		<function name="_st_summarystats_001" id="Function2000225" isSystem="false" />
		<function name="_st_touches" id="Function2000225" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_touches(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$touches$function$
]]></string>
		</function>
		<function name="_st_valuecount" id="Function2000225" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_valuecount(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0)
 RETURNS SETOF valuecount
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_valueCount$function$
CREATE OR REPLACE FUNCTION public._st_valuecount(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0)
 RETURNS SETOF valuecount
 LANGUAGE c
 STABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_valueCountCoverage$function$
]]></string>
		</function>
		<function name="_st_valuecount_001" id="Function2000226" isSystem="false" />
		<function name="_st_within" id="Function2000226" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_within(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT _ST_Contains($2,$1)$function$
]]></string>
		</function>
		<function name="_st_world2rastercoord" id="Function2000226" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_world2rastercoord(rast raster, longitude double precision DEFAULT NULL::double precision, latitude double precision DEFAULT NULL::double precision, OUT columnx integer, OUT rowy integer)
 RETURNS record
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_worldToRasterCoord$function$
]]></string>
		</function>
		<function name="addauth" id="Function2000227" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addauth(text)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	lockid alias for $1;
	okay boolean;
	myrec record;
BEGIN
	-- check to see if table exists
	--  if not, CREATE TEMP TABLE mylock (transid xid, lockcode text)
	okay := 'f';
	FOR myrec IN SELECT * FROM pg_class WHERE relname = 'temp_lock_have_table' LOOP
		okay := 't';
	END LOOP; 
	IF (okay <> 't') THEN 
		CREATE TEMP TABLE temp_lock_have_table (transid xid, lockcode text);
			-- this will only work from pgsql7.4 up
			-- ON COMMIT DELETE ROWS;
	END IF;
	--  INSERT INTO mylock VALUES ( $1)
--	EXECUTE 'INSERT INTO temp_lock_have_table VALUES ( '||
--		quote_literal(getTransactionID()) || ',' ||
--		quote_literal(lockid) ||')';
	INSERT INTO temp_lock_have_table VALUES (getTransactionID(), lockid);
	RETURN true::boolean;
END;
$function$
]]></string>
			<comment><![CDATA[args: auth_token - Add an authorization token to be used in current transaction.]]></comment>
		</function>
		<function name="addgeometrycolumn" id="Function2000227" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('','',$1,$2,$3,$4,$5, $6) into ret;
	RETURN ret;
END;
$function$
CREATE OR REPLACE FUNCTION public.addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)
 RETURNS text
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('',$1,$2,$3,$4,$5,$6,$7) into ret;
	RETURN ret;
END;
$function$
CREATE OR REPLACE FUNCTION public.addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	rec RECORD;
	sr varchar;
	real_schema name;
	sql text;
	new_srid integer;
BEGIN
	-- Verify geometry type
	IF (postgis_type_name(new_type,new_dim) IS NULL )
	THEN
		RAISE EXCEPTION 'Invalid type name "%(%)" - valid ones are:
	POINT, MULTIPOINT,
	LINESTRING, MULTILINESTRING,
	POLYGON, MULTIPOLYGON,
	CIRCULARSTRING, COMPOUNDCURVE, MULTICURVE,
	CURVEPOLYGON, MULTISURFACE,
	GEOMETRY, GEOMETRYCOLLECTION,
	POINTM, MULTIPOINTM,
	LINESTRINGM, MULTILINESTRINGM,
	POLYGONM, MULTIPOLYGONM,
	CIRCULARSTRINGM, COMPOUNDCURVEM, MULTICURVEM
	CURVEPOLYGONM, MULTISURFACEM, TRIANGLE, TRIANGLEM,
	POLYHEDRALSURFACE, POLYHEDRALSURFACEM, TIN, TINM
	or GEOMETRYCOLLECTIONM', new_type, new_dim;
		RETURN 'fail';
	END IF;

	-- Verify dimension
	IF ( (new_dim >4) OR (new_dim <2) ) THEN
		RAISE EXCEPTION 'invalid dimension';
		RETURN 'fail';
	END IF;
	IF ( (new_type LIKE '%M') AND (new_dim!=3) ) THEN
		RAISE EXCEPTION 'TypeM needs 3 dimensions';
		RETURN 'fail';
	END IF;

	-- Verify SRID
	IF ( new_srid_in > 0 ) THEN
		IF new_srid_in > 998999 THEN
			RAISE EXCEPTION 'AddGeometryColumn() - SRID must be <= %', 998999;
		END IF;
		new_srid := new_srid_in;
		SELECT SRID INTO sr FROM spatial_ref_sys WHERE SRID = new_srid;
		IF NOT FOUND THEN
			RAISE EXCEPTION 'AddGeometryColumn() - invalid SRID';
			RETURN 'fail';
		END IF;
	ELSE
		new_srid := ST_SRID('POINT EMPTY'::geometry);
		IF ( new_srid_in != new_srid ) THEN
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;

	-- Verify schema
	IF ( schema_name IS NOT NULL AND schema_name != '' ) THEN
		sql := 'SELECT nspname FROM pg_namespace ' ||
			'WHERE text(nspname) = ' || quote_literal(schema_name) ||
			'LIMIT 1';
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;
		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Schema % is not a valid schemaname', quote_literal(schema_name);
			RETURN 'fail';
		END IF;
	END IF;
	IF ( real_schema IS NULL ) THEN
		RAISE DEBUG 'Detecting schema';
		sql := 'SELECT n.nspname AS schemaname ' ||
			'FROM pg_catalog.pg_class c ' ||
			  'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace ' ||
			'WHERE c.relkind = ' || quote_literal('r') ||
			' AND n.nspname NOT IN (' || quote_literal('pg_catalog') || ', ' || quote_literal('pg_toast') || ')' ||
			' AND pg_catalog.pg_table_is_visible(c.oid)' ||
			' AND c.relname = ' || quote_literal(table_name);
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;
		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Table % does not occur in the search_path', quote_literal(table_name);
			RETURN 'fail';
		END IF;
	END IF;

	-- Add geometry column to table
	IF use_typmod THEN
	     sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD COLUMN ' || quote_ident(column_name) ||
            ' geometry(' || postgis_type_name(new_type, new_dim) || ', ' || new_srid::text || ')';
        RAISE DEBUG '%', sql;
	ELSE
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD COLUMN ' || quote_ident(column_name) ||
            ' geometry ';
        RAISE DEBUG '%', sql;
    END IF;
	EXECUTE sql;
	IF NOT use_typmod THEN
        -- Add table CHECKs
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD CONSTRAINT '
            || quote_ident('enforce_srid_' || column_name)
            || ' CHECK (st_srid(' || quote_ident(column_name) ||
            ') = ' || new_srid::text || ')' ;
        RAISE DEBUG '%', sql;
        EXECUTE sql;
    
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD CONSTRAINT '
            || quote_ident('enforce_dims_' || column_name)
            || ' CHECK (st_ndims(' || quote_ident(column_name) ||
            ') = ' || new_dim::text || ')' ;
        RAISE DEBUG '%', sql;
        EXECUTE sql;
    
        IF ( NOT (new_type = 'GEOMETRY')) THEN
            sql := 'ALTER TABLE ' ||
                quote_ident(real_schema) || '.' || quote_ident(table_name) || ' ADD CONSTRAINT ' ||
                quote_ident('enforce_geotype_' || column_name) ||
                ' CHECK (GeometryType(' ||
                quote_ident(column_name) || ')=' ||
                quote_literal(new_type) || ' OR (' ||
                quote_ident(column_name) || ') is null)';
            RAISE DEBUG '%', sql;
            EXECUTE sql;
        END IF;
    END IF;
	RETURN
		real_schema || '.' ||
		table_name || '.' || column_name ||
		' SRID:' || new_srid::text ||
		' TYPE:' || new_type ||
		' DIMS:' || new_dim::text || ' ';
END;
$function$
]]></string>
			<comment><![CDATA[args: catalog_name, schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior]]></comment>
		</function>
		<function name="addgeometrycolumn_001" id="Function2000229" isSystem="false" >
			<comment><![CDATA[args: schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior]]></comment>
		</function>
		<function name="addgeometrycolumn_002" id="Function2000229" isSystem="false" >
			<comment><![CDATA[args: table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior]]></comment>
		</function>
		<function name="addoverviewconstraints" id="Function2000229" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT AddOverviewConstraints('', $1, $2, '', $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		x int;
		s name;
		t name;
		oschema name;
		rschema name;
		sql text;
		rtn boolean;
	BEGIN
		FOR x IN 1..2 LOOP
			s := '';
			IF x = 1 THEN
				s := $1;
				t := $2;
			ELSE
				s := $4;
				t := $5;
			END IF;
			-- validate user-provided schema
			IF length(s) > 0 THEN
				sql := 'SELECT nspname FROM pg_namespace '
					|| 'WHERE nspname = ' || quote_literal(s)
					|| 'LIMIT 1';
				EXECUTE sql INTO s;
				IF s IS NULL THEN
					RAISE EXCEPTION 'The value % is not a valid schema', quote_literal(s);
					RETURN FALSE;
				END IF;
			END IF;
			-- no schema, determine what it could be using the table
			IF length(s) < 1 THEN
				sql := 'SELECT n.nspname AS schemaname '
					|| 'FROM pg_catalog.pg_class c '
					|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
					|| 'WHERE c.relkind = ' || quote_literal('r')
					|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
					|| ', ' || quote_literal('pg_toast')
					|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
					|| ' AND c.relname = ' || quote_literal(t);
				EXECUTE sql INTO s;
				IF s IS NULL THEN
					RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal(t);
					RETURN FALSE;
				END IF;
			END IF;
			IF x = 1 THEN
				oschema := s;
			ELSE
				rschema := s;
			END IF;
		END LOOP;
		-- reference raster
		rtn := _add_overview_constraint(oschema, $2, $3, rschema, $5, $6, $7);
		IF rtn IS FALSE THEN
			RAISE EXCEPTION 'Unable to add the overview constraint.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;
		RETURN TRUE;
	END;
	$function$
]]></string>
		</function>
		<function name="addoverviewconstraints_001" id="Function2000230" isSystem="false" />
		<function name="addrasterconstraints" id="Function2000230" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[])
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT AddRasterConstraints('', $1, $2, VARIADIC $3) $function$
CREATE OR REPLACE FUNCTION public.addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[])
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		max int;
		cnt int;
		sql text;
		schema name;
		x int;
		kw text;
		rtn boolean;
	BEGIN
		cnt := 0;
		max := array_length(constraints, 1);
		IF max < 1 THEN
			RAISE NOTICE 'No constraints indicated to be added.  Doing nothing';
			RETURN TRUE;
		END IF;
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;
		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;
		<<kwloop>>
		FOR x in 1..max LOOP
			kw := trim(both from lower(constraints[x]));
			BEGIN
				CASE
					WHEN kw = 'srid' THEN
						RAISE NOTICE 'Adding SRID constraint';
						rtn := _add_raster_constraint_srid(schema, $2, $3);
					WHEN kw IN ('scale_x', 'scalex') THEN
						RAISE NOTICE 'Adding scale-X constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'x');
					WHEN kw IN ('scale_y', 'scaley') THEN
						RAISE NOTICE 'Adding scale-Y constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw = 'scale' THEN
						RAISE NOTICE 'Adding scale-X constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'x');
						RAISE NOTICE 'Adding scale-Y constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw IN ('blocksize_x', 'blocksizex', 'width') THEN
						RAISE NOTICE 'Adding blocksize-X constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'width');
					WHEN kw IN ('blocksize_y', 'blocksizey', 'height') THEN
						RAISE NOTICE 'Adding blocksize-Y constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw = 'blocksize' THEN
						RAISE NOTICE 'Adding blocksize-X constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'width');
						RAISE NOTICE 'Adding blocksize-Y constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw IN ('same_alignment', 'samealignment', 'alignment') THEN
						RAISE NOTICE 'Adding alignment constraint';
						rtn := _add_raster_constraint_alignment(schema, $2, $3);
					WHEN kw IN ('regular_blocking', 'regularblocking') THEN
						RAISE NOTICE 'Adding regular blocking constraint';
						rtn := _add_raster_constraint_regular_blocking(schema, $2, $3);
					WHEN kw IN ('num_bands', 'numbands') THEN
						RAISE NOTICE 'Adding number of bands constraint';
						rtn := _add_raster_constraint_num_bands(schema, $2, $3);
					WHEN kw IN ('pixel_types', 'pixeltypes') THEN
						RAISE NOTICE 'Adding pixel type constraint';
						rtn := _add_raster_constraint_pixel_types(schema, $2, $3);
					WHEN kw IN ('nodata_values', 'nodatavalues', 'nodata') THEN
						RAISE NOTICE 'Adding nodata value constraint';
						rtn := _add_raster_constraint_nodata_values(schema, $2, $3);
					WHEN kw IN ('out_db', 'outdb') THEN
						RAISE NOTICE 'Adding out-of-database constraint';
						rtn := _add_raster_constraint_out_db(schema, $2, $3);
					WHEN kw = 'extent' THEN
						RAISE NOTICE 'Adding maximum extent constraint';
						rtn := _add_raster_constraint_extent(schema, $2, $3);
					ELSE
						RAISE NOTICE 'Unknown constraint: %.  Skipping', quote_literal(constraints[x]);
						CONTINUE kwloop;
				END CASE;
			END;
			IF rtn IS FALSE THEN
				cnt := cnt + 1;
				RAISE WARNING 'Unable to add constraint: %.  Skipping', quote_literal(constraints[x]);
			END IF;
		END LOOP kwloop;
		IF cnt = max THEN
			RAISE EXCEPTION 'None of the constraints specified could be added.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;
		RETURN TRUE;
	END;
	$function$
CREATE OR REPLACE FUNCTION public.addrasterconstraints(rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT false, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT AddRasterConstraints('', $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) $function$
CREATE OR REPLACE FUNCTION public.addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT false, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		constraints text[];
	BEGIN
		IF srid IS TRUE THEN
			constraints := constraints || 'srid'::text;
		END IF;
		IF scale_x IS TRUE THEN
			constraints := constraints || 'scale_x'::text;
		END IF;
		IF scale_y IS TRUE THEN
			constraints := constraints || 'scale_y'::text;
		END IF;
		IF blocksize_x IS TRUE THEN
			constraints := constraints || 'blocksize_x'::text;
		END IF;
		IF blocksize_y IS TRUE THEN
			constraints := constraints || 'blocksize_y'::text;
		END IF;
		IF same_alignment IS TRUE THEN
			constraints := constraints || 'same_alignment'::text;
		END IF;
		IF regular_blocking IS TRUE THEN
			constraints := constraints || 'regular_blocking'::text;
		END IF;
		IF num_bands IS TRUE THEN
			constraints := constraints || 'num_bands'::text;
		END IF;
		IF pixel_types IS TRUE THEN
			constraints := constraints || 'pixel_types'::text;
		END IF;
		IF nodata_values IS TRUE THEN
			constraints := constraints || 'nodata_values'::text;
		END IF;
		IF out_db IS TRUE THEN
			constraints := constraints || 'out_db'::text;
		END IF;
		IF extent IS TRUE THEN
			constraints := constraints || 'extent'::text;
		END IF;
		RETURN AddRasterConstraints($1, $2, $3, VARIADIC constraints);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rastschema, rasttable, rastcolumn, VARIADIC constraints - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.]]></comment>
		</function>
		<function name="addrasterconstraints_001" id="Function2000232" isSystem="false" >
			<comment><![CDATA[args: rasttable, rastcolumn, VARIADIC constraints - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.]]></comment>
		</function>
		<function name="addrasterconstraints_002" id="Function2000232" isSystem="false" >
			<comment><![CDATA[args: rastschema, rasttable, rastcolumn, srid=true, scale_x=true, scale_y=true, blocksize_x=true, blocksize_y=true, same_alignment=true, regular_blocking=true, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.]]></comment>
		</function>
		<function name="addrasterconstraints_003" id="Function2000233" isSystem="false" >
			<comment><![CDATA[args: rasttable, rastcolumn, srid, scale_x, scale_y, blocksize_x, blocksize_y, same_alignment, regular_blocking, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.]]></comment>
		</function>
		<function name="box" id="Function2000233" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box(geometry)
 RETURNS box
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_to_BOX$function$
CREATE OR REPLACE FUNCTION public.box(box3d)
 RETURNS box
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX3D_to_BOX$function$
]]></string>
		</function>
		<function name="box_001" id="Function2000233" isSystem="false" />
		<function name="box2d" id="Function2000233" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box2d(geometry)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_to_BOX2D$function$
CREATE OR REPLACE FUNCTION public.box2d(box3d)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX3D_to_BOX2D$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns a BOX2D representing the maximum extents of the geometry.]]></comment>
		</function>
		<function name="box2d_001" id="Function2000234" isSystem="false" />
		<function name="box2d_in" id="Function2000234" isSystem="false" />
		<function name="box2d_out" id="Function2000234" isSystem="false" />
		<function name="box2df_in" id="Function2000234" isSystem="false" />
		<function name="box2df_out" id="Function2000234" isSystem="false" />
		<function name="box3d" id="Function2000235" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box3d(geometry)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_to_BOX3D$function$
CREATE OR REPLACE FUNCTION public.box3d(box2d)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX2D_to_BOX3D$function$
CREATE OR REPLACE FUNCTION public.box3d(raster)
 RETURNS box3d
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select box3d(st_convexhull($1))$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns a BOX3D representing the maximum extents of the geometry.]]></comment>
		</function>
		<function name="box3d_001" id="Function2000235" isSystem="false" />
		<function name="box3d_002" id="Function2000235" isSystem="false" >
			<comment><![CDATA[args: rast - Returns the box 3d representation of the enclosing box of the raster.]]></comment>
		</function>
		<function name="box3d_in" id="Function2000235" isSystem="false" />
		<function name="box3d_out" id="Function2000236" isSystem="false" />
		<function name="box3dtobox" id="Function2000236" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box3dtobox(box3d)
 RETURNS box
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT box($1)$function$
]]></string>
		</function>
		<function name="bytea" id="Function2000236" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.bytea(geometry)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_to_bytea$function$
CREATE OR REPLACE FUNCTION public.bytea(geography)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_to_bytea$function$
CREATE OR REPLACE FUNCTION public.bytea(raster)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_to_bytea$function$
]]></string>
		</function>
		<function name="bytea_001" id="Function2000236" isSystem="false" />
		<function name="bytea_002" id="Function2000236" isSystem="false" />
		<function name="checkauth" id="Function2000237" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.checkauth(text, text)
 RETURNS integer
 LANGUAGE sql
AS $function$ SELECT CheckAuth('', $1, $2) $function$
CREATE OR REPLACE FUNCTION public.checkauth(text, text, text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	schema text;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;
	if ( $1 != '' ) THEN
		schema = $1;
	ELSE
		SELECT current_schema() into schema;
	END IF;
	-- TODO: check for an already existing trigger ?
	EXECUTE 'CREATE TRIGGER check_auth BEFORE UPDATE OR DELETE ON ' 
		|| quote_ident(schema) || '.' || quote_ident($2)
		||' FOR EACH ROW EXECUTE PROCEDURE CheckAuthTrigger('
		|| quote_literal($3) || ')';
	RETURN 0;
END;
$function$
]]></string>
			<comment><![CDATA[args: a_schema_name, a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.]]></comment>
		</function>
		<function name="checkauth_001" id="Function2000237" isSystem="false" >
			<comment><![CDATA[args: a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.]]></comment>
		</function>
		<function name="checkauthtrigger" id="Function2000237" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.checkauthtrigger()
 RETURNS trigger
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$check_authorization$function$
]]></string>
		</function>
		<function name="disablelongtransactions" id="Function2000238" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.disablelongtransactions()
 RETURNS text
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	rec RECORD;
BEGIN
	--
	-- Drop all triggers applied by CheckAuth()
	--
	FOR rec IN
		SELECT c.relname, t.tgname, t.tgargs FROM pg_trigger t, pg_class c, pg_proc p
		WHERE p.proname = 'checkauthtrigger' and t.tgfoid = p.oid and t.tgrelid = c.oid
	LOOP
		EXECUTE 'DROP TRIGGER ' || quote_ident(rec.tgname) ||
			' ON ' || quote_ident(rec.relname);
	END LOOP;
	--
	-- Drop the authorization_table table
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table' LOOP
		DROP TABLE authorization_table;
	END LOOP;
	--
	-- Drop the authorized_tables view
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables' LOOP
		DROP VIEW authorized_tables;
	END LOOP;
	RETURN 'Long transactions support disabled';
END;
$function$
]]></string>
			<comment><![CDATA[Disable long transaction support. This function removes the long transaction support metadata tables, and drops all triggers attached to lock-checked tables.]]></comment>
		</function>
		<function name="dropgeometrycolumn" id="Function2000238" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dropgeometrycolumn(table_name character varying, column_name character varying)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('','',$1,$2) into ret;
	RETURN ret;
END;
$function$
CREATE OR REPLACE FUNCTION public.dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('',$1,$2,$3) into ret;
	RETURN ret;
END;
$function$
CREATE OR REPLACE FUNCTION public.dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	myrec RECORD;
	okay boolean;
	real_schema name;
BEGIN

	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;
		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;
		IF ( okay <>  true ) THEN
			RAISE NOTICE 'Invalid schema name - using current_schema()';
			SELECT current_schema() into real_schema;
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT current_schema() into real_schema;
	END IF;
	-- Find out if the column is in the geometry_columns table
	okay = false;
	FOR myrec IN SELECT * from geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (okay <> true) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;
	-- Remove table column
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' DROP COLUMN ' ||
		quote_ident(column_name);
	RETURN real_schema || '.' || table_name || '.' || column_name ||' effectively removed.';
END;
$function$
]]></string>
			<comment><![CDATA[args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table.]]></comment>
		</function>
		<function name="dropgeometrycolumn_001" id="Function2000239" isSystem="false" >
			<comment><![CDATA[args: schema_name, table_name, column_name - Removes a geometry column from a spatial table.]]></comment>
		</function>
		<function name="dropgeometrycolumn_002" id="Function2000239" isSystem="false" >
			<comment><![CDATA[args: table_name, column_name - Removes a geometry column from a spatial table.]]></comment>
		</function>
		<function name="dropgeometrytable" id="Function2000239" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dropgeometrytable(table_name character varying)
 RETURNS text
 LANGUAGE sql
 STRICT
AS $function$ SELECT DropGeometryTable('','',$1) $function$
CREATE OR REPLACE FUNCTION public.dropgeometrytable(schema_name character varying, table_name character varying)
 RETURNS text
 LANGUAGE sql
 STRICT
AS $function$ SELECT DropGeometryTable('',$1,$2) $function$
CREATE OR REPLACE FUNCTION public.dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	real_schema name;
BEGIN
	IF ( schema_name = '' ) THEN
		SELECT current_schema() into real_schema;
	ELSE
		real_schema = schema_name;
	END IF;
	-- TODO: Should we warn if table doesn't exist probably instead just saying dropped
	-- Remove table
	EXECUTE 'DROP TABLE IF EXISTS '
		|| quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' RESTRICT';
	RETURN
		real_schema || '.' ||
		table_name ||' dropped.';
END;
$function$
]]></string>
			<comment><![CDATA[args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns.]]></comment>
		</function>
		<function name="dropgeometrytable_001" id="Function2000240" isSystem="false" >
			<comment><![CDATA[args: schema_name, table_name - Drops a table and all its references in geometry_columns.]]></comment>
		</function>
		<function name="dropgeometrytable_002" id="Function2000240" isSystem="false" >
			<comment><![CDATA[args: table_name - Drops a table and all its references in geometry_columns.]]></comment>
		</function>
		<function name="dropoverviewconstraints" id="Function2000240" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dropoverviewconstraints(ovtable name, ovcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT DropOverviewConstraints('', $1, $2) $function$
CREATE OR REPLACE FUNCTION public.dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		schema name;
		sql text;
		rtn boolean;
	BEGIN
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;
		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;
		rtn := _drop_overview_constraint(schema, $2, $3);
		IF rtn IS FALSE THEN
			RAISE EXCEPTION 'Unable to drop the overview constraint .  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;
		RETURN TRUE;
	END;
	$function$
]]></string>
		</function>
		<function name="dropoverviewconstraints_001" id="Function2000241" isSystem="false" />
		<function name="droprasterconstraints" id="Function2000241" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[])
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT DropRasterConstraints('', $1, $2, VARIADIC $3) $function$
CREATE OR REPLACE FUNCTION public.droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[])
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		max int;
		x int;
		schema name;
		sql text;
		kw text;
		rtn boolean;
		cnt int;
	BEGIN
		cnt := 0;
		max := array_length(constraints, 1);
		IF max < 1 THEN
			RAISE NOTICE 'No constraints indicated to be dropped.  Doing nothing';
			RETURN TRUE;
		END IF;
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;
		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;
		<<kwloop>>
		FOR x in 1..max LOOP
			kw := trim(both from lower(constraints[x]));
			BEGIN
				CASE
					WHEN kw = 'srid' THEN
						RAISE NOTICE 'Dropping SRID constraint';
						rtn := _drop_raster_constraint_srid(schema, $2, $3);
					WHEN kw IN ('scale_x', 'scalex') THEN
						RAISE NOTICE 'Dropping scale-X constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'x');
					WHEN kw IN ('scale_y', 'scaley') THEN
						RAISE NOTICE 'Dropping scale-Y constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw = 'scale' THEN
						RAISE NOTICE 'Dropping scale-X constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'x');
						RAISE NOTICE 'Dropping scale-Y constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw IN ('blocksize_x', 'blocksizex', 'width') THEN
						RAISE NOTICE 'Dropping blocksize-X constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'width');
					WHEN kw IN ('blocksize_y', 'blocksizey', 'height') THEN
						RAISE NOTICE 'Dropping blocksize-Y constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw = 'blocksize' THEN
						RAISE NOTICE 'Dropping blocksize-X constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'width');
						RAISE NOTICE 'Dropping blocksize-Y constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw IN ('same_alignment', 'samealignment', 'alignment') THEN
						RAISE NOTICE 'Dropping alignment constraint';
						rtn := _drop_raster_constraint_alignment(schema, $2, $3);
					WHEN kw IN ('regular_blocking', 'regularblocking') THEN
						RAISE NOTICE 'Dropping regular blocking constraint';
						rtn := _drop_raster_constraint_regular_blocking(schema, $2, $3);
					WHEN kw IN ('num_bands', 'numbands') THEN
						RAISE NOTICE 'Dropping number of bands constraint';
						rtn := _drop_raster_constraint_num_bands(schema, $2, $3);
					WHEN kw IN ('pixel_types', 'pixeltypes') THEN
						RAISE NOTICE 'Dropping pixel type constraint';
						rtn := _drop_raster_constraint_pixel_types(schema, $2, $3);
					WHEN kw IN ('nodata_values', 'nodatavalues', 'nodata') THEN
						RAISE NOTICE 'Dropping nodata value constraint';
						rtn := _drop_raster_constraint_nodata_values(schema, $2, $3);
					WHEN kw IN ('out_db', 'outdb') THEN
						RAISE NOTICE 'Dropping out-of-database constraint';
						rtn := _drop_raster_constraint_out_db(schema, $2, $3);
					WHEN kw = 'extent' THEN
						RAISE NOTICE 'Dropping maximum extent constraint';
						rtn := _drop_raster_constraint_extent(schema, $2, $3);
					ELSE
						RAISE NOTICE 'Unknown constraint: %.  Skipping', quote_literal(constraints[x]);
						CONTINUE kwloop;
				END CASE;
			END;
			IF rtn IS FALSE THEN
				cnt := cnt + 1;
				RAISE WARNING 'Unable to drop constraint: %.  Skipping', quote_literal(constraints[x]);
			END IF;
		END LOOP kwloop;
		IF cnt = max THEN
			RAISE EXCEPTION 'None of the constraints specified could be dropped.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;
		RETURN TRUE;
	END;
	$function$
CREATE OR REPLACE FUNCTION public.droprasterconstraints(rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT true, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT DropRasterConstraints('', $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) $function$
CREATE OR REPLACE FUNCTION public.droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT true, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		constraints text[];
	BEGIN
		IF srid IS TRUE THEN
			constraints := constraints || 'srid'::text;
		END IF;
		IF scale_x IS TRUE THEN
			constraints := constraints || 'scale_x'::text;
		END IF;
		IF scale_y IS TRUE THEN
			constraints := constraints || 'scale_y'::text;
		END IF;
		IF blocksize_x IS TRUE THEN
			constraints := constraints || 'blocksize_x'::text;
		END IF;
		IF blocksize_y IS TRUE THEN
			constraints := constraints || 'blocksize_y'::text;
		END IF;
		IF same_alignment IS TRUE THEN
			constraints := constraints || 'same_alignment'::text;
		END IF;
		IF regular_blocking IS TRUE THEN
			constraints := constraints || 'regular_blocking'::text;
		END IF;
		IF num_bands IS TRUE THEN
			constraints := constraints || 'num_bands'::text;
		END IF;
		IF pixel_types IS TRUE THEN
			constraints := constraints || 'pixel_types'::text;
		END IF;
		IF nodata_values IS TRUE THEN
			constraints := constraints || 'nodata_values'::text;
		END IF;
		IF out_db IS TRUE THEN
			constraints := constraints || 'out_db'::text;
		END IF;
		IF extent IS TRUE THEN
			constraints := constraints || 'extent'::text;
		END IF;
		RETURN DropRasterConstraints($1, $2, $3, VARIADIC constraints);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rastschema, rasttable, rastcolumn, constraints - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.]]></comment>
		</function>
		<function name="droprasterconstraints_001" id="Function2000242" isSystem="false" />
		<function name="droprasterconstraints_002" id="Function2000243" isSystem="false" >
			<comment><![CDATA[args: rastschema, rasttable, rastcolumn, srid=true, scale_x=true, scale_y=true, blocksize_x=true, blocksize_y=true, same_alignment=true, regular_blocking=true, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.]]></comment>
		</function>
		<function name="droprasterconstraints_003" id="Function2000243" isSystem="false" >
			<comment><![CDATA[args: rasttable, rastcolumn, srid, scale_x, scale_y, blocksize_x, blocksize_y, same_alignment, regular_blocking, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.]]></comment>
		</function>
		<function name="enablelongtransactions" id="Function2000243" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.enablelongtransactions()
 RETURNS text
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	"query" text;
	exists bool;
	rec RECORD;
BEGIN
	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table'
	LOOP
		exists = 't';
	END LOOP;
	IF NOT exists
	THEN
		"query" = 'CREATE TABLE authorization_table (
			toid oid, -- table oid
			rid text, -- row id
			expires timestamp,
			authid text
		)';
		EXECUTE "query";
	END IF;
	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		exists = 't';
	END LOOP;
	IF NOT exists THEN
		"query" = 'CREATE VIEW authorized_tables AS ' ||
			'SELECT ' ||
			'n.nspname as schema, ' ||
			'c.relname as table, trim(' ||
			quote_literal(chr(92) || '000') ||
			' from t.tgargs) as id_column ' ||
			'FROM pg_trigger t, pg_class c, pg_proc p ' ||
			', pg_namespace n ' ||
			'WHERE p.proname = ' || quote_literal('checkauthtrigger') ||
			' AND c.relnamespace = n.oid' ||
			' AND t.tgfoid = p.oid and t.tgrelid = c.oid';
		EXECUTE "query";
	END IF;
	RETURN 'Long transactions support enabled';
END;
$function$
]]></string>
			<comment><![CDATA[Enable long transaction support. This function creates the required metadata tables, needs to be called once before using the other functions in this section. Calling it twice is harmless.]]></comment>
		</function>
		<function name="equals" id="Function2000244" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.equals(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$ST_Equals$function$
]]></string>
		</function>
		<function name="find_srid" id="Function2000244" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.find_srid(character varying, character varying, character varying)
 RETURNS integer
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
DECLARE
	schem text;
	tabl text;
	sr int4;
BEGIN
	IF $1 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - schema is NULL!';
	END IF;
	IF $2 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - table name is NULL!';
	END IF;
	IF $3 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - column name is NULL!';
	END IF;
	schem = $1;
	tabl = $2;
-- if the table contains a . and the schema is empty
-- split the table into a schema and a table
-- otherwise drop through to default behavior
	IF ( schem = '' and tabl LIKE '%.%' ) THEN
	 schem = substr(tabl,1,strpos(tabl,'.')-1);
	 tabl = substr(tabl,length(schem)+2);
	ELSE
	 schem = schem || '%';
	END IF;
	select SRID into sr from geometry_columns where f_table_schema like schem and f_table_name = tabl and f_geometry_column = $3;
	IF NOT FOUND THEN
	   RAISE EXCEPTION 'find_srid() - couldnt find the corresponding SRID - is the geometry registered in the GEOMETRY_COLUMNS table?  Is there an uppercase/lowercase missmatch?';
	END IF;
	return sr;
END;
$function$
]]></string>
			<comment><![CDATA[args: a_schema_name, a_table_name, a_geomfield_name - The syntax is find_srid(<db/schema>, <table>, <column>) and the function returns the integer SRID of the specified column by searching through the GEOMETRY_COLUMNS table.]]></comment>
		</function>
		<function name="geography" id="Function2000244" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography(bytea)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_from_bytea$function$
CREATE OR REPLACE FUNCTION public.geography(geometry)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_from_geometry$function$
CREATE OR REPLACE FUNCTION public.geography(geography, integer, boolean)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_enforce_typmod$function$
]]></string>
		</function>
		<function name="geography_001" id="Function2000245" isSystem="false" />
		<function name="geography_002" id="Function2000245" isSystem="false" />
		<function name="geography_analyze" id="Function2000245" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_analyze(internal)
 RETURNS boolean
 LANGUAGE c
 STRICT
AS '$libdir/postgis-2.0', $function$geography_analyze$function$
]]></string>
		</function>
		<function name="geography_cmp" id="Function2000245" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_cmp(geography, geography)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_cmp$function$
]]></string>
		</function>
		<function name="geography_eq" id="Function2000245" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_eq(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_eq$function$
]]></string>
		</function>
		<function name="geography_ge" id="Function2000245" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_ge(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_ge$function$
]]></string>
		</function>
		<function name="geography_gist_compress" id="Function2000246" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_compress(internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_compress$function$
]]></string>
		</function>
		<function name="geography_gist_consistent" id="Function2000246" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_consistent(internal, geography, integer)
 RETURNS boolean
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_consistent$function$
]]></string>
		</function>
		<function name="geography_gist_decompress" id="Function2000246" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_decompress(internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_decompress$function$
]]></string>
		</function>
		<function name="geography_gist_join_selectivity" id="Function2000246" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_join_selectivity(internal, oid, internal, smallint)
 RETURNS double precision
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$geography_gist_selectivity$function$
]]></string>
		</function>
		<function name="geography_gist_penalty" id="Function2000246" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_penalty$function$
]]></string>
		</function>
		<function name="geography_gist_picksplit" id="Function2000246" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_picksplit$function$
]]></string>
		</function>
		<function name="geography_gist_same" id="Function2000246" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_same(box2d, box2d, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_same$function$
]]></string>
		</function>
		<function name="geography_gist_selectivity" id="Function2000247" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_selectivity(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$geography_gist_selectivity$function$
]]></string>
		</function>
		<function name="geography_gist_union" id="Function2000247" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_union(bytea, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_union$function$
]]></string>
		</function>
		<function name="geography_gt" id="Function2000247" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gt(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_gt$function$
]]></string>
		</function>
		<function name="geography_in" id="Function2000247" isSystem="false" />
		<function name="geography_le" id="Function2000247" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_le(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_le$function$
]]></string>
		</function>
		<function name="geography_lt" id="Function2000247" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_lt(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_lt$function$
]]></string>
		</function>
		<function name="geography_out" id="Function2000247" isSystem="false" />
		<function name="geography_overlaps" id="Function2000248" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_overlaps(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_overlaps$function$
]]></string>
		</function>
		<function name="geography_recv" id="Function2000248" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_recv(internal, oid, integer)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_recv$function$
]]></string>
		</function>
		<function name="geography_send" id="Function2000248" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_send(geography)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_send$function$
]]></string>
		</function>
		<function name="geography_typmod_in" id="Function2000248" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_typmod_in(cstring[])
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_typmod_in$function$
]]></string>
		</function>
		<function name="geography_typmod_out" id="Function2000248" isSystem="false" />
		<function name="geometry" id="Function2000248" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry(bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_from_bytea$function$
CREATE OR REPLACE FUNCTION public.geometry(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$parse_WKT_lwgeom$function$
CREATE OR REPLACE FUNCTION public.geometry(box3d)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX3D_to_LWGEOM$function$
CREATE OR REPLACE FUNCTION public.geometry(box2d)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX2D_to_LWGEOM$function$
CREATE OR REPLACE FUNCTION public.geometry(geography)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geometry_from_geography$function$
CREATE OR REPLACE FUNCTION public.geometry(geometry, integer, boolean)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geometry_enforce_typmod$function$
]]></string>
		</function>
		<function name="geometry_001" id="Function2000249" isSystem="false" />
		<function name="geometry_002" id="Function2000249" isSystem="false" />
		<function name="geometry_003" id="Function2000249" isSystem="false" />
		<function name="geometry_004" id="Function2000249" isSystem="false" />
		<function name="geometry_005" id="Function2000249" isSystem="false" />
		<function name="geometry_above" id="Function2000249" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_above(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_above_2d$function$
]]></string>
		</function>
		<function name="geometry_analyze" id="Function2000249" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_analyze(internal)
 RETURNS boolean
 LANGUAGE c
 STRICT
AS '$libdir/postgis-2.0', $function$geometry_analyze_2d$function$
]]></string>
		</function>
		<function name="geometry_below" id="Function2000249" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_below(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_below_2d$function$
]]></string>
		</function>
		<function name="geometry_cmp" id="Function2000250" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_cmp(geom1 geometry, geom2 geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$lwgeom_cmp$function$
]]></string>
		</function>
		<function name="geometry_contains" id="Function2000250" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_contains(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_contains_2d$function$
]]></string>
		</function>
		<function name="geometry_distance_box" id="Function2000250" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_distance_box(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_distance_box_2d$function$
]]></string>
		</function>
		<function name="geometry_distance_centroid" id="Function2000250" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_distance_centroid(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_distance_centroid_2d$function$
]]></string>
		</function>
		<function name="geometry_eq" id="Function2000250" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_eq(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$lwgeom_eq$function$
]]></string>
		</function>
		<function name="geometry_ge" id="Function2000250" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_ge(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$lwgeom_ge$function$
]]></string>
		</function>
		<function name="geometry_gist_compress_2d" id="Function2000251" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_compress_2d(internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_compress_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_compress_nd" id="Function2000251" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_compress_nd(internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_compress$function$
]]></string>
		</function>
		<function name="geometry_gist_consistent_2d" id="Function2000251" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_consistent_2d(internal, geometry, integer)
 RETURNS boolean
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_consistent_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_consistent_nd" id="Function2000251" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_consistent_nd(internal, geometry, integer)
 RETURNS boolean
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_consistent$function$
]]></string>
		</function>
		<function name="geometry_gist_decompress_2d" id="Function2000251" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_decompress_2d(internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_decompress_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_decompress_nd" id="Function2000251" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_decompress_nd(internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_decompress$function$
]]></string>
		</function>
		<function name="geometry_gist_distance_2d" id="Function2000252" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_distance_2d(internal, geometry, integer)
 RETURNS double precision
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_distance_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_joinsel_2d" id="Function2000252" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_joinsel_2d(internal, oid, internal, smallint)
 RETURNS double precision
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$geometry_gist_joinsel_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_penalty_2d" id="Function2000252" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_penalty_2d(internal, internal, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_penalty_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_penalty_nd" id="Function2000252" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_penalty_nd(internal, internal, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_penalty$function$
]]></string>
		</function>
		<function name="geometry_gist_picksplit_2d" id="Function2000252" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_picksplit_2d(internal, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_picksplit_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_picksplit_nd" id="Function2000253" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_picksplit_nd(internal, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_picksplit$function$
]]></string>
		</function>
		<function name="geometry_gist_same_2d" id="Function2000253" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_same_2d(geom1 geometry, geom2 geometry, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_same_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_same_nd" id="Function2000253" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_same_nd(geometry, geometry, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_same$function$
]]></string>
		</function>
		<function name="geometry_gist_sel_2d" id="Function2000253" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_sel_2d(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$geometry_gist_sel_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_union_2d" id="Function2000253" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_union_2d(bytea, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_union_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_union_nd" id="Function2000253" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_union_nd(bytea, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$gserialized_gist_union$function$
]]></string>
		</function>
		<function name="geometry_gt" id="Function2000254" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gt(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$lwgeom_gt$function$
]]></string>
		</function>
		<function name="geometry_in" id="Function2000254" isSystem="false" />
		<function name="geometry_le" id="Function2000254" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_le(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$lwgeom_le$function$
]]></string>
		</function>
		<function name="geometry_left" id="Function2000254" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_left(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_left_2d$function$
]]></string>
		</function>
		<function name="geometry_lt" id="Function2000254" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_lt(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$lwgeom_lt$function$
]]></string>
		</function>
		<function name="geometry_out" id="Function2000254" isSystem="false" />
		<function name="geometry_overabove" id="Function2000255" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overabove(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_overabove_2d$function$
]]></string>
		</function>
		<function name="geometry_overbelow" id="Function2000255" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overbelow(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_overbelow_2d$function$
]]></string>
		</function>
		<function name="geometry_overlaps" id="Function2000255" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overlaps(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_overlaps_2d$function$
]]></string>
		</function>
		<function name="geometry_overlaps_nd" id="Function2000255" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overlaps_nd(geometry, geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_overlaps$function$
]]></string>
		</function>
		<function name="geometry_overleft" id="Function2000255" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overleft(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_overleft_2d$function$
]]></string>
		</function>
		<function name="geometry_overright" id="Function2000255" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overright(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_overright_2d$function$
]]></string>
		</function>
		<function name="geometry_raster_contain" id="Function2000255" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_raster_contain(geometry, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1 ~ $2::geometry$function$
]]></string>
		</function>
		<function name="geometry_raster_overlap" id="Function2000255" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_raster_overlap(geometry, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1 && $2::geometry$function$
]]></string>
		</function>
		<function name="geometry_recv" id="Function2000255" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_recv(internal)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_recv$function$
]]></string>
		</function>
		<function name="geometry_right" id="Function2000256" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_right(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_right_2d$function$
]]></string>
		</function>
		<function name="geometry_same" id="Function2000256" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_same(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_same_2d$function$
]]></string>
		</function>
		<function name="geometry_send" id="Function2000256" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_send(geometry)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_send$function$
]]></string>
		</function>
		<function name="geometry_typmod_in" id="Function2000256" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_typmod_in(cstring[])
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geometry_typmod_in$function$
]]></string>
		</function>
		<function name="geometry_typmod_out" id="Function2000256" isSystem="false" />
		<function name="geometry_within" id="Function2000256" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_within(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$gserialized_within_2d$function$
]]></string>
		</function>
		<function name="geometrytype" id="Function2000256" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometrytype(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_getTYPE$function$
CREATE OR REPLACE FUNCTION public.geometrytype(geography)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_getTYPE$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the type of the geometry as a string. Eg: LINESTRING, POLYGON, MULTIPOINT, etc.]]></comment>
		</function>
		<function name="geometrytype_001" id="Function2000256" isSystem="false" />
		<function name="geomfromewkb" id="Function2000256" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geomfromewkb(bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOMFromWKB$function$
]]></string>
		</function>
		<function name="geomfromewkt" id="Function2000256" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geomfromewkt(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$parse_WKT_lwgeom$function$
]]></string>
		</function>
		<function name="get_proj4_from_srid" id="Function2000257" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.get_proj4_from_srid(integer)
 RETURNS text
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
BEGIN
	RETURN proj4text::text FROM spatial_ref_sys WHERE srid= $1;
END;
$function$
]]></string>
		</function>
		<function name="gettransactionid" id="Function2000257" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gettransactionid()
 RETURNS xid
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$getTransactionID$function$
]]></string>
		</function>
		<function name="gidx_in" id="Function2000257" isSystem="false" />
		<function name="gidx_out" id="Function2000257" isSystem="false" />
		<function name="lockrow" id="Function2000257" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.lockrow(text, text, text)
 RETURNS integer
 LANGUAGE sql
 STRICT
AS $function$ SELECT LockRow(current_schema(), $1, $2, $3, now()::timestamp+'1:00'); $function$
CREATE OR REPLACE FUNCTION public.lockrow(text, text, text, text)
 RETURNS integer
 LANGUAGE sql
 STRICT
AS $function$ SELECT LockRow($1, $2, $3, $4, now()::timestamp+'1:00'); $function$
CREATE OR REPLACE FUNCTION public.lockrow(text, text, text, timestamp without time zone)
 RETURNS integer
 LANGUAGE sql
 STRICT
AS $function$ SELECT LockRow(current_schema(), $1, $2, $3, $4); $function$
CREATE OR REPLACE FUNCTION public.lockrow(text, text, text, text, timestamp without time zone)
 RETURNS integer
 LANGUAGE plpgsql
 STRICT
AS $function$ 
DECLARE
	myschema alias for $1;
	mytable alias for $2;
	myrid   alias for $3;
	authid alias for $4;
	expires alias for $5;
	ret int;
	mytoid oid;
	myrec RECORD;
	
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;
	EXECUTE 'DELETE FROM authorization_table WHERE expires < now()'; 
	SELECT c.oid INTO mytoid FROM pg_class c, pg_namespace n
		WHERE c.relname = mytable
		AND c.relnamespace = n.oid
		AND n.nspname = myschema;
	-- RAISE NOTICE 'toid: %', mytoid;
	FOR myrec IN SELECT * FROM authorization_table WHERE 
		toid = mytoid AND rid = myrid
	LOOP
		IF myrec.authid != authid THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END LOOP;
	EXECUTE 'INSERT INTO authorization_table VALUES ('||
		quote_literal(mytoid::text)||','||quote_literal(myrid)||
		','||quote_literal(expires::text)||
		','||quote_literal(authid) ||')';
	GET DIAGNOSTICS ret = ROW_COUNT;
	RETURN ret;
END;
$function$
]]></string>
			<comment><![CDATA[args: a_schema_name, a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table]]></comment>
		</function>
		<function name="lockrow_001" id="Function2000257" isSystem="false" />
		<function name="lockrow_002" id="Function2000257" isSystem="false" >
			<comment><![CDATA[args: a_table_name, a_row_key, an_auth_token - Set lock/authorization for specific row in table]]></comment>
		</function>
		<function name="lockrow_003" id="Function2000258" isSystem="false" >
			<comment><![CDATA[args: a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table]]></comment>
		</function>
		<function name="longtransactionsenabled" id="Function2000258" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.longtransactionsenabled()
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	rec RECORD;
BEGIN
	FOR rec IN SELECT oid FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		return 't';
	END LOOP;
	return 'f';
END;
$function$
]]></string>
		</function>
		<function name="pgis_abs_in" id="Function2000258" isSystem="false" />
		<function name="pgis_abs_out" id="Function2000258" isSystem="false" />
		<function name="pgis_geometry_accum_finalfn" id="Function2000258" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_accum_finalfn(pgis_abs)
 RETURNS geometry[]
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$pgis_geometry_accum_finalfn$function$
]]></string>
		</function>
		<function name="pgis_geometry_accum_transfn" id="Function2000258" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_accum_transfn(pgis_abs, geometry)
 RETURNS pgis_abs
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$pgis_geometry_accum_transfn$function$
]]></string>
		</function>
		<function name="pgis_geometry_collect_finalfn" id="Function2000258" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_collect_finalfn(pgis_abs)
 RETURNS geometry
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$pgis_geometry_collect_finalfn$function$
]]></string>
		</function>
		<function name="pgis_geometry_makeline_finalfn" id="Function2000258" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_makeline_finalfn(pgis_abs)
 RETURNS geometry
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$pgis_geometry_makeline_finalfn$function$
]]></string>
		</function>
		<function name="pgis_geometry_polygonize_finalfn" id="Function2000259" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_polygonize_finalfn(pgis_abs)
 RETURNS geometry
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$pgis_geometry_polygonize_finalfn$function$
]]></string>
		</function>
		<function name="pgis_geometry_union_finalfn" id="Function2000259" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_union_finalfn(pgis_abs)
 RETURNS geometry
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$pgis_geometry_union_finalfn$function$
]]></string>
		</function>
		<function name="populate_geometry_columns" id="Function2000259" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.populate_geometry_columns(use_typmod boolean DEFAULT true)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
	inserted    integer;
	oldcount    integer;
	probed      integer;
	stale       integer;
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;
BEGIN
	SELECT count(*) INTO oldcount FROM geometry_columns;
	inserted := 0;
	-- Count the number of geometry columns in all tables and views
	SELECT count(DISTINCT c.oid) INTO probed
	FROM pg_class c,
		 pg_attribute a,
		 pg_type t,
		 pg_namespace n
	WHERE (c.relkind = 'r' OR c.relkind = 'v')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns' ;
	-- Iterate through all non-dropped geometry columns
	RAISE DEBUG 'Processing Tables.....';
	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns' 
	LOOP
		inserted := inserted + populate_geometry_columns(gcs.oid, use_typmod);
	END LOOP;
	IF oldcount > inserted THEN
	    stale = oldcount-inserted;
	ELSE
	    stale = 0;
	END IF;
	RETURN 'probed:' ||probed|| ' inserted:'||inserted;
END
$function$
CREATE OR REPLACE FUNCTION public.populate_geometry_columns(tbl_oid oid, use_typmod boolean DEFAULT true)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
	gcs         RECORD;
	gc          RECORD;
	gc_old      RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;
	inserted    integer;
	constraint_successful boolean := false;
BEGIN
	inserted := 0;
	-- Iterate through all geometry columns in this table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP
        RAISE DEBUG 'Processing table %.%.%', gcs.nspname, gcs.relname, gcs.attname;
    
        gc_is_valid := true;
        -- Find the srid, coord_dimension, and type of current geometry
        -- in geometry_columns -- which is now a view
        
        SELECT type, srid, coord_dimension INTO gc_old 
            FROM geometry_columns 
            WHERE f_table_schema = gcs.nspname AND f_table_name = gcs.relname AND f_geometry_column = gcs.attname; 
            
        IF upper(gc_old.type) = 'GEOMETRY' THEN
        -- This is an unconstrained geometry we need to do something
        -- We need to figure out what to set the type by inspecting the data
            EXECUTE 'SELECT st_srid(' || quote_ident(gcs.attname) || ') As srid, GeometryType(' || quote_ident(gcs.attname) || ') As type, ST_NDims(' || quote_ident(gcs.attname) || ') As dims ' ||
                     ' FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || 
                     ' WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1;'
                INTO gc;
            IF gc IS NULL THEN -- there is no data so we can not determine geometry type
            	RAISE WARNING 'No data in table %.%, so no information to determine geometry type and srid', gcs.nspname, gcs.relname;
            	RETURN 0;
            END IF;
            gsrid := gc.srid; gtype := gc.type; gndims := gc.dims;
            	
            IF use_typmod THEN
                BEGIN
                    EXECUTE 'ALTER TABLE ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || ' ALTER COLUMN ' || quote_ident(gcs.attname) || 
                        ' TYPE geometry(' || postgis_type_name(gtype, gndims, true) || ', ' || gsrid::text  || ') ';
                    inserted := inserted + 1;
                EXCEPTION
                        WHEN invalid_parameter_value THEN
                        RAISE WARNING 'Could not convert ''%'' in ''%.%'' to use typmod with srid %, type: % ', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), gsrid, postgis_type_name(gtype, gndims, true);
                            gc_is_valid := false;
                END;
                
            ELSE
                -- Try to apply srid check to column
            	constraint_successful = false;
                IF (gsrid > 0 AND postgis_constraint_srid(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || 
                                 ' ADD CONSTRAINT ' || quote_ident('enforce_srid_' || gcs.attname) || 
                                 ' CHECK (st_srid(' || quote_ident(gcs.attname) || ') = ' || gsrid || ')';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_srid(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gsrid;
                            gc_is_valid := false;
                    END;
                END IF;
                
                -- Try to apply ndims check to column
                IF (gndims IS NOT NULL AND postgis_constraint_dims(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
                                 ADD CONSTRAINT ' || quote_ident('enforce_dims_' || gcs.attname) || '
                                 CHECK (st_ndims(' || quote_ident(gcs.attname) || ') = '||gndims||')';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_ndims(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gndims;
                            gc_is_valid := false;
                    END;
                END IF;
    
                -- Try to apply geometrytype check to column
                IF (gtype IS NOT NULL AND postgis_constraint_type(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
                        ADD CONSTRAINT ' || quote_ident('enforce_geotype_' || gcs.attname) || '
                        CHECK ((geometrytype(' || quote_ident(gcs.attname) || ') = ' || quote_literal(gtype) || ') OR (' || quote_ident(gcs.attname) || ' IS NULL))';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            -- No geometry check can be applied. This column contains a number of geometry types.
                            RAISE WARNING 'Could not add geometry type check (%) to table column: %.%.%', gtype, quote_ident(gcs.nspname),quote_ident(gcs.relname),quote_ident(gcs.attname);
                    END;
                END IF;
                 --only count if we were successful in applying at least one constraint
                IF constraint_successful THEN
                	inserted := inserted + 1;
                END IF;
            END IF;	        
	    END IF;
	END LOOP;
	RETURN inserted;
END
$function$
]]></string>
			<comment><![CDATA[args: use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints This ensures they will be registered correctly in geometry_columns view. By default will convert all geometry columns with no type modifier to ones with type modifiers. To get old behavior set use_typmod=false]]></comment>
		</function>
		<function name="populate_geometry_columns_001" id="Function2000259" isSystem="false" >
			<comment><![CDATA[args: relation_oid, use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints This ensures they will be registered correctly in geometry_columns view. By default will convert all geometry columns with no type modifier to ones with type modifiers. To get old behavior set use_typmod=false]]></comment>
		</function>
		<function name="postgis_addbbox" id="Function2000259" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_addbbox(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_addBBOX$function$
]]></string>
			<comment><![CDATA[args: geomA - Add bounding box to the geometry.]]></comment>
		</function>
		<function name="postgis_cache_bbox" id="Function2000259" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_cache_bbox()
 RETURNS trigger
 LANGUAGE c
AS '$libdir/postgis-2.0', $function$cache_bbox$function$
]]></string>
		</function>
		<function name="postgis_constraint_dims" id="Function2000260" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$
SELECT  replace(split_part(s.consrc, ' = ', 2), ')', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%ndims(% = %';
$function$
]]></string>
		</function>
		<function name="postgis_constraint_srid" id="Function2000260" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$
SELECT replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%srid(% = %';
$function$
]]></string>
		</function>
		<function name="postgis_constraint_type" id="Function2000260" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_constraint_type(geomschema text, geomtable text, geomcolumn text)
 RETURNS character varying
 LANGUAGE sql
 STABLE STRICT
AS $function$
SELECT  replace(split_part(s.consrc, '''', 2), ')', '')::varchar		
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%geometrytype(% = %';
$function$
]]></string>
		</function>
		<function name="postgis_dropbbox" id="Function2000260" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_dropbbox(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_dropBBOX$function$
]]></string>
			<comment><![CDATA[args: geomA - Drop the bounding box cache from the geometry.]]></comment>
		</function>
		<function name="postgis_full_version" id="Function2000260" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_full_version()
 RETURNS text
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
DECLARE
	libver text;
	svnver text;
	projver text;
	geosver text;
	gdalver text;
	libxmlver text;
	dbproc text;
	relproc text;
	fullver text;
	rast_lib_ver text;
	rast_scr_ver text;
	topo_scr_ver text;
	json_lib_ver text;
BEGIN
	SELECT postgis_lib_version() INTO libver;
	SELECT postgis_proj_version() INTO projver;
	SELECT postgis_geos_version() INTO geosver;
	SELECT postgis_libjson_version() INTO json_lib_ver;
	BEGIN
		SELECT postgis_gdal_version() INTO gdalver;
	EXCEPTION
		WHEN undefined_function THEN
			gdalver := NULL;
			RAISE NOTICE 'Function postgis_gdal_version() not found.  Is raster support enabled and rtpostgis.sql installed?';
	END;
	SELECT postgis_libxml_version() INTO libxmlver;
	SELECT postgis_scripts_installed() INTO dbproc;
	SELECT postgis_scripts_released() INTO relproc;
	select postgis_svn_version() INTO svnver;
	BEGIN
		SELECT postgis_topology_scripts_installed() INTO topo_scr_ver;
	EXCEPTION
		WHEN undefined_function THEN
			topo_scr_ver := NULL;
			RAISE NOTICE 'Function postgis_topology_scripts_installed() not found. Is topology support enabled and topology.sql installed?';
	END;
	BEGIN
		SELECT postgis_raster_scripts_installed() INTO rast_scr_ver;
	EXCEPTION
		WHEN undefined_function THEN
			rast_scr_ver := NULL;
			RAISE NOTICE 'Function postgis_raster_scripts_installed() not found. Is raster support enabled and rtpostgis.sql installed?';
	END;
	BEGIN
		SELECT postgis_raster_lib_version() INTO rast_lib_ver;
	EXCEPTION
		WHEN undefined_function THEN
			rast_lib_ver := NULL;
			RAISE NOTICE 'Function postgis_raster_lib_version() not found. Is raster support enabled and rtpostgis.sql installed?';
	END;
	fullver = 'POSTGIS="' || libver;
	IF  svnver IS NOT NULL THEN
		fullver = fullver || ' r' || svnver;
	END IF;
	fullver = fullver || '"';
	IF  geosver IS NOT NULL THEN
		fullver = fullver || ' GEOS="' || geosver || '"';
	END IF;
	IF  projver IS NOT NULL THEN
		fullver = fullver || ' PROJ="' || projver || '"';
	END IF;
	IF  gdalver IS NOT NULL THEN
		fullver = fullver || ' GDAL="' || gdalver || '"';
	END IF;
	IF  libxmlver IS NOT NULL THEN
		fullver = fullver || ' LIBXML="' || libxmlver || '"';
	END IF;
	IF json_lib_ver IS NOT NULL THEN
		fullver = fullver || ' LIBJSON="' || json_lib_ver || '"';
	END IF;
	-- fullver = fullver || ' DBPROC="' || dbproc || '"';
	-- fullver = fullver || ' RELPROC="' || relproc || '"';
	IF dbproc != relproc THEN
		fullver = fullver || ' (core procs from "' || dbproc || '" need upgrade)';
	END IF;
	IF topo_scr_ver IS NOT NULL THEN
		fullver = fullver || ' TOPOLOGY';
		IF topo_scr_ver != relproc THEN
			fullver = fullver || ' (topology procs from "' || topo_scr_ver || '" need upgrade)';
		END IF;
	END IF;
	IF rast_lib_ver IS NOT NULL THEN
		fullver = fullver || ' RASTER';
		IF rast_lib_ver != relproc THEN
			fullver = fullver || ' (raster lib from "' || rast_lib_ver || '" need upgrade)';
		END IF;
	END IF;
	IF rast_scr_ver IS NOT NULL AND rast_scr_ver != relproc THEN
		fullver = fullver || ' (raster procs from "' || rast_scr_ver || '" need upgrade)';
	END IF;
	RETURN fullver;
END
$function$
]]></string>
			<comment><![CDATA[Reports full postgis version and build configuration infos.]]></comment>
		</function>
		<function name="postgis_gdal_version" id="Function2000260" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_gdal_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_gdal_version$function$
]]></string>
		</function>
		<function name="postgis_geos_version" id="Function2000260" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_geos_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$postgis_geos_version$function$
]]></string>
			<comment><![CDATA[Returns the version number of the GEOS library.]]></comment>
		</function>
		<function name="postgis_getbbox" id="Function2000261" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_getbbox(geometry)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_to_BOX2D$function$
]]></string>
		</function>
		<function name="postgis_hasbbox" id="Function2000261" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_hasbbox(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_hasBBOX$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns TRUE if the bbox of this geometry is cached, FALSE otherwise.]]></comment>
		</function>
		<function name="postgis_lib_build_date" id="Function2000261" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_lib_build_date()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$postgis_lib_build_date$function$
]]></string>
			<comment><![CDATA[Returns build date of the PostGIS library.]]></comment>
		</function>
		<function name="postgis_lib_version" id="Function2000261" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_lib_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$postgis_lib_version$function$
]]></string>
			<comment><![CDATA[Returns the version number of the PostGIS library.]]></comment>
		</function>
		<function name="postgis_libjson_version" id="Function2000261" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_libjson_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$postgis_libjson_version$function$
]]></string>
		</function>
		<function name="postgis_libxml_version" id="Function2000261" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_libxml_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$postgis_libxml_version$function$
]]></string>
			<comment><![CDATA[Returns the version number of the libxml2 library.]]></comment>
		</function>
		<function name="postgis_noop" id="Function2000261" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_noop(geometry)
 RETURNS geometry
 LANGUAGE c
 STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_noop$function$
]]></string>
		</function>
		<function name="postgis_proj_version" id="Function2000262" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_proj_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$postgis_proj_version$function$
]]></string>
			<comment><![CDATA[Returns the version number of the PROJ4 library.]]></comment>
		</function>
		<function name="postgis_raster_lib_build_date" id="Function2000262" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_raster_lib_build_date()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_lib_build_date$function$
]]></string>
			<comment><![CDATA[Reports full raster library build date.]]></comment>
		</function>
		<function name="postgis_raster_lib_version" id="Function2000262" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_raster_lib_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_lib_version$function$
]]></string>
			<comment><![CDATA[Reports full raster version and build configuration infos.]]></comment>
		</function>
		<function name="postgis_raster_scripts_installed" id="Function2000262" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_raster_scripts_installed()
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT '2.0.2'::text || ' r' || 10789::text AS version $function$
]]></string>
		</function>
		<function name="postgis_scripts_build_date" id="Function2000262" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_scripts_build_date()
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT '2012-12-10 20:43:48'::text AS version$function$
]]></string>
			<comment><![CDATA[Returns build date of the PostGIS scripts.]]></comment>
		</function>
		<function name="postgis_scripts_installed" id="Function2000262" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_scripts_installed()
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT '2.0.2'::text || ' r' || 10789::text AS version $function$
]]></string>
			<comment><![CDATA[Returns version of the postgis scripts installed in this database.]]></comment>
		</function>
		<function name="postgis_scripts_released" id="Function2000263" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_scripts_released()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$postgis_scripts_released$function$
]]></string>
			<comment><![CDATA[Returns the version number of the postgis.sql script released with the installed postgis lib.]]></comment>
		</function>
		<function name="postgis_svn_version" id="Function2000263" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_svn_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$postgis_svn_version$function$
]]></string>
		</function>
		<function name="postgis_transform_geometry" id="Function2000263" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_transform_geometry(geometry, text, text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$transform_geom$function$
]]></string>
		</function>
		<function name="postgis_type_name" id="Function2000263" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean DEFAULT true)
 RETURNS character varying
 LANGUAGE sql
 IMMUTABLE STRICT COST 200
AS $function$
 SELECT CASE WHEN $3 THEN new_name ELSE old_name END As geomname
 	FROM 
 	( VALUES
 		 ('GEOMETRY', 'Geometry', 2) ,
 		 	('GEOMETRY', 'GeometryZ', 3) ,
 		 	('GEOMETRY', 'GeometryZM', 4) ,
			('GEOMETRYCOLLECTION', 'GeometryCollection', 2) ,
			('GEOMETRYCOLLECTION', 'GeometryCollectionZ', 3) ,
			('GEOMETRYCOLLECTIONM', 'GeometryCollectionM', 3) ,
			('GEOMETRYCOLLECTION', 'GeometryCollectionZM', 4) ,
			
			('POINT', 'Point',2) ,
			('POINTM','PointM',3) ,
			('POINT', 'PointZ',3) ,
			('POINT', 'PointZM',4) ,
			
			('MULTIPOINT','MultiPoint',2) ,
			('MULTIPOINT','MultiPointZ',3) ,
			('MULTIPOINTM','MultiPointM',3) ,
			('MULTIPOINT','MultiPointZM',4) ,
			
			('POLYGON', 'Polygon',2) ,
			('POLYGON', 'PolygonZ',3) ,
			('POLYGONM', 'PolygonM',3) ,
			('POLYGON', 'PolygonZM',4) ,
			
			('MULTIPOLYGON', 'MultiPolygon',2) ,
			('MULTIPOLYGON', 'MultiPolygonZ',3) ,
			('MULTIPOLYGONM', 'MultiPolygonM',3) ,
			('MULTIPOLYGON', 'MultiPolygonZM',4) ,
			
			('MULTILINESTRING', 'MultiLineString',2) ,
			('MULTILINESTRING', 'MultiLineStringZ',3) ,
			('MULTILINESTRINGM', 'MultiLineStringM',3) ,
			('MULTILINESTRING', 'MultiLineStringZM',4) ,
			
			('LINESTRING', 'LineString',2) ,
			('LINESTRING', 'LineStringZ',3) ,
			('LINESTRINGM', 'LineStringM',3) ,
			('LINESTRING', 'LineStringZM',4) ,
			
			('CIRCULARSTRING', 'CircularString',2) ,
			('CIRCULARSTRING', 'CircularStringZ',3) ,
			('CIRCULARSTRINGM', 'CircularStringM',3) ,
			('CIRCULARSTRING', 'CircularStringZM',4) ,
			
			('COMPOUNDCURVE', 'CompoundCurve',2) ,
			('COMPOUNDCURVE', 'CompoundCurveZ',3) ,
			('COMPOUNDCURVEM', 'CompoundCurveM',3) ,
			('COMPOUNDCURVE', 'CompoundCurveZM',4) ,
			
			('CURVEPOLYGON', 'CurvePolygon',2) ,
			('CURVEPOLYGON', 'CurvePolygonZ',3) ,
			('CURVEPOLYGONM', 'CurvePolygonM',3) ,
			('CURVEPOLYGON', 'CurvePolygonZM',4) ,
			
			('MULTICURVE', 'MultiCurve',2 ) ,
			('MULTICURVE', 'MultiCurveZ',3 ) ,
			('MULTICURVEM', 'MultiCurveM',3 ) ,
			('MULTICURVE', 'MultiCurveZM',4 ) ,
			
			('MULTISURFACE', 'MultiSurface', 2) ,
			('MULTISURFACE', 'MultiSurfaceZ', 3) ,
			('MULTISURFACEM', 'MultiSurfaceM', 3) ,
			('MULTISURFACE', 'MultiSurfaceZM', 4) ,
			
			('POLYHEDRALSURFACE', 'PolyhedralSurface',2) ,
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZ',3) ,
			('POLYHEDRALSURFACEM', 'PolyhedralSurfaceM',3) ,
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZM',4) ,
			
			('TRIANGLE', 'Triangle',2) ,
			('TRIANGLE', 'TriangleZ',3) ,
			('TRIANGLEM', 'TriangleM',3) ,
			('TRIANGLE', 'TriangleZM',4) ,
			('TIN', 'Tin', 2),
			('TIN', 'TinZ', 3),
			('TIN', 'TinM', 3),
			('TIN', 'TinZM', 4) )
			 As g(old_name, new_name, coord_dimension)
		WHERE (upper(old_name) = upper($1) OR upper(new_name) = upper($1))
			AND coord_dimension = $2;
$function$
]]></string>
		</function>
		<function name="postgis_typmod_dims" id="Function2000263" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_typmod_dims(integer)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$postgis_typmod_dims$function$
]]></string>
		</function>
		<function name="postgis_typmod_srid" id="Function2000263" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_typmod_srid(integer)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$postgis_typmod_srid$function$
]]></string>
		</function>
		<function name="postgis_typmod_type" id="Function2000263" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_typmod_type(integer)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$postgis_typmod_type$function$
]]></string>
		</function>
		<function name="postgis_version" id="Function2000264" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$postgis_version$function$
]]></string>
			<comment><![CDATA[Returns PostGIS version number and compile-time options.]]></comment>
		</function>
		<function name="raster_above" id="Function2000264" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_above(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry |>> $2::geometry$function$
]]></string>
		</function>
		<function name="raster_below" id="Function2000264" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_below(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry <<| $2::geometry$function$
]]></string>
		</function>
		<function name="raster_contain" id="Function2000264" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_contain(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry ~ $2::geometry$function$
]]></string>
		</function>
		<function name="raster_contained" id="Function2000264" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_contained(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry @ $2::geometry$function$
]]></string>
		</function>
		<function name="raster_geometry_contain" id="Function2000264" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_geometry_contain(raster, geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry ~ $2$function$
]]></string>
		</function>
		<function name="raster_geometry_overlap" id="Function2000264" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_geometry_overlap(raster, geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry && $2$function$
]]></string>
		</function>
		<function name="raster_in" id="Function2000264" isSystem="false" />
		<function name="raster_left" id="Function2000264" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_left(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry << $2::geometry$function$
]]></string>
		</function>
		<function name="raster_out" id="Function2000264" isSystem="false" />
		<function name="raster_overabove" id="Function2000264" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overabove(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry |&> $2::geometry$function$
]]></string>
		</function>
		<function name="raster_overbelow" id="Function2000265" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overbelow(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry &<| $2::geometry$function$
]]></string>
		</function>
		<function name="raster_overlap" id="Function2000265" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overlap(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry && $2::geometry$function$
]]></string>
		</function>
		<function name="raster_overleft" id="Function2000265" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overleft(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry &< $2::geometry$function$
]]></string>
		</function>
		<function name="raster_overright" id="Function2000265" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overright(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry &> $2::geometry$function$
]]></string>
		</function>
		<function name="raster_right" id="Function2000265" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_right(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry >> $2::geometry$function$
]]></string>
		</function>
		<function name="raster_same" id="Function2000265" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_same(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry ~= $2::geometry$function$
]]></string>
		</function>
		<function name="spheroid_in" id="Function2000265" isSystem="false" />
		<function name="spheroid_out" id="Function2000265" isSystem="false" />
		<function name="st_3dclosestpoint" id="Function2000265" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dclosestpoint(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$LWGEOM_closestpoint3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 3-dimensional point on g1 that is closest to g2. This is the first point of the 3D shortest line.]]></comment>
		</function>
		<function name="st_3ddfullywithin" id="Function2000265" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_3DDFullyWithin($1, $2, $3)$function$
]]></string>
			<comment><![CDATA[args: g1, g2, distance - Returns true if all of the 3D geometries are within the specified distance of one another.]]></comment>
		</function>
		<function name="st_3ddistance" id="Function2000265" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3ddistance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$LWGEOM_mindistance3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - For geometry type Returns the 3-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units.]]></comment>
		</function>
		<function name="st_3ddwithin" id="Function2000265" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3ddwithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_3DDWithin($1, $2, $3)$function$
]]></string>
			<comment><![CDATA[args: g1, g2, distance_of_srid - For 3d (z) geometry type Returns true if two geometries 3d distance is within number of units.]]></comment>
		</function>
		<function name="st_3dextent" id="Function2000266" isSystem="false" >
			<comment><![CDATA[args: geomfield - an aggregate function that returns the box3D bounding box that bounds rows of geometries.]]></comment>
		</function>
		<function name="st_3dintersects" id="Function2000266" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dintersects(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_3DDWithin($1, $2, 0.0)$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns TRUE if the Geometries "spatially intersect" in 3d - only for points and linestrings]]></comment>
		</function>
		<function name="st_3dlength" id="Function2000266" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dlength(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_length_linestring$function$
]]></string>
			<comment><![CDATA[args: a_3dlinestring - Returns the 3-dimensional or 2-dimensional length of the geometry if it is a linestring or multi-linestring.]]></comment>
		</function>
		<function name="st_3dlength_spheroid" id="Function2000266" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dlength_spheroid(geometry, spheroid)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$LWGEOM_length_ellipsoid_linestring$function$
]]></string>
			<comment><![CDATA[args: a_linestring, a_spheroid - Calculates the length of a geometry on an ellipsoid, taking the elevation into account. This is just an alias for ST_Length_Spheroid.]]></comment>
		</function>
		<function name="st_3dlongestline" id="Function2000266" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dlongestline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$LWGEOM_longestline3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 3-dimensional longest line between two geometries]]></comment>
		</function>
		<function name="st_3dmakebox" id="Function2000266" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dmakebox(geom1 geometry, geom2 geometry)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX3D_construct$function$
]]></string>
			<comment><![CDATA[args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by the given 3d point geometries.]]></comment>
		</function>
		<function name="st_3dmaxdistance" id="Function2000266" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dmaxdistance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$LWGEOM_maxdistance3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - For geometry type Returns the 3-dimensional cartesian maximum distance (based on spatial ref) between two geometries in projected units.]]></comment>
		</function>
		<function name="st_3dperimeter" id="Function2000266" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dperimeter(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_perimeter_poly$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the 3-dimensional perimeter of the geometry, if it is a polygon or multi-polygon.]]></comment>
		</function>
		<function name="st_3dshortestline" id="Function2000267" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dshortestline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$LWGEOM_shortestline3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 3-dimensional shortest line between two geometries]]></comment>
		</function>
		<function name="st_accum" id="Function2000267" isSystem="false" >
			<comment><![CDATA[args: geomfield - Aggregate. Constructs an array of geometries.]]></comment>
		</function>
		<function name="st_addband" id="Function2000267" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addband(torast raster, fromrasts raster[], fromband integer DEFAULT 1)
 RETURNS raster
 LANGUAGE plpgsql
AS $function$
	DECLARE var_result raster := torast;
		var_num integer := array_upper(fromrasts,1);
		var_i integer := 1; 
	BEGIN 
		IF torast IS NULL AND var_num > 0 THEN
			var_result := ST_Band(fromrasts[1],fromband); 
			var_i := 2;
		END IF;
		WHILE var_i <= var_num LOOP
			var_result := ST_AddBand(var_result, fromrasts[var_i], 1);
			var_i := var_i + 1;
		END LOOP;
		
		RETURN var_result;
	END;
$function$
CREATE OR REPLACE FUNCTION public.st_addband(rast raster, pixeltype text, initialvalue double precision DEFAULT 0::numeric, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$select st_addband($1, NULL, $2, $3, $4)$function$
CREATE OR REPLACE FUNCTION public.st_addband(torast raster, fromrast raster, fromband integer DEFAULT 1, torastindex integer DEFAULT NULL::integer)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_copyband$function$
CREATE OR REPLACE FUNCTION public.st_addband(rast raster, index integer, pixeltype text, initialvalue double precision DEFAULT 0::numeric, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_addband$function$
]]></string>
			<comment><![CDATA[args: rast, index, pixeltype, initialvalue=0, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
		</function>
		<function name="st_addband_001" id="Function2000267" isSystem="false" >
			<comment><![CDATA[args: rast, pixeltype, initialvalue=0, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
		</function>
		<function name="st_addband_002" id="Function2000267" isSystem="false" >
			<comment><![CDATA[args: torast, fromrast, fromband=1, torastindex=at_end - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
		</function>
		<function name="st_addband_003" id="Function2000267" isSystem="false" >
			<comment><![CDATA[args: torast, fromrasts, fromband=1 - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
		</function>
		<function name="st_addmeasure" id="Function2000267" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addmeasure(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$ST_AddMeasure$function$
]]></string>
			<comment><![CDATA[args: geom_mline, measure_start, measure_end - Return a derived geometry with measure elements linearly interpolated between the start and end points. If the geometry has no measure dimension, one is added. If the geometry has a measure dimension, it is over-written with new values. Only LINESTRINGS and MULTILINESTRINGS are supported.]]></comment>
		</function>
		<function name="st_addpoint" id="Function2000267" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addpoint(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_addpoint$function$
CREATE OR REPLACE FUNCTION public.st_addpoint(geom1 geometry, geom2 geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_addpoint$function$
]]></string>
			<comment><![CDATA[args: linestring, point - Adds a point to a LineString before point <position> (0-based index).]]></comment>
		</function>
		<function name="st_addpoint_001" id="Function2000267" isSystem="false" >
			<comment><![CDATA[args: linestring, point, position - Adds a point to a LineString before point <position> (0-based index).]]></comment>
		</function>
		<function name="st_affine" id="Function2000267" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)$function$
CREATE OR REPLACE FUNCTION public.st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_affine$function$
]]></string>
			<comment><![CDATA[args: geomA, a, b, c, d, e, f, g, h, i, xoff, yoff, zoff - Applies a 3d affine transformation to the geometry to do things like translate, rotate, scale in one step.]]></comment>
		</function>
		<function name="st_affine_001" id="Function2000268" isSystem="false" >
			<comment><![CDATA[args: geomA, a, b, d, e, xoff, yoff - Applies a 3d affine transformation to the geometry to do things like translate, rotate, scale in one step.]]></comment>
		</function>
		<function name="st_approxcount" id="Function2000268" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxcount(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_count($1, $2, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_approxcount(rast raster, nband integer, sample_percent double precision)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_count($1, $2, TRUE, $3) $function$
CREATE OR REPLACE FUNCTION public.st_approxcount(rast raster, exclude_nodata_value boolean, sample_percent double precision DEFAULT 0.1)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_count($1, 1, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_approxcount(rast raster, sample_percent double precision)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_count($1, 1, TRUE, $2) $function$
CREATE OR REPLACE FUNCTION public.st_approxcount(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_count($1, $2, $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_approxcount(rastertable text, rastercolumn text, exclude_nodata_value boolean, sample_percent double precision DEFAULT 0.1)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_count($1, $2, 1, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_approxcount(rastertable text, rastercolumn text, sample_percent double precision)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_count($1, $2, 1, TRUE, $3) $function$
CREATE OR REPLACE FUNCTION public.st_approxcount(rastertable text, rastercolumn text, nband integer, sample_percent double precision)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_count($1, $2, $3, TRUE, $4) $function$
]]></string>
		</function>
		<function name="st_approxcount_001" id="Function2000268" isSystem="false" />
		<function name="st_approxcount_002" id="Function2000268" isSystem="false" />
		<function name="st_approxcount_003" id="Function2000268" isSystem="false" />
		<function name="st_approxcount_004" id="Function2000268" isSystem="false" />
		<function name="st_approxcount_005" id="Function2000268" isSystem="false" />
		<function name="st_approxcount_006" id="Function2000268" isSystem="false" />
		<function name="st_approxcount_007" id="Function2000268" isSystem="false" />
		<function name="st_approxhistogram" id="Function2000268" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer, sample_percent double precision)
 RETURNS SETOF histogram
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, $3, 0, NULL, FALSE) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, sample_percent double precision)
 RETURNS SETOF histogram
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, 1, TRUE, $2, 0, NULL, FALSE) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false)
 RETURNS SETOF histogram
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, $3, $4, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, "right" boolean)
 RETURNS SETOF histogram
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, $3, $4, NULL, $5) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false)
 RETURNS SETOF histogram
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_histogram($1, $2, $3, $4, $5, $6, $7, $8) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision)
 RETURNS SETOF histogram
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_histogram($1, $2, $3, TRUE, $4, 0, NULL, FALSE) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, sample_percent double precision)
 RETURNS SETOF histogram
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_histogram($1, $2, 1, TRUE, $3, 0, NULL, FALSE) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false)
 RETURNS SETOF histogram
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_histogram($1, $2, $3, TRUE, $4, $5, $6, $7) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, "right" boolean)
 RETURNS SETOF histogram
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_histogram($1, $2, $3, TRUE, $4, $5, NULL, $6) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false)
 RETURNS SETOF histogram
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, $4, $5, $6, $7) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean)
 RETURNS SETOF histogram
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, $4, $5, NULL, $6) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean)
 RETURNS SETOF histogram
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_histogram($1, $2, $3, $4, $5, $6, NULL, $7) $function$
]]></string>
		</function>
		<function name="st_approxhistogram_001" id="Function2000268" isSystem="false" />
		<function name="st_approxhistogram_002" id="Function2000268" isSystem="false" />
		<function name="st_approxhistogram_003" id="Function2000268" isSystem="false" />
		<function name="st_approxhistogram_004" id="Function2000268" isSystem="false" />
		<function name="st_approxhistogram_005" id="Function2000268" isSystem="false" />
		<function name="st_approxhistogram_006" id="Function2000269" isSystem="false" />
		<function name="st_approxhistogram_007" id="Function2000269" isSystem="false" />
		<function name="st_approxhistogram_008" id="Function2000269" isSystem="false" />
		<function name="st_approxhistogram_009" id="Function2000269" isSystem="false" />
		<function name="st_approxhistogram_010" id="Function2000269" isSystem="false" />
		<function name="st_approxhistogram_011" id="Function2000269" isSystem="false" />
		<function name="st_approxquantile" id="Function2000269" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, quantiles double precision[] DEFAULT NULL::double precision[])
 RETURNS SETOF quantile
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _st_quantile($1, $2, $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, nband integer, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[])
 RETURNS SETOF quantile
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _st_quantile($1, $2, TRUE, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[])
 RETURNS SETOF quantile
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _st_quantile($1, 1, TRUE, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, quantiles double precision[])
 RETURNS SETOF quantile
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_quantile($1, 1, TRUE, 0.1, $2) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, $3, $4, ARRAY[$5]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, nband integer, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, TRUE, $3, ARRAY[$4]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_quantile($1, 1, TRUE, $2, ARRAY[$3]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT (_st_quantile($1, 1, $2, 0.1, ARRAY[$3]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT (_st_quantile($1, 1, TRUE, 0.1, ARRAY[$2]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, quantiles double precision[] DEFAULT NULL::double precision[])
 RETURNS SETOF quantile
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_quantile($1, $2, $3, $4, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[])
 RETURNS SETOF quantile
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_quantile($1, $2, $3, TRUE, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[])
 RETURNS SETOF quantile
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_quantile($1, $2, 1, TRUE, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, $3, $4, $5, ARRAY[$6]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, $3, TRUE, $4, ARRAY[$5]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, 1, TRUE, $3, ARRAY[$4]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE
AS $function$ SELECT (_st_quantile($1, $2, 1, $3, 0.1, ARRAY[$4]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE
AS $function$ SELECT (_st_quantile($1, $2, 1, TRUE, 0.1, ARRAY[$3]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, quantiles double precision[])
 RETURNS SETOF quantile
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_quantile($1, $2, 1, TRUE, 0.1, $3) $function$
]]></string>
		</function>
		<function name="st_approxquantile_001" id="Function2000269" isSystem="false" />
		<function name="st_approxquantile_002" id="Function2000269" isSystem="false" />
		<function name="st_approxquantile_003" id="Function2000269" isSystem="false" />
		<function name="st_approxquantile_004" id="Function2000269" isSystem="false" />
		<function name="st_approxquantile_005" id="Function2000269" isSystem="false" />
		<function name="st_approxquantile_006" id="Function2000269" isSystem="false" />
		<function name="st_approxquantile_007" id="Function2000269" isSystem="false" />
		<function name="st_approxquantile_008" id="Function2000269" isSystem="false" />
		<function name="st_approxquantile_009" id="Function2000269" isSystem="false" />
		<function name="st_approxquantile_010" id="Function2000269" isSystem="false" />
		<function name="st_approxquantile_011" id="Function2000270" isSystem="false" />
		<function name="st_approxquantile_012" id="Function2000270" isSystem="false" />
		<function name="st_approxquantile_013" id="Function2000270" isSystem="false" />
		<function name="st_approxquantile_014" id="Function2000270" isSystem="false" />
		<function name="st_approxquantile_015" id="Function2000270" isSystem="false" />
		<function name="st_approxquantile_016" id="Function2000270" isSystem="false" />
		<function name="st_approxquantile_017" id="Function2000270" isSystem="false" />
		<function name="st_approxsummarystats" id="Function2000270" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1)
 RETURNS summarystats
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rast raster, nband integer, sample_percent double precision)
 RETURNS summarystats
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, TRUE, $3) $function$
CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rast raster, exclude_nodata_value boolean, sample_percent double precision DEFAULT 0.1)
 RETURNS summarystats
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_summarystats($1, 1, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rast raster, sample_percent double precision)
 RETURNS summarystats
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_summarystats($1, 1, TRUE, $2) $function$
CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1)
 RETURNS summarystats
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rastertable text, rastercolumn text, nband integer, sample_percent double precision)
 RETURNS summarystats
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, $3, TRUE, $4) $function$
CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean)
 RETURNS summarystats
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, 1, $3, 0.1) $function$
CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rastertable text, rastercolumn text, sample_percent double precision)
 RETURNS summarystats
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, 1, TRUE, $3) $function$
]]></string>
		</function>
		<function name="st_approxsummarystats_001" id="Function2000270" isSystem="false" />
		<function name="st_approxsummarystats_002" id="Function2000270" isSystem="false" />
		<function name="st_approxsummarystats_003" id="Function2000270" isSystem="false" />
		<function name="st_approxsummarystats_004" id="Function2000270" isSystem="false" />
		<function name="st_approxsummarystats_005" id="Function2000270" isSystem="false" />
		<function name="st_approxsummarystats_006" id="Function2000270" isSystem="false" />
		<function name="st_approxsummarystats_007" id="Function2000270" isSystem="false" />
		<function name="st_area" id="Function2000271" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_area(text)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_Area($1::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_area(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_area_polygon$function$
CREATE OR REPLACE FUNCTION public.st_area(geog geography, use_spheroid boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$geography_area$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns the area of the surface if it is a polygon or multi-polygon. For "geometry" type area is in SRID units. For "geography" area is in square meters.]]></comment>
		</function>
		<function name="st_area_001" id="Function2000271" isSystem="false" >
			<comment><![CDATA[args: geog, use_spheroid=true - Returns the area of the surface if it is a polygon or multi-polygon. For "geometry" type area is in SRID units. For "geography" area is in square meters.]]></comment>
		</function>
		<function name="st_area_002" id="Function2000271" isSystem="false" />
		<function name="st_area2d" id="Function2000271" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_area2d(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_area_polygon$function$
]]></string>
		</function>
		<function name="st_asbinary" id="Function2000271" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asbinary(geometry)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_asBinary$function$
CREATE OR REPLACE FUNCTION public.st_asbinary(geography)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_asBinary$function$
CREATE OR REPLACE FUNCTION public.st_asbinary(raster)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_to_binary$function$
CREATE OR REPLACE FUNCTION public.st_asbinary(geometry, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_asBinary$function$
CREATE OR REPLACE FUNCTION public.st_asbinary(geography, text)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_AsBinary($1::geometry, $2);  $function$
]]></string>
			<comment><![CDATA[args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
		</function>
		<function name="st_asbinary_001" id="Function2000271" isSystem="false" >
			<comment><![CDATA[args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
		</function>
		<function name="st_asbinary_002" id="Function2000271" isSystem="false" >
			<comment><![CDATA[args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
		</function>
		<function name="st_asbinary_003" id="Function2000271" isSystem="false" >
			<comment><![CDATA[args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
		</function>
		<function name="st_asbinary_004" id="Function2000271" isSystem="false" >
			<comment><![CDATA[args: rast - Return the Well-Known Binary (WKB) representation of the raster without SRID meta data.]]></comment>
		</function>
		<function name="st_asewkb" id="Function2000271" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asewkb(geometry)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$WKBFromLWGEOM$function$
CREATE OR REPLACE FUNCTION public.st_asewkb(geometry, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$WKBFromLWGEOM$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.]]></comment>
		</function>
		<function name="st_asewkb_001" id="Function2000271" isSystem="false" >
			<comment><![CDATA[args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.]]></comment>
		</function>
		<function name="st_asewkt" id="Function2000272" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asewkt(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_AsEWKT($1::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_asewkt(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_asEWKT$function$
CREATE OR REPLACE FUNCTION public.st_asewkt(geography)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_asEWKT$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.]]></comment>
		</function>
		<function name="st_asewkt_001" id="Function2000272" isSystem="false" >
			<comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.]]></comment>
		</function>
		<function name="st_asewkt_002" id="Function2000272" isSystem="false" />
		<function name="st_asgdalraster" id="Function2000272" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgdalraster(rast raster, format text, options text[] DEFAULT NULL::text[], srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_asGDALRaster$function$
]]></string>
			<comment><![CDATA[args: rast, format, options=NULL, srid=sameassource - Return the raster tile in the designated GDAL Raster format. Raster formats are one of those supported by your compiled library. Use ST_GDALRasters() to get a list of formats supported by your library.]]></comment>
		</function>
		<function name="st_asgeojson" id="Function2000272" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgeojson(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsGeoJson(1, $1::geometry,15,0);  $function$
CREATE OR REPLACE FUNCTION public.st_asgeojson(geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsGeoJson(1, $1, $2, $3); $function$
CREATE OR REPLACE FUNCTION public.st_asgeojson(geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsGeoJson(1, $1, $2, $3); $function$
CREATE OR REPLACE FUNCTION public.st_asgeojson(gj_version integer, geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsGeoJson($1, $2, $3, $4); $function$
CREATE OR REPLACE FUNCTION public.st_asgeojson(gj_version integer, geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsGeoJson($1, $2, $3, $4); $function$
]]></string>
			<comment><![CDATA[args: geom, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
		</function>
		<function name="st_asgeojson_001" id="Function2000272" isSystem="false" >
			<comment><![CDATA[args: gj_version, geom, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
		</function>
		<function name="st_asgeojson_002" id="Function2000272" isSystem="false" />
		<function name="st_asgeojson_003" id="Function2000272" isSystem="false" >
			<comment><![CDATA[args: geog, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
		</function>
		<function name="st_asgeojson_004" id="Function2000272" isSystem="false" >
			<comment><![CDATA[args: gj_version, geog, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
		</function>
		<function name="st_asgml" id="Function2000272" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgml(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsGML(2,$1::geometry,15,0, NULL);  $function$
CREATE OR REPLACE FUNCTION public.st_asgml(geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsGML(2, $1, $2, $3, null); $function$
CREATE OR REPLACE FUNCTION public.st_asgml(geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_AsGML(2, $1, $2, $3, null)$function$
CREATE OR REPLACE FUNCTION public.st_asgml(version integer, geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0, nprefix text DEFAULT NULL::text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _ST_AsGML($1, $2, $3, $4,$5); $function$
CREATE OR REPLACE FUNCTION public.st_asgml(version integer, geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0, nprefix text DEFAULT NULL::text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _ST_AsGML($1, $2, $3, $4, $5);$function$
]]></string>
			<comment><![CDATA[args: geom, maxdecimaldigits=15, options=0 - Return the geometry as a GML version 2 or 3 element.]]></comment>
		</function>
		<function name="st_asgml_001" id="Function2000272" isSystem="false" >
			<comment><![CDATA[args: version, geom, maxdecimaldigits=15, options=0, nprefix=null - Return the geometry as a GML version 2 or 3 element.]]></comment>
		</function>
		<function name="st_asgml_002" id="Function2000273" isSystem="false" />
		<function name="st_asgml_003" id="Function2000273" isSystem="false" >
			<comment><![CDATA[args: geog, maxdecimaldigits=15, options=0 - Return the geometry as a GML version 2 or 3 element.]]></comment>
		</function>
		<function name="st_asgml_004" id="Function2000273" isSystem="false" >
			<comment><![CDATA[args: version, geog, maxdecimaldigits=15, options=0, nprefix=null - Return the geometry as a GML version 2 or 3 element.]]></comment>
		</function>
		<function name="st_ashexewkb" id="Function2000273" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ashexewkb(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_asHEXEWKB$function$
CREATE OR REPLACE FUNCTION public.st_ashexewkb(geometry, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_asHEXEWKB$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.]]></comment>
		</function>
		<function name="st_ashexewkb_001" id="Function2000273" isSystem="false" >
			<comment><![CDATA[args: g1, NDRorXDR - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.]]></comment>
		</function>
		<function name="st_asjpeg" id="Function2000273" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		rast2 raster;
		num_bands int;
		i int;
	BEGIN
		num_bands := st_numbands($1);
		-- JPEG allows 1 or 3 bands
		IF num_bands <> 1 AND num_bands <> 3 THEN
			RAISE NOTICE 'The JPEG format only permits one or three bands.  The first band will be used.';
			rast2 := st_band(rast, ARRAY[1]);
			num_bands := st_numbands(rast);
		ELSE
			rast2 := rast;
		END IF;
		-- JPEG only supports 8BUI pixeltype
		FOR i IN 1..num_bands LOOP
			IF st_bandpixeltype(rast, i) != '8BUI' THEN
				RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI.  The JPEG format can only be used with the 8BUI pixel type.', i;
			END IF;
		END LOOP;
		RETURN st_asgdalraster(rast2, 'JPEG', $2, NULL);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, nband integer, quality integer)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_asjpeg($1, ARRAY[$2], $3) $function$
CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, nband integer, options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_asjpeg(st_band($1, $2), $3) $function$
CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, nbands integer[], quality integer)
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		quality2 int;
		options text[];
	BEGIN
		IF quality IS NOT NULL THEN
			IF quality > 100 THEN
				quality2 := 100;
			ELSEIF quality < 10 THEN
				quality2 := 10;
			ELSE
				quality2 := quality;
			END IF;
			options := array_append(options, 'QUALITY=' || quality2);
		END IF;
		RETURN st_asjpeg(st_band($1, $2), options);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, nbands integer[], options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_asjpeg(st_band($1, $2), $3) $function$
]]></string>
			<comment><![CDATA[args: rast, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
		</function>
		<function name="st_asjpeg_001" id="Function2000273" isSystem="false" >
			<comment><![CDATA[args: rast, nbands, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
		</function>
		<function name="st_asjpeg_002" id="Function2000273" isSystem="false" >
			<comment><![CDATA[args: rast, nbands, quality - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
		</function>
		<function name="st_asjpeg_003" id="Function2000273" isSystem="false" >
			<comment><![CDATA[args: rast, nband, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
		</function>
		<function name="st_asjpeg_004" id="Function2000273" isSystem="false" >
			<comment><![CDATA[args: rast, nband, quality - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
		</function>
		<function name="st_askml" id="Function2000273" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_askml(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsKML(2, $1::geometry, 15, null);  $function$
CREATE OR REPLACE FUNCTION public.st_askml(geom geometry, maxdecimaldigits integer DEFAULT 15)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsKML(2, ST_Transform($1,4326), $2, null); $function$
CREATE OR REPLACE FUNCTION public.st_askml(geog geography, maxdecimaldigits integer DEFAULT 15)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_AsKML(2, $1, $2, null)$function$
CREATE OR REPLACE FUNCTION public.st_askml(version integer, geom geometry, maxdecimaldigits integer DEFAULT 15, nprefix text DEFAULT NULL::text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _ST_AsKML($1, ST_Transform($2,4326), $3, $4); $function$
CREATE OR REPLACE FUNCTION public.st_askml(version integer, geog geography, maxdecimaldigits integer DEFAULT 15, nprefix text DEFAULT NULL::text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT _ST_AsKML($1, $2, $3, $4)$function$
]]></string>
			<comment><![CDATA[args: geom, maxdecimaldigits=15 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15]]></comment>
		</function>
		<function name="st_askml_001" id="Function2000274" isSystem="false" >
			<comment><![CDATA[args: version, geom, maxdecimaldigits=15, nprefix=NULL - Return the geometry as a KML element. Several variants. Default version=2, default precision=15]]></comment>
		</function>
		<function name="st_askml_002" id="Function2000274" isSystem="false" >
			<comment><![CDATA[args: geog, maxdecimaldigits=15 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15]]></comment>
		</function>
		<function name="st_askml_003" id="Function2000274" isSystem="false" />
		<function name="st_askml_004" id="Function2000274" isSystem="false" >
			<comment><![CDATA[args: version, geog, maxdecimaldigits=15, nprefix=NULL - Return the geometry as a KML element. Several variants. Default version=2, default precision=15]]></comment>
		</function>
		<function name="st_aslatlontext" id="Function2000274" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_aslatlontext(geometry)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_AsLatLonText($1, '') $function$
CREATE OR REPLACE FUNCTION public.st_aslatlontext(geometry, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_to_latlon$function$
]]></string>
			<comment><![CDATA[args: pt, format - Return the Degrees, Minutes, Seconds representation of the given point.]]></comment>
		</function>
		<function name="st_aslatlontext_001" id="Function2000274" isSystem="false" >
			<comment><![CDATA[args: pt - Return the Degrees, Minutes, Seconds representation of the given point.]]></comment>
		</function>
		<function name="st_aspect" id="Function2000274" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_aspect(rast raster, band integer, pixeltype text)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_mapalgebrafctngb($1, $2, $3, 1, 1, '_st_aspect4ma(float[][], text, text[])'::regprocedure, 'value', st_pixelwidth($1)::text, st_pixelheight($1)::text) $function$
]]></string>
			<comment><![CDATA[args: rast, band, pixeltype - Returns the surface aspect of an elevation raster band. Useful for analyzing terrain.]]></comment>
		</function>
		<function name="st_aspng" id="Function2000274" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		rast2 raster;
		num_bands int;
		i int;
		pt text;
	BEGIN
		num_bands := st_numbands($1);
		-- PNG allows 1, 3 or 4 bands
		IF num_bands <> 1 AND num_bands <> 3 AND num_bands <> 4 THEN
			RAISE NOTICE 'The PNG format only permits one, three or four bands.  The first band will be used.';
			rast2 := st_band($1, ARRAY[1]);
			num_bands := st_numbands(rast2);
		ELSE
			rast2 := rast;
		END IF;
		-- PNG only supports 8BUI and 16BUI pixeltype
		FOR i IN 1..num_bands LOOP
			pt = st_bandpixeltype(rast, i);
			IF pt != '8BUI' AND pt != '16BUI' THEN
				RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI or 16BUI.  The PNG format can only be used with 8BUI and 16BUI pixel types.', i;
			END IF;
		END LOOP;
		RETURN st_asgdalraster(rast2, 'PNG', $2, NULL);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, nband integer, compression integer)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_aspng($1, ARRAY[$2], $3) $function$
CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, nband integer, options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_aspng(st_band($1, $2), $3) $function$
CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, nbands integer[], compression integer)
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		compression2 int;
		options text[];
	BEGIN
		IF compression IS NOT NULL THEN
			IF compression > 9 THEN
				compression2 := 9;
			ELSEIF compression < 1 THEN
				compression2 := 1;
			ELSE
				compression2 := compression;
			END IF;
			options := array_append(options, 'ZLEVEL=' || compression2);
		END IF;
		RETURN st_aspng(st_band($1, $2), options);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, nbands integer[], options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_aspng(st_band($1, $2), $3) $function$
]]></string>
			<comment><![CDATA[args: rast, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
		</function>
		<function name="st_aspng_001" id="Function2000274" isSystem="false" >
			<comment><![CDATA[args: rast, nbands, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
		</function>
		<function name="st_aspng_002" id="Function2000275" isSystem="false" >
			<comment><![CDATA[args: rast, nbands, compression - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
		</function>
		<function name="st_aspng_003" id="Function2000275" isSystem="false" >
			<comment><![CDATA[args: rast, nband, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
		</function>
		<function name="st_aspng_004" id="Function2000275" isSystem="false" >
			<comment><![CDATA[args: rast, nband, compression - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
		</function>
		<function name="st_asraster" id="Function2000275" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, $2, $3, NULL, NULL, $6, $7, $8, NULL, NULL, $4, $5, $9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, $2, $3, NULL, NULL, $4, $5, $6, $7, $8, NULL, NULL,	$9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, width integer, height integer, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, NULL, NULL, $2, $3, $6, $7, $8, NULL, NULL, $4, $5, $9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, width integer, height integer, pixeltype text[], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, NULL, NULL, $2, $3, $4, $5, $6, $7, $8, NULL, NULL,	$9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, $2, $3, NULL, NULL, ARRAY[$6]::text[], ARRAY[$7]::double precision[], ARRAY[$8]::double precision[], NULL, NULL, $4, $5, $9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, $2, $3, NULL, NULL, ARRAY[$4]::text[], ARRAY[$5]::double precision[], ARRAY[$6]::double precision[], $7, $8, NULL, NULL, $9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, NULL, NULL, $2, $3, ARRAY[$6]::text[], ARRAY[$7]::double precision[], ARRAY[$8]::double precision[], NULL, NULL, $4, $5, $9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, width integer, height integer, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, NULL, NULL, $2, $3, ARRAY[$4]::text[], ARRAY[$5]::double precision[], ARRAY[$6]::double precision[], $7, $8, NULL, NULL,$9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, ref raster, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 STABLE
AS $function$
	DECLARE
		g geometry;
		g_srid integer;
		ul_x double precision;
		ul_y double precision;
		scale_x double precision;
		scale_y double precision;
		skew_x double precision;
		skew_y double precision;
		sr_id integer;
	BEGIN
		SELECT upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid INTO ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id FROM ST_Metadata(ref);
		--RAISE NOTICE '%, %, %, %, %, %, %', ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id;
		-- geometry and raster has different SRID
		g_srid := ST_SRID(geom);
		IF g_srid != sr_id THEN
			RAISE NOTICE 'The geometry''s SRID (%) is not the same as the raster''s SRID (%).  The geometry will be transformed to the raster''s projection', g_srid, sr_id;
			g := ST_Transform(geom, sr_id);
		ELSE
			g := geom;
		END IF;
		RETURN _st_asraster(g, scale_x, scale_y, NULL, NULL, $3, $4, $5, NULL, NULL, ul_x, ul_y, skew_x, skew_y, $6);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, ref raster, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_asraster($1, $2, ARRAY[$3]::text[], ARRAY[$4]::double precision[], ARRAY[$5]::double precision[], $6) $function$
]]></string>
			<comment><![CDATA[args: geom, scalex, scaley, gridx=NULL, gridy=NULL, pixeltype=ARRAY['8BUI'], value=ARRAY[1], nodataval=ARRAY[0], skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_001" id="Function2000275" isSystem="false" >
			<comment><![CDATA[args: geom, scalex, scaley, pixeltype, value=ARRAY[1], nodataval=ARRAY[0], upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_002" id="Function2000275" isSystem="false" >
			<comment><![CDATA[args: geom, width, height, gridx=NULL, gridy=NULL, pixeltype=ARRAY['8BUI'], value=ARRAY[1], nodataval=ARRAY[0], skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_003" id="Function2000275" isSystem="false" >
			<comment><![CDATA[args: geom, width, height, pixeltype, value=ARRAY[1], nodataval=ARRAY[0], upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_004" id="Function2000275" isSystem="false" >
			<comment><![CDATA[args: geom, scalex, scaley, gridx, gridy, pixeltype, value=1, nodataval=0, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_005" id="Function2000275" isSystem="false" >
			<comment><![CDATA[args: geom, scalex, scaley, pixeltype, value=1, nodataval=0, upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_006" id="Function2000276" isSystem="false" >
			<comment><![CDATA[args: geom, width, height, gridx, gridy, pixeltype, value=1, nodataval=0, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_007" id="Function2000276" isSystem="false" >
			<comment><![CDATA[args: geom, width, height, pixeltype, value=1, nodataval=0, upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_008" id="Function2000276" isSystem="false" >
			<comment><![CDATA[args: geom, ref, pixeltype=ARRAY['8BUI'], value=ARRAY[1], nodataval=ARRAY[0], touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_009" id="Function2000276" isSystem="false" >
			<comment><![CDATA[args: geom, ref, pixeltype, value=1, nodataval=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_assvg" id="Function2000276" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_assvg(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_AsSVG($1::geometry,0,15);  $function$
CREATE OR REPLACE FUNCTION public.st_assvg(geom geometry, rel integer DEFAULT 0, maxdecimaldigits integer DEFAULT 15)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_asSVG$function$
CREATE OR REPLACE FUNCTION public.st_assvg(geog geography, rel integer DEFAULT 0, maxdecimaldigits integer DEFAULT 15)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_as_svg$function$
]]></string>
			<comment><![CDATA[args: geom, rel=0, maxdecimaldigits=15 - Returns a Geometry in SVG path data given a geometry or geography object.]]></comment>
		</function>
		<function name="st_assvg_001" id="Function2000276" isSystem="false" >
			<comment><![CDATA[args: geog, rel=0, maxdecimaldigits=15 - Returns a Geometry in SVG path data given a geometry or geography object.]]></comment>
		</function>
		<function name="st_assvg_002" id="Function2000276" isSystem="false" />
		<function name="st_astext" id="Function2000277" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_astext(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_AsText($1::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_astext(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_asText$function$
CREATE OR REPLACE FUNCTION public.st_astext(geography)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_asText$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.]]></comment>
		</function>
		<function name="st_astext_001" id="Function2000277" isSystem="false" >
			<comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.]]></comment>
		</function>
		<function name="st_astext_002" id="Function2000277" isSystem="false" />
		<function name="st_astiff" id="Function2000277" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_astiff(rast raster, compression text, srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		compression2 text;
		c_type text;
		c_level int;
		i int;
		num_bands int;
		options text[];
	BEGIN
		compression2 := trim(both from upper(compression));
		IF length(compression2) > 0 THEN
			-- JPEG
			IF position('JPEG' in compression2) != 0 THEN
				c_type := 'JPEG';
				c_level := substring(compression2 from '[0-9]+$');
				IF c_level IS NOT NULL THEN
					IF c_level > 100 THEN
						c_level := 100;
					ELSEIF c_level < 1 THEN
						c_level := 1;
					END IF;
					options := array_append(options, 'JPEG_QUALITY=' || c_level);
				END IF;
				-- per band pixel type check
				num_bands := st_numbands($1);
				FOR i IN 1..num_bands LOOP
					IF st_bandpixeltype($1, i) != '8BUI' THEN
						RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI.  JPEG compression can only be used with the 8BUI pixel type.', i;
					END IF;
				END LOOP;
			-- DEFLATE
			ELSEIF position('DEFLATE' in compression2) != 0 THEN
				c_type := 'DEFLATE';
				c_level := substring(compression2 from '[0-9]+$');
				IF c_level IS NOT NULL THEN
					IF c_level > 9 THEN
						c_level := 9;
					ELSEIF c_level < 1 THEN
						c_level := 1;
					END IF;
					options := array_append(options, 'ZLEVEL=' || c_level);
				END IF;
			ELSE
				c_type := compression2;
				-- CCITT
				IF position('CCITT' in compression2) THEN
					-- per band pixel type check
					num_bands := st_numbands($1);
					FOR i IN 1..num_bands LOOP
						IF st_bandpixeltype($1, i) != '1BB' THEN
							RAISE EXCEPTION 'The pixel type of band % in the raster is not 1BB.  CCITT compression can only be used with the 1BB pixel type.', i;
						END IF;
					END LOOP;
				END IF;
			END IF;
			-- compression type check
			IF ARRAY[c_type] <@ ARRAY['JPEG', 'LZW', 'PACKBITS', 'DEFLATE', 'CCITTRLE', 'CCITTFAX3', 'CCITTFAX4', 'NONE'] THEN
				options := array_append(options, 'COMPRESS=' || c_type);
			ELSE
				RAISE NOTICE 'Unknown compression type: %.  The outputted TIFF will not be COMPRESSED.', c_type;
			END IF;
		END IF;
		RETURN st_astiff($1, options, $3);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_astiff(rast raster, options text[] DEFAULT NULL::text[], srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		i int;
		num_bands int;
		nodata double precision;
		last_nodata double precision;
	BEGIN
		num_bands := st_numbands($1);
		-- TIFF only allows one NODATA value for ALL bands
		FOR i IN 1..num_bands LOOP
			nodata := st_bandnodatavalue($1, i);
			IF last_nodata IS NULL THEN
				last_nodata := nodata;
			ELSEIF nodata != last_nodata THEN
				RAISE NOTICE 'The TIFF format only permits one NODATA value for all bands.  The value used will be the last band with a NODATA value.';
			END IF;
		END LOOP;
		RETURN st_asgdalraster($1, 'GTiff', $2, $3);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_astiff(rast raster, nbands integer[], compression text, srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_astiff(st_band($1, $2), $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_astiff(rast raster, nbands integer[], options text[] DEFAULT NULL::text[], srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_astiff(st_band($1, $2), $3, $4) $function$
]]></string>
			<comment><![CDATA[args: rast, options=', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.]]></comment>
		</function>
		<function name="st_astiff_001" id="Function2000277" isSystem="false" >
			<comment><![CDATA[args: rast, nbands, options, srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.]]></comment>
		</function>
		<function name="st_astiff_002" id="Function2000277" isSystem="false" >
			<comment><![CDATA[args: rast, compression=', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.]]></comment>
		</function>
		<function name="st_astiff_003" id="Function2000278" isSystem="false" >
			<comment><![CDATA[args: rast, nbands, compression=', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.]]></comment>
		</function>
		<function name="st_asx3d" id="Function2000278" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asx3d(geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT _ST_AsX3D(3,$1,$2,$3,'');$function$
]]></string>
			<comment><![CDATA[args: g1, maxdecimaldigits=15, options=0 - Returns a Geometry in X3D xml node element format: ISO-IEC-19776-1.2-X3DEncodings-XML]]></comment>
		</function>
		<function name="st_azimuth" id="Function2000278" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_azimuth(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_azimuth$function$
CREATE OR REPLACE FUNCTION public.st_azimuth(geog1 geography, geog2 geography)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$geography_azimuth$function$
]]></string>
			<comment><![CDATA[args: pointA, pointB - Returns the angle in radians from the horizontal of the vector defined by pointA and pointB. Angle is computed clockwise from down-to-up: on the clock: 12=0; 3=PI/2; 6=PI; 9=3PI/2.]]></comment>
		</function>
		<function name="st_azimuth_001" id="Function2000278" isSystem="false" >
			<comment><![CDATA[args: pointA, pointB - Returns the angle in radians from the horizontal of the vector defined by pointA and pointB. Angle is computed clockwise from down-to-up: on the clock: 12=0; 3=PI/2; 6=PI; 9=3PI/2.]]></comment>
		</function>
		<function name="st_band" id="Function2000278" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_band(rast raster, nband integer)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_band($1, ARRAY[$2]) $function$
CREATE OR REPLACE FUNCTION public.st_band(rast raster, nbands integer[] DEFAULT ARRAY[1])
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_band$function$
CREATE OR REPLACE FUNCTION public.st_band(rast raster, nbands text, delimiter character DEFAULT ','::bpchar)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_band($1, regexp_split_to_array(regexp_replace($2, '[[:space:]]', '', 'g'), $3)::int[]) $function$
]]></string>
			<comment><![CDATA[args: rast, nbands = ARRAY[1] - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.]]></comment>
		</function>
		<function name="st_band_001" id="Function2000278" isSystem="false" >
			<comment><![CDATA[args: rast, nband - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.]]></comment>
		</function>
		<function name="st_band_002" id="Function2000278" isSystem="false" >
			<comment><![CDATA[args: rast, nbands, delimiter=, - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.]]></comment>
		</function>
		<function name="st_bandisnodata" id="Function2000278" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandisnodata(rast raster, forcechecking boolean)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_bandisnodata($1, 1, $2) $function$
CREATE OR REPLACE FUNCTION public.st_bandisnodata(rast raster, band integer DEFAULT 1, forcechecking boolean DEFAULT false)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_bandIsNoData$function$
]]></string>
			<comment><![CDATA[args: rast, band, forceChecking=true - Returns true if the band is filled with only nodata values.]]></comment>
		</function>
		<function name="st_bandisnodata_001" id="Function2000278" isSystem="false" >
			<comment><![CDATA[args: rast, forceChecking=true - Returns true if the band is filled with only nodata values.]]></comment>
		</function>
		<function name="st_bandmetadata" id="Function2000279" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandmetadata(rast raster, band integer DEFAULT 1, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text)
 RETURNS record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT pixeltype, nodatavalue, isoutdb, path FROM st_bandmetadata($1, ARRAY[$2]::int[]) LIMIT 1 $function$
CREATE OR REPLACE FUNCTION public.st_bandmetadata(rast raster, band integer[], OUT bandnum integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text)
 RETURNS record
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_bandmetadata$function$
]]></string>
		</function>
		<function name="st_bandmetadata_001" id="Function2000279" isSystem="false" >
			<comment><![CDATA[args: rast, bandnum=1 - Returns basic meta data for a specific raster band. band num 1 is assumed if none-specified.]]></comment>
		</function>
		<function name="st_bandnodatavalue" id="Function2000279" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandnodatavalue(rast raster, band integer DEFAULT 1)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getBandNoDataValue$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum=1 - Returns the value in a given band that represents no data. If no band num 1 is assumed.]]></comment>
		</function>
		<function name="st_bandpath" id="Function2000279" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandpath(rast raster, band integer DEFAULT 1)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getBandPath$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum=1 - Returns system file path to a band stored in file system. If no bandnum specified, 1 is assumed.]]></comment>
		</function>
		<function name="st_bandpixeltype" id="Function2000279" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandpixeltype(rast raster, band integer DEFAULT 1)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getBandPixelTypeName$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum=1 - Returns the type of pixel for given band. If no bandnum specified, 1 is assumed.]]></comment>
		</function>
		<function name="st_bdmpolyfromtext" id="Function2000279" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bdmpolyfromtext(text, integer)
 RETURNS geometry
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := ST_MultiLineStringFromText(geomtext, srid);
	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;
	geom := ST_Multi(ST_BuildArea(mline));
	RETURN geom;
END;
$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Construct a MultiPolygon given an arbitrary collection of closed linestrings as a MultiLineString text representation Well-Known text representation.]]></comment>
		</function>
		<function name="st_bdpolyfromtext" id="Function2000279" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bdpolyfromtext(text, integer)
 RETURNS geometry
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := ST_MultiLineStringFromText(geomtext, srid);
	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;
	geom := ST_BuildArea(mline);
	IF GeometryType(geom) != 'POLYGON'
	THEN
		RAISE EXCEPTION 'Input returns more then a single polygon, try using BdMPolyFromText instead';
	END IF;
	RETURN geom;
END;
$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Construct a Polygon given an arbitrary collection of closed linestrings as a MultiLineString Well-Known text representation.]]></comment>
		</function>
		<function name="st_boundary" id="Function2000279" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_boundary(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$boundary$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the closure of the combinatorial boundary of this Geometry.]]></comment>
		</function>
		<function name="st_buffer" id="Function2000279" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_buffer(text, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_Buffer($1::geometry, $2);  $function$
CREATE OR REPLACE FUNCTION public.st_buffer(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$buffer$function$
CREATE OR REPLACE FUNCTION public.st_buffer(geography, double precision)
 RETURNS geography
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT geography(ST_Transform(ST_Buffer(ST_Transform(geometry($1), _ST_BestSRID($1)), $2), 4326))$function$
CREATE OR REPLACE FUNCTION public.st_buffer(geometry, double precision, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_Buffer($1, $2,
		CAST('quad_segs='||CAST($3 AS text) as cstring))
	   $function$
CREATE OR REPLACE FUNCTION public.st_buffer(geometry, double precision, text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_Buffer($1, $2,
		CAST( regexp_replace($3, '^[0123456789]+$',
			'quad_segs='||$3) AS cstring)
		)
	   $function$
]]></string>
			<comment><![CDATA[args: g1, radius_of_buffer - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#]]></comment>
		</function>
		<function name="st_buffer_001" id="Function2000280" isSystem="false" >
			<comment><![CDATA[args: g1, radius_of_buffer, num_seg_quarter_circle - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#]]></comment>
		</function>
		<function name="st_buffer_002" id="Function2000280" isSystem="false" >
			<comment><![CDATA[args: g1, radius_of_buffer, buffer_style_parameters - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#]]></comment>
		</function>
		<function name="st_buffer_003" id="Function2000280" isSystem="false" >
			<comment><![CDATA[args: g1, radius_of_buffer_in_meters - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#]]></comment>
		</function>
		<function name="st_buffer_004" id="Function2000280" isSystem="false" />
		<function name="st_buildarea" id="Function2000280" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_buildarea(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$ST_BuildArea$function$
]]></string>
			<comment><![CDATA[args: A - Creates an areal geometry formed by the constituent linework of given geometry]]></comment>
		</function>
		<function name="st_centroid" id="Function2000280" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_centroid(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$centroid$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns the geometric center of a geometry.]]></comment>
		</function>
		<function name="st_cleangeometry" id="Function2000280" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_cleangeometry(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$ST_CleanGeometry$function$
]]></string>
		</function>
		<function name="st_clip" id="Function2000280" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_clip(rast raster, geom geometry, crop boolean)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT ST_Clip($1, NULL, $2, null::float8[], $3) $function$
CREATE OR REPLACE FUNCTION public.st_clip(rast raster, band integer, geom geometry, crop boolean)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT ST_Clip($1, $2, $3, null::float8[], $4) $function$
CREATE OR REPLACE FUNCTION public.st_clip(rast raster, geom geometry, nodataval double precision, crop boolean DEFAULT true)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT ST_Clip($1, NULL, $2, ARRAY[$3], $4) $function$
CREATE OR REPLACE FUNCTION public.st_clip(rast raster, geom geometry, nodataval double precision[] DEFAULT NULL::double precision[], crop boolean DEFAULT true)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT ST_Clip($1, NULL, $2, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_clip(rast raster, band integer, geom geometry, nodataval double precision, crop boolean DEFAULT true)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT ST_Clip($1, $2, $3, ARRAY[$4], $5) $function$
CREATE OR REPLACE FUNCTION public.st_clip(rast raster, band integer, geom geometry, nodataval double precision[] DEFAULT NULL::double precision[], crop boolean DEFAULT true)
 RETURNS raster
 LANGUAGE plpgsql
 STABLE
AS $function$
	DECLARE
		g geometry;
		newrast raster;
		geomrast raster;
		numband int;
		bandstart int;
		bandend int;
		newextent text;
		newnodataval double precision;
		newpixtype text;
		bandi int;
		hasnodata bool;
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;
		IF geom IS NULL THEN
			RETURN rast;
		END IF;
		numband := ST_Numbands(rast);
		IF band IS NULL THEN
			bandstart := 1;
			bandend := numband;
		ELSEIF ST_HasNoBand(rast, band) THEN
			RAISE NOTICE 'Raster do not have band %. Returning null', band;
			RETURN NULL;
		ELSE
			bandstart := band;
			bandend := band;
		END IF;
		newpixtype := ST_BandPixelType(rast, bandstart);
		newnodataval := coalesce(nodataval[1], ST_BandNodataValue(rast, bandstart), ST_MinPossibleValue(newpixtype));
		newextent := CASE WHEN crop THEN 'INTERSECTION' ELSE 'FIRST' END;
		-- Convert the geometry to a raster
		g := ST_Intersection(geom, rast::geometry);
		geomrast := ST_AsRaster(g, rast, ST_BandPixelType(rast, band), 1, newnodataval);
		-- Compute the first raster band
		newrast := ST_MapAlgebraExpr(rast, bandstart, geomrast, 1, '[rast1.val]', newpixtype, newextent, newnodataval::text, newnodataval::text, newnodataval);
		-- Set the newnodataval
		newrast := ST_SetBandNodataValue(newrast, bandstart, newnodataval);
		FOR bandi IN bandstart+1..bandend LOOP
			-- for each band we must determine the nodata value
			newpixtype := ST_BandPixelType(rast, bandi);
			IF ST_BandNodataValue(rast, bandi) IS NULL THEN
				hasnodata := FALSE;
			ELSE
				hasnodata := TRUE;
			END IF;
			newnodataval := coalesce(nodataval[bandi], nodataval[array_upper(nodataval, 1)], ST_BandNodataValue(rast, bandi), ST_MinPossibleValue(newpixtype));
			newrast := ST_AddBand(newrast, ST_MapAlgebraExpr(rast, bandi, geomrast, 1, '[rast1.val]', newpixtype, newextent, newnodataval::text, newnodataval::text, newnodataval));
			IF hasnodata THEN
				newrast := ST_SetBandNodataValue(newrast, bandi, newnodataval);
			END IF;
		END LOOP;
		RETURN newrast;
	END;
	$function$
]]></string>
		</function>
		<function name="st_clip_001" id="Function2000280" isSystem="false" />
		<function name="st_clip_002" id="Function2000281" isSystem="false" >
			<comment><![CDATA[args: rast, band, geom, crop - Returns the raster clipped by the input geometry. If no band is specified all bands are returned. If crop is not specified, true is assumed meaning the output raster is cropped.]]></comment>
		</function>
		<function name="st_clip_003" id="Function2000281" isSystem="false" >
			<comment><![CDATA[args: rast, geom, nodataval=NULL, crop=true - Returns the raster clipped by the input geometry. If no band is specified all bands are returned. If crop is not specified, true is assumed meaning the output raster is cropped.]]></comment>
		</function>
		<function name="st_clip_004" id="Function2000281" isSystem="false" />
		<function name="st_clip_005" id="Function2000281" isSystem="false" >
			<comment><![CDATA[args: rast, geom, crop - Returns the raster clipped by the input geometry. If no band is specified all bands are returned. If crop is not specified, true is assumed meaning the output raster is cropped.]]></comment>
		</function>
		<function name="st_closestpoint" id="Function2000281" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_closestpoint(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_closestpoint$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 2-dimensional point on g1 that is closest to g2. This is the first point of the shortest line.]]></comment>
		</function>
		<function name="st_collect" id="Function2000281" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_collect(geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_collect_garray$function$
CREATE OR REPLACE FUNCTION public.st_collect(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$LWGEOM_collect$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Return a specified ST_Geometry value from a collection of other geometries.]]></comment>
		</function>
		<function name="st_collect_001" id="Function2000281" isSystem="false" >
			<comment><![CDATA[args: g1_array - Return a specified ST_Geometry value from a collection of other geometries.]]></comment>
		</function>
		<function name="st_collect_002" id="Function2000282" isSystem="false" >
			<comment><![CDATA[args: g1field - Return a specified ST_Geometry value from a collection of other geometries.]]></comment>
		</function>
		<function name="st_collectionextract" id="Function2000282" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_collectionextract(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$ST_CollectionExtract$function$
]]></string>
			<comment><![CDATA[args: collection, type - Given a (multi)geometry, returns a (multi)geometry consisting only of elements of the specified type.]]></comment>
		</function>
		<function name="st_collectionhomogenize" id="Function2000282" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_collectionhomogenize(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$ST_CollectionHomogenize$function$
]]></string>
			<comment><![CDATA[args: collection - Given a geometry collection, returns the "simplest" representation of the contents.]]></comment>
		</function>
		<function name="st_combine_bbox" id="Function2000282" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_combine_bbox(box3d, geometry)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$BOX3D_combine$function$
CREATE OR REPLACE FUNCTION public.st_combine_bbox(box2d, geometry)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.0', $function$BOX2D_combine$function$
]]></string>
		</function>
		<function name="st_combine_bbox_001" id="Function2000282" isSystem="false" />
		<function name="st_concavehull" id="Function2000282" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_concavehull(param_geom geometry, param_pctconvex double precision, param_allow_holes boolean DEFAULT false)
 RETURNS geometry
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		var_convhull geometry := ST_ConvexHull(param_geom);
		var_param_geom geometry := param_geom;
		var_initarea float := ST_Area(var_convhull);
		var_newarea float := var_initarea;
		var_div integer := 6; 
		var_tempgeom geometry;
		var_tempgeom2 geometry;
		var_cent geometry;
		var_geoms geometry[4]; 
		var_enline geometry;
		var_resultgeom geometry;
		var_atempgeoms geometry[];
		var_buf float := 1; 
	BEGIN
		-- We start with convex hull as our base
		var_resultgeom := var_convhull;
		
		IF param_pctconvex = 1 THEN
			return var_resultgeom;
		ELSIF ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN -- it is as concave as it is going to get
			IF param_allow_holes THEN -- leave the holes
				RETURN var_param_geom;
			ELSE -- remove the holes
				var_resultgeom := ST_MakePolygon(ST_ExteriorRing(var_param_geom));
				RETURN var_resultgeom;
			END IF;
		END IF;
		IF ST_Dimension(var_resultgeom) > 1 AND param_pctconvex BETWEEN 0 and 0.98 THEN
		-- get linestring that forms envelope of geometry
			var_enline := ST_Boundary(ST_Envelope(var_param_geom));
			var_buf := ST_Length(var_enline)/1000.0;
			IF ST_GeometryType(var_param_geom) = 'ST_MultiPoint' AND ST_NumGeometries(var_param_geom) BETWEEN 4 and 200 THEN
			-- we make polygons out of points since they are easier to cave in. 
			-- Note we limit to between 4 and 200 points because this process is slow and gets quadratically slow
				var_buf := sqrt(ST_Area(var_convhull)*0.8/(ST_NumGeometries(var_param_geom)*ST_NumGeometries(var_param_geom)));
				var_atempgeoms := ARRAY(SELECT geom FROM ST_DumpPoints(var_param_geom));
				-- 5 and 10 and just fudge factors
				var_tempgeom := ST_Union(ARRAY(SELECT geom
						FROM (
						-- fuse near neighbors together
						SELECT DISTINCT ON (i) i,  ST_Distance(var_atempgeoms[i],var_atempgeoms[j]), ST_Buffer(ST_MakeLine(var_atempgeoms[i], var_atempgeoms[j]) , var_buf*5, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									INNER JOIN generate_series(1,array_upper(var_atempgeoms, 1)) As j 
										ON (
								 NOT ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10)
									)
								UNION ALL
						-- catch the ones with no near neighbors
								SELECT i, 0, ST_Buffer(var_atempgeoms[i] , var_buf*10, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									LEFT JOIN generate_series(ceiling(array_upper(var_atempgeoms,1)/2)::integer,array_upper(var_atempgeoms, 1)) As j 
										ON (
								 NOT ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10) 
									)
									WHERE j IS NULL
								ORDER BY 1, 2
							) As foo	) );
				IF ST_IsValid(var_tempgeom) AND ST_GeometryType(var_tempgeom) = 'ST_Polygon' THEN
					var_tempgeom := ST_Intersection(var_tempgeom, var_convhull);
					IF param_allow_holes THEN
						var_param_geom := var_tempgeom;
					ELSE
						var_param_geom := ST_MakePolygon(ST_ExteriorRing(var_tempgeom));
					END IF;
					return var_param_geom;
				ELSIF ST_IsValid(var_tempgeom) THEN
					var_param_geom := ST_Intersection(var_tempgeom, var_convhull);	
				END IF;
			END IF;
			IF ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN
				IF NOT param_allow_holes THEN
					var_param_geom := ST_MakePolygon(ST_ExteriorRing(var_param_geom));
				END IF;
				return var_param_geom;
			END IF;
            var_cent := ST_Centroid(var_param_geom);
            IF (ST_XMax(var_enline) - ST_XMin(var_enline) ) > var_buf AND (ST_YMax(var_enline) - ST_YMin(var_enline) ) > var_buf THEN
                    IF ST_Dwithin(ST_Centroid(var_convhull) , ST_Centroid(ST_Envelope(var_param_geom)), var_buf/2) THEN
                -- If the geometric dimension is > 1 and the object is symettric (cutting at centroid will not work -- offset a bit)
                        var_cent := ST_Translate(var_cent, (ST_XMax(var_enline) - ST_XMin(var_enline))/1000,  (ST_YMAX(var_enline) - ST_YMin(var_enline))/1000);
                    ELSE
                        -- uses closest point on geometry to centroid. I can't explain why we are doing this
                        var_cent := ST_ClosestPoint(var_param_geom,var_cent);
                    END IF;
                    IF ST_DWithin(var_cent, var_enline,var_buf) THEN
                        var_cent := ST_centroid(ST_Envelope(var_param_geom));
                    END IF;
                    -- break envelope into 4 triangles about the centroid of the geometry and returned the clipped geometry in each quadrant
                    FOR i in 1 .. 4 LOOP
                       var_geoms[i] := ST_MakePolygon(ST_MakeLine(ARRAY[ST_PointN(var_enline,i), ST_PointN(var_enline,i+1), var_cent, ST_PointN(var_enline,i)]));
                       var_geoms[i] := ST_Intersection(var_param_geom, ST_Buffer(var_geoms[i],var_buf));
                       IF ST_IsValid(var_geoms[i]) THEN 
                            
                       ELSE
                            var_geoms[i] := ST_BuildArea(ST_MakeLine(ARRAY[ST_PointN(var_enline,i), ST_PointN(var_enline,i+1), var_cent, ST_PointN(var_enline,i)]));
                       END IF; 
                    END LOOP;
                    var_tempgeom := ST_Union(ARRAY[ST_ConvexHull(var_geoms[1]), ST_ConvexHull(var_geoms[2]) , ST_ConvexHull(var_geoms[3]), ST_ConvexHull(var_geoms[4])]); 
                    --RAISE NOTICE 'Curr vex % ', ST_AsText(var_tempgeom);
                    IF ST_Area(var_tempgeom) <= var_newarea AND ST_IsValid(var_tempgeom)  THEN --AND ST_GeometryType(var_tempgeom) ILIKE '%Polygon'
                        
                        var_tempgeom := ST_Buffer(ST_ConcaveHull(var_geoms[1],least(param_pctconvex + param_pctconvex/var_div),true),var_buf, 'quad_segs=2');
                        FOR i IN 1 .. 4 LOOP
                            var_geoms[i] := ST_Buffer(ST_ConcaveHull(var_geoms[i],least(param_pctconvex + param_pctconvex/var_div),true), var_buf, 'quad_segs=2');
                            IF ST_IsValid(var_geoms[i]) Then
                                var_tempgeom := ST_Union(var_tempgeom, var_geoms[i]);
                            ELSE
                                RAISE NOTICE 'Not valid % %', i, ST_AsText(var_tempgeom);
                                var_tempgeom := ST_Union(var_tempgeom, ST_ConvexHull(var_geoms[i]));
                            END IF; 
                        END LOOP;
                        --RAISE NOTICE 'Curr concave % ', ST_AsText(var_tempgeom);
                        IF ST_IsValid(var_tempgeom) THEN
                            var_resultgeom := var_tempgeom;
                        END IF;
                        var_newarea := ST_Area(var_resultgeom);
                    ELSIF ST_IsValid(var_tempgeom) THEN
                        var_resultgeom := var_tempgeom;
                    END IF;
                    IF ST_NumGeometries(var_resultgeom) > 1  THEN
                        var_tempgeom := _ST_ConcaveHull(var_resultgeom);
                        IF ST_IsValid(var_tempgeom) AND ST_GeometryType(var_tempgeom) ILIKE 'ST_Polygon' THEN
                            var_resultgeom := var_tempgeom;
                        ELSE
                            var_resultgeom := ST_Buffer(var_tempgeom,var_buf, 'quad_segs=2');
                        END IF;
                    END IF;
                    IF param_allow_holes = false THEN 
                    -- only keep exterior ring since we do not want holes
                        var_resultgeom := ST_MakePolygon(ST_ExteriorRing(var_resultgeom));
                    END IF;
                ELSE
                    var_resultgeom := ST_Buffer(var_resultgeom,var_buf);
                END IF;
                var_resultgeom := ST_Intersection(var_resultgeom, ST_ConvexHull(var_param_geom));
            ELSE
                -- dimensions are too small to cut
                var_resultgeom := _ST_ConcaveHull(var_param_geom);
            END IF;
            RETURN var_resultgeom;
	END;
$function$
]]></string>
			<comment><![CDATA[args: geomA, target_percent, allow_holes=false - The concave hull of a geometry represents a possibly concave geometry that encloses all geometries within the set. You can think of it as shrink wrapping.]]></comment>
		</function>
		<function name="st_contains" id="Function2000283" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_contains(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Contains($1,$2)$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns true if and only if no points of B lie in the exterior of A, and at least one point of the interior of B lies in the interior of A.]]></comment>
		</function>
		<function name="st_containsproperly" id="Function2000283" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_containsproperly(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_ContainsProperly($1,$2)$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns true if B intersects the interior of A but not the boundary (or exterior). A does not contain properly itself, but does contain itself.]]></comment>
		</function>
		<function name="st_convexhull" id="Function2000283" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_convexhull(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$convexhull$function$
CREATE OR REPLACE FUNCTION public.st_convexhull(raster)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_convex_hull$function$
]]></string>
			<comment><![CDATA[args: geomA - The convex hull of a geometry represents the minimum convex geometry that encloses all geometries within the set.]]></comment>
		</function>
		<function name="st_convexhull_001" id="Function2000283" isSystem="false" >
			<comment><![CDATA[args: rast - Return the convex hull geometry of the raster including pixel values equal to BandNoDataValue. For regular shaped and non-skewed rasters, this gives the same result as ST_Envelope so only useful for irregularly shaped or skewed rasters.]]></comment>
		</function>
		<function name="st_coorddim" id="Function2000283" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_coorddim(geometry geometry)
 RETURNS smallint
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_ndims$function$
]]></string>
			<comment><![CDATA[args: geomA - Return the coordinate dimension of the ST_Geometry value.]]></comment>
		</function>
		<function name="st_count" id="Function2000283" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_count(rast raster, exclude_nodata_value boolean)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_count($1, 1, $2, 1) $function$
CREATE OR REPLACE FUNCTION public.st_count(rastertable text, rastercolumn text, exclude_nodata_value boolean)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_count($1, $2, 1, $3, 1) $function$
CREATE OR REPLACE FUNCTION public.st_count(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_count($1, $2, $3, 1) $function$
CREATE OR REPLACE FUNCTION public.st_count(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_count($1, $2, $3, $4, 1) $function$
]]></string>
			<comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
		</function>
		<function name="st_count_001" id="Function2000283" isSystem="false" >
			<comment><![CDATA[args: rast, exclude_nodata_value - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
		</function>
		<function name="st_count_002" id="Function2000283" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
		</function>
		<function name="st_count_003" id="Function2000283" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, exclude_nodata_value - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
		</function>
		<function name="st_coveredby" id="Function2000284" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_coveredby(text, text)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT ST_CoveredBy($1::geometry, $2::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_coveredby(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_CoveredBy($1,$2)$function$
CREATE OR REPLACE FUNCTION public.st_coveredby(geography, geography)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Covers($2, $1)$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B]]></comment>
		</function>
		<function name="st_coveredby_001" id="Function2000284" isSystem="false" >
			<comment><![CDATA[args: geogA, geogB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B]]></comment>
		</function>
		<function name="st_coveredby_002" id="Function2000284" isSystem="false" />
		<function name="st_covers" id="Function2000284" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_covers(text, text)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT ST_Covers($1::geometry, $2::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_covers(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Covers($1,$2)$function$
CREATE OR REPLACE FUNCTION public.st_covers(geography, geography)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Covers($1, $2)$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A]]></comment>
		</function>
		<function name="st_covers_001" id="Function2000284" isSystem="false" >
			<comment><![CDATA[args: geogpolyA, geogpointB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A]]></comment>
		</function>
		<function name="st_covers_002" id="Function2000284" isSystem="false" />
		<function name="st_crosses" id="Function2000284" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_crosses(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Crosses($1,$2)$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns TRUE if the supplied geometries have some, but not all, interior points in common.]]></comment>
		</function>
		<function name="st_curvetoline" id="Function2000284" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_curvetoline(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_CurveToLine($1, 32)$function$
CREATE OR REPLACE FUNCTION public.st_curvetoline(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_curve_segmentize$function$
]]></string>
			<comment><![CDATA[args: curveGeom, segments_per_qtr_circle - Converts a CIRCULARSTRING/CURVEDPOLYGON to a LINESTRING/POLYGON]]></comment>
		</function>
		<function name="st_curvetoline_001" id="Function2000284" isSystem="false" >
			<comment><![CDATA[args: curveGeom - Converts a CIRCULARSTRING/CURVEDPOLYGON to a LINESTRING/POLYGON]]></comment>
		</function>
		<function name="st_dfullywithin" id="Function2000285" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dfullywithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_DFullyWithin(ST_ConvexHull($1), ST_ConvexHull($2), $3)$function$
]]></string>
			<comment><![CDATA[args: g1, g2, distance - Returns true if all of the geometries are within the specified distance of one another]]></comment>
		</function>
		<function name="st_difference" id="Function2000285" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_difference(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$difference$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns a geometry that represents that part of geometry A that does not intersect with geometry B.]]></comment>
		</function>
		<function name="st_dimension" id="Function2000285" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dimension(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_dimension$function$
]]></string>
			<comment><![CDATA[args: g - The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.]]></comment>
		</function>
		<function name="st_disjoint" id="Function2000285" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_disjoint(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$disjoint$function$
]]></string>
			<comment><![CDATA[args: A, B - Returns TRUE if the Geometries do not "spatially intersect" - if they do not share any space together.]]></comment>
		</function>
		<function name="st_distance" id="Function2000285" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distance(text, text)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_Distance($1::geometry, $2::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_distance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$LWGEOM_mindistance2d$function$
CREATE OR REPLACE FUNCTION public.st_distance(geography, geography)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_Distance($1, $2, 0.0, true)$function$
CREATE OR REPLACE FUNCTION public.st_distance(geography, geography, boolean)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_Distance($1, $2, 0.0, $3)$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.]]></comment>
		</function>
		<function name="st_distance_001" id="Function2000285" isSystem="false" >
			<comment><![CDATA[args: gg1, gg2, use_spheroid - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.]]></comment>
		</function>
		<function name="st_distance_002" id="Function2000285" isSystem="false" >
			<comment><![CDATA[args: gg1, gg2 - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.]]></comment>
		</function>
		<function name="st_distance_003" id="Function2000285" isSystem="false" />
		<function name="st_distance_sphere" id="Function2000286" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distance_sphere(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT COST 300
AS $function$
	select st_distance(geography($1),geography($2),false)
	$function$
]]></string>
			<comment><![CDATA[args: geomlonlatA, geomlonlatB - Returns minimum distance in meters between two lon/lat geometries. Uses a spherical earth and radius of 6370986 meters. Faster than ST_Distance_Spheroid , but less accurate. PostGIS versions prior to 1.5 only implemented for points.]]></comment>
		</function>
		<function name="st_distance_spheroid" id="Function2000286" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distance_spheroid(geom1 geometry, geom2 geometry, spheroid)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$LWGEOM_distance_ellipsoid$function$
]]></string>
			<comment><![CDATA[args: geomlonlatA, geomlonlatB, measurement_spheroid - Returns the minimum distance between two lon/lat geometries given a particular spheroid. PostGIS versions prior to 1.5 only support points.]]></comment>
		</function>
		<function name="st_distinct4ma" id="Function2000286" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT COUNT(DISTINCT unnest)::float FROM unnest($1) $function$
]]></string>
			<comment><![CDATA[args: matrix, nodatamode, VARIADIC args - Raster processing function that calculates the number of unique pixel values in a neighborhood.]]></comment>
		</function>
		<function name="st_dump" id="Function2000286" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dump(geometry)
 RETURNS SETOF geometry_dump
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_dump$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns a set of geometry_dump (geom,path) rows, that make up a geometry g1.]]></comment>
		</function>
		<function name="st_dumpaspolygons" id="Function2000286" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dumpaspolygons(rast raster, band integer DEFAULT 1)
 RETURNS SETOF geomval
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_dumpAsPolygons$function$
]]></string>
			<comment><![CDATA[args: rast, band_num=1 - Returns a set of geomval (geom,val) rows, from a given raster band. If no band number is specified, band num defaults to 1.]]></comment>
		</function>
		<function name="st_dumppoints" id="Function2000286" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dumppoints(geometry)
 RETURNS SETOF geometry_dump
 LANGUAGE sql
 STRICT
AS $function$
  SELECT * FROM _ST_DumpPoints($1, NULL);
$function$
]]></string>
			<comment><![CDATA[args: geom - Returns a set of geometry_dump (geom,path) rows of all points that make up a geometry.]]></comment>
		</function>
		<function name="st_dumprings" id="Function2000286" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dumprings(geometry)
 RETURNS SETOF geometry_dump
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_dump_rings$function$
]]></string>
			<comment><![CDATA[args: a_polygon - Returns a set of geometry_dump rows, representing the exterior and interior rings of a polygon.]]></comment>
		</function>
		<function name="st_dwithin" id="Function2000286" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dwithin(text, text, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT ST_DWithin($1::geometry, $2::geometry, $3);  $function$
CREATE OR REPLACE FUNCTION public.st_dwithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3)$function$
CREATE OR REPLACE FUNCTION public.st_dwithin(geography, geography, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3, true)$function$
CREATE OR REPLACE FUNCTION public.st_dwithin(geography, geography, double precision, boolean)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3, $4)$function$
]]></string>
			<comment><![CDATA[args: g1, g2, distance_of_srid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.]]></comment>
		</function>
		<function name="st_dwithin_001" id="Function2000286" isSystem="false" >
			<comment><![CDATA[args: gg1, gg2, distance_meters, use_spheroid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.]]></comment>
		</function>
		<function name="st_dwithin_002" id="Function2000287" isSystem="false" >
			<comment><![CDATA[args: gg1, gg2, distance_meters - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.]]></comment>
		</function>
		<function name="st_dwithin_003" id="Function2000287" isSystem="false" />
		<function name="st_endpoint" id="Function2000287" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_endpoint(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_endpoint_linestring$function$
]]></string>
			<comment><![CDATA[args: g - Returns the last point of a LINESTRING geometry as a POINT.]]></comment>
		</function>
		<function name="st_envelope" id="Function2000287" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_envelope(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_envelope$function$
CREATE OR REPLACE FUNCTION public.st_envelope(raster)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select st_envelope(st_convexhull($1))$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns a geometry representing the double precision (float8) bounding box of the supplied geometry.]]></comment>
		</function>
		<function name="st_envelope_001" id="Function2000287" isSystem="false" >
			<comment><![CDATA[args: rast - Returns the polygon representation of the extent of the raster.]]></comment>
		</function>
		<function name="st_equals" id="Function2000287" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_equals(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 ~= $2 AND _ST_Equals($1,$2)$function$
]]></string>
			<comment><![CDATA[args: A, B - Returns true if the given geometries represent the same geometry. Directionality is ignored.]]></comment>
		</function>
		<function name="st_estimated_extent" id="Function2000287" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_estimated_extent(text, text)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT SECURITY DEFINER
AS '$libdir/postgis-2.0', $function$geometry_estimated_extent$function$
CREATE OR REPLACE FUNCTION public.st_estimated_extent(text, text, text)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT SECURITY DEFINER
AS '$libdir/postgis-2.0', $function$geometry_estimated_extent$function$
]]></string>
			<comment><![CDATA[args: schema_name, table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.]]></comment>
		</function>
		<function name="st_estimated_extent_001" id="Function2000287" isSystem="false" >
			<comment><![CDATA[args: table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.]]></comment>
		</function>
		<function name="st_expand" id="Function2000287" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_expand(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_expand$function$
CREATE OR REPLACE FUNCTION public.st_expand(box3d, double precision)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX3D_expand$function$
CREATE OR REPLACE FUNCTION public.st_expand(box2d, double precision)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX2D_expand$function$
]]></string>
			<comment><![CDATA[args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
		</function>
		<function name="st_expand_001" id="Function2000288" isSystem="false" >
			<comment><![CDATA[args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
		</function>
		<function name="st_expand_002" id="Function2000288" isSystem="false" >
			<comment><![CDATA[args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
		</function>
		<function name="st_extent" id="Function2000288" isSystem="false" >
			<comment><![CDATA[args: geomfield - an aggregate function that returns the bounding box that bounds rows of geometries.]]></comment>
		</function>
		<function name="st_exteriorring" id="Function2000288" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_exteriorring(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_exteriorring_polygon$function$
]]></string>
			<comment><![CDATA[args: a_polygon - Returns a line string representing the exterior ring of the POLYGON geometry. Return NULL if the geometry is not a polygon. Will not work with MULTIPOLYGON]]></comment>
		</function>
		<function name="st_find_extent" id="Function2000288" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_find_extent(text, text)
 RETURNS box2d
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;
BEGIN
	FOR myrec IN EXECUTE 'SELECT ST_Extent("' || columnname || '") As extent FROM "' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$function$
CREATE OR REPLACE FUNCTION public.st_find_extent(text, text, text)
 RETURNS box2d
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;
BEGIN
	FOR myrec IN EXECUTE 'SELECT ST_Extent("' || columnname || '") As extent FROM "' || schemaname || '"."' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$function$
]]></string>
		</function>
		<function name="st_find_extent_001" id="Function2000288" isSystem="false" />
		<function name="st_flipcoordinates" id="Function2000288" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_flipcoordinates(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$ST_FlipCoordinates$function$
]]></string>
			<comment><![CDATA[args: geom - Returns a version of the given geometry with X and Y axis flipped. Useful for people who have built latitude/longitude features and need to fix them.]]></comment>
		</function>
		<function name="st_force_2d" id="Function2000288" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_2d(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_force_2d$function$
]]></string>
			<comment><![CDATA[args: geomA - Forces the geometries into a "2-dimensional mode" so that all output representations will only have the X and Y coordinates.]]></comment>
		</function>
		<function name="st_force_3d" id="Function2000288" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_3d(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_force_3dz$function$
]]></string>
			<comment><![CDATA[args: geomA - Forces the geometries into XYZ mode. This is an alias for ST_Force_3DZ.]]></comment>
		</function>
		<function name="st_force_3dm" id="Function2000289" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_3dm(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_force_3dm$function$
]]></string>
			<comment><![CDATA[args: geomA - Forces the geometries into XYM mode.]]></comment>
		</function>
		<function name="st_force_3dz" id="Function2000289" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_3dz(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_force_3dz$function$
]]></string>
			<comment><![CDATA[args: geomA - Forces the geometries into XYZ mode. This is a synonym for ST_Force_3D.]]></comment>
		</function>
		<function name="st_force_4d" id="Function2000289" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_4d(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_force_4d$function$
]]></string>
			<comment><![CDATA[args: geomA - Forces the geometries into XYZM mode.]]></comment>
		</function>
		<function name="st_force_collection" id="Function2000289" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_collection(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_force_collection$function$
]]></string>
			<comment><![CDATA[args: geomA - Converts the geometry into a GEOMETRYCOLLECTION.]]></comment>
		</function>
		<function name="st_forcerhr" id="Function2000289" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_forcerhr(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_force_clockwise_poly$function$
]]></string>
			<comment><![CDATA[args: g - Forces the orientation of the vertices in a polygon to follow the Right-Hand-Rule.]]></comment>
		</function>
		<function name="st_gdaldrivers" id="Function2000290" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT create_options text)
 RETURNS SETOF record
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getGDALDrivers$function$
]]></string>
			<comment><![CDATA[args: OUT idx, OUT short_name, OUT long_name, OUT create_options - Returns a list of raster formats supported by your lib gdal. These are the formats you can output your raster using ST_AsGDALRaster.]]></comment>
		</function>
		<function name="st_geogfromtext" id="Function2000290" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geogfromtext(text)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_from_text$function$
]]></string>
			<comment><![CDATA[args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).]]></comment>
		</function>
		<function name="st_geogfromwkb" id="Function2000290" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geogfromwkb(bytea)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_from_binary$function$
]]></string>
			<comment><![CDATA[args: geom - Creates a geography instance from a Well-Known Binary geometry representation (WKB) or extended Well Known Binary (EWKB).]]></comment>
		</function>
		<function name="st_geographyfromtext" id="Function2000290" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geographyfromtext(text)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geography_from_text$function$
]]></string>
			<comment><![CDATA[args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).]]></comment>
		</function>
		<function name="st_geohash" id="Function2000290" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geohash(geom geometry, maxchars integer DEFAULT 0)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$ST_GeoHash$function$
]]></string>
			<comment><![CDATA[args: geom, maxchars=full_precision_of_point - Return a GeoHash representation (geohash.org) of the geometry.]]></comment>
		</function>
		<function name="st_geomcollfromtext" id="Function2000290" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomcollfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_geomcollfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not give, it defaults to -1.]]></comment>
		</function>
		<function name="st_geomcollfromtext_001" id="Function2000290" isSystem="false" >
			<comment><![CDATA[args: WKT - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not give, it defaults to -1.]]></comment>
		</function>
		<function name="st_geomcollfromwkb" id="Function2000291" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomcollfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromWKB($1)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_geomcollfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_geomcollfromwkb_001" id="Function2000291" isSystem="false" />
		<function name="st_geometryfromtext" id="Function2000291" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geometryfromtext(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_from_text$function$
CREATE OR REPLACE FUNCTION public.st_geometryfromtext(text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_from_text$function$
]]></string>
			<comment><![CDATA[args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText]]></comment>
		</function>
		<function name="st_geometryfromtext_001" id="Function2000291" isSystem="false" >
			<comment><![CDATA[args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText]]></comment>
		</function>
		<function name="st_geometryn" id="Function2000291" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geometryn(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_geometryn_collection$function$
]]></string>
			<comment><![CDATA[args: geomA, n - Return the 1-based Nth geometry if the geometry is a GEOMETRYCOLLECTION, (MULTI)POINT, (MULTI)LINESTRING, MULTICURVE or (MULTI)POLYGON, POLYHEDRALSURFACE Otherwise, return NULL.]]></comment>
		</function>
		<function name="st_geometrytype" id="Function2000291" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geometrytype(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geometry_geometrytype$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the geometry type of the ST_Geometry value.]]></comment>
		</function>
		<function name="st_geomfromewkb" id="Function2000291" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromewkb(bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOMFromWKB$function$
]]></string>
			<comment><![CDATA[args: EWKB - Return a specified ST_Geometry value from Extended Well-Known Binary representation (EWKB).]]></comment>
		</function>
		<function name="st_geomfromewkt" id="Function2000292" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromewkt(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$parse_WKT_lwgeom$function$
]]></string>
			<comment><![CDATA[args: EWKT - Return a specified ST_Geometry value from Extended Well-Known Text representation (EWKT).]]></comment>
		</function>
		<function name="st_geomfromgeojson" id="Function2000292" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromgeojson(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geom_from_geojson$function$
]]></string>
			<comment><![CDATA[args: geomjson - Takes as input a geojson representation of a geometry and outputs a PostGIS geometry object]]></comment>
		</function>
		<function name="st_geomfromgml" id="Function2000292" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromgml(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_GeomFromGML($1, 0)$function$
CREATE OR REPLACE FUNCTION public.st_geomfromgml(text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geom_from_gml$function$
]]></string>
			<comment><![CDATA[args: geomgml, srid - Takes as input GML representation of geometry and outputs a PostGIS geometry object]]></comment>
		</function>
		<function name="st_geomfromgml_001" id="Function2000292" isSystem="false" >
			<comment><![CDATA[args: geomgml - Takes as input GML representation of geometry and outputs a PostGIS geometry object]]></comment>
		</function>
		<function name="st_geomfromkml" id="Function2000292" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromkml(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geom_from_kml$function$
]]></string>
			<comment><![CDATA[args: geomkml - Takes as input KML representation of geometry and outputs a PostGIS geometry object]]></comment>
		</function>
		<function name="st_geomfromtext" id="Function2000292" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromtext(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_from_text$function$
CREATE OR REPLACE FUNCTION public.st_geomfromtext(text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_from_text$function$
]]></string>
			<comment><![CDATA[args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT).]]></comment>
		</function>
		<function name="st_geomfromtext_001" id="Function2000292" isSystem="false" >
			<comment><![CDATA[args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT).]]></comment>
		</function>
		<function name="st_geomfromwkb" id="Function2000293" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromwkb(bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_from_WKB$function$
CREATE OR REPLACE FUNCTION public.st_geomfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_SetSRID(ST_GeomFromWKB($1), $2)$function$
]]></string>
			<comment><![CDATA[args: geom - Makes a geometry from WKB with the given SRID]]></comment>
		</function>
		<function name="st_geomfromwkb_001" id="Function2000293" isSystem="false" >
			<comment><![CDATA[args: geom, srid - Makes a geometry from WKB with the given SRID]]></comment>
		</function>
		<function name="st_georeference" id="Function2000293" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_georeference(rast raster, format text DEFAULT 'GDAL'::text)
 RETURNS text
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
    DECLARE
				scale_x numeric;
				scale_y numeric;
				skew_x numeric;
				skew_y numeric;
				ul_x numeric;
				ul_y numeric;
        result text;
    BEGIN
			SELECT scalex::numeric, scaley::numeric, skewx::numeric, skewy::numeric, upperleftx::numeric, upperlefty::numeric
				INTO scale_x, scale_y, skew_x, skew_y, ul_x, ul_y FROM ST_Metadata(rast);
						-- scale x
            result := trunc(scale_x, 10) || E'\n';
						-- skew y
            result := result || trunc(skew_y, 10) || E'\n';
						-- skew x
            result := result || trunc(skew_x, 10) || E'\n';
						-- scale y
            result := result || trunc(scale_y, 10) || E'\n';
        IF format = 'ESRI' THEN
						-- upper left x
            result := result || trunc((ul_x + scale_x * 0.5), 10) || E'\n';
						-- upper left y
            result = result || trunc((ul_y + scale_y * 0.5), 10) || E'\n';
        ELSE -- IF format = 'GDAL' THEN
						-- upper left x
            result := result || trunc(ul_x, 10) || E'\n';
						-- upper left y
            result := result || trunc(ul_y, 10) || E'\n';
        END IF;
        RETURN result;
    END;
    $function$
]]></string>
			<comment><![CDATA[args: rast, format=GDAL - Returns the georeference meta data in GDAL or ESRI format as commonly seen in a world file. Default is GDAL.]]></comment>
		</function>
		<function name="st_geotransform" id="Function2000293" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geotransform(raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision)
 RETURNS record
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_getGeotransform$function$
]]></string>
		</function>
		<function name="st_gmltosql" id="Function2000293" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_gmltosql(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_GeomFromGML($1, 0)$function$
CREATE OR REPLACE FUNCTION public.st_gmltosql(text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geom_from_gml$function$
]]></string>
			<comment><![CDATA[args: geomgml - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML]]></comment>
		</function>
		<function name="st_gmltosql_001" id="Function2000293" isSystem="false" >
			<comment><![CDATA[args: geomgml, srid - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML]]></comment>
		</function>
		<function name="st_hasarc" id="Function2000293" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_hasarc(geometry geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_has_arc$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns true if a geometry or geometry collection contains a circular string]]></comment>
		</function>
		<function name="st_hasnoband" id="Function2000293" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_hasnoband(rast raster, nband integer DEFAULT 1)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_hasNoBand$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum=1 - Returns true if there is no band with given band number. If no band number is specified, then band number 1 is assumed.]]></comment>
		</function>
		<function name="st_hausdorffdistance" id="Function2000293" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_hausdorffdistance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$hausdorffdistance$function$
CREATE OR REPLACE FUNCTION public.st_hausdorffdistance(geom1 geometry, geom2 geometry, double precision)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$hausdorffdistancedensify$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.]]></comment>
		</function>
		<function name="st_hausdorffdistance_001" id="Function2000293" isSystem="false" >
			<comment><![CDATA[args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.]]></comment>
		</function>
		<function name="st_height" id="Function2000294" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_height(raster)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getHeight$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the height of the raster in pixels.]]></comment>
		</function>
		<function name="st_hillshade" id="Function2000294" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_hillshade(rast raster, band integer, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision DEFAULT 255.0, elevation_scale double precision DEFAULT 1.0)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_mapalgebrafctngb($1, $2, $3, 1, 1, '_st_hillshade4ma(float[][], text, text[])'::regprocedure, 'value', st_pixelwidth($1)::text, st_pixelheight($1)::text, $4::text, $5::text, $6::text, $7::text) $function$
]]></string>
			<comment><![CDATA[args: rast, band, pixeltype, azimuth, altitude, max_bright=255, elevation_scale=1 - Returns the hypothetical illumination of an elevation raster band using provided azimuth, altitude, brightness and elevation scale inputs. Useful for visualizing terrain.]]></comment>
		</function>
		<function name="st_histogram" id="Function2000294" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_histogram(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false)
 RETURNS SETOF histogram
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_histogram($1, $2, $3, $4, 1, $5, $6, $7) $function$
CREATE OR REPLACE FUNCTION public.st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean)
 RETURNS SETOF histogram
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_histogram($1, $2, $3, $4, 1, $5, NULL, $6) $function$
CREATE OR REPLACE FUNCTION public.st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false)
 RETURNS SETOF histogram
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_histogram($1, $2, $3, TRUE, 1, $4, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, "right" boolean)
 RETURNS SETOF histogram
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_histogram($1, $2, $3, TRUE, 1, $4, NULL, $5) $function$
CREATE OR REPLACE FUNCTION public.st_histogram(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false)
 RETURNS SETOF histogram
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, 1, $4, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean)
 RETURNS SETOF histogram
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, 1, $4, NULL, $5) $function$
CREATE OR REPLACE FUNCTION public.st_histogram(rast raster, nband integer, bins integer, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false)
 RETURNS SETOF histogram
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, 1, $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_histogram(rast raster, nband integer, bins integer, "right" boolean)
 RETURNS SETOF histogram
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, 1, $3, NULL, $4) $function$
]]></string>
			<comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true, bins=autocomputed, width=NULL, right=false - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_histogram_001" id="Function2000294" isSystem="false" >
			<comment><![CDATA[args: rast, nband, exclude_nodata_value, bins, right - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_histogram_002" id="Function2000294" isSystem="false" >
			<comment><![CDATA[args: rast, nband, bins, width=NULL, right=false - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_histogram_003" id="Function2000294" isSystem="false" >
			<comment><![CDATA[args: rast, nband, bins, right - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_histogram_004" id="Function2000294" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, bins=autocomputed, width=NULL, right=false - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_histogram_005" id="Function2000294" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband, exclude_nodata_value, bins, right - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_histogram_006" id="Function2000294" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, bins, width=NULL, right=false - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_histogram_007" id="Function2000294" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband, bins, right - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_interiorringn" id="Function2000295" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_interiorringn(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_interiorringn_polygon$function$
]]></string>
			<comment><![CDATA[args: a_polygon, n - Return the Nth interior linestring ring of the polygon geometry. Return NULL if the geometry is not a polygon or the given N is out of range.]]></comment>
		</function>
		<function name="st_interpolatepoint" id="Function2000295" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_interpolatepoint(line geometry, point geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$ST_InterpolatePoint$function$
]]></string>
			<comment><![CDATA[args: line, point - Return the value of the measure dimension of a geometry at the point closed to the provided point.]]></comment>
		</function>
		<function name="st_intersection" id="Function2000295" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(geography, geography)
 RETURNS geography
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT geography(ST_Transform(ST_Intersection(ST_Transform(geometry($1), _ST_BestSRID($1, $2)), ST_Transform(geometry($2), _ST_BestSRID($1, $2))), 4326))$function$
CREATE OR REPLACE FUNCTION public.st_intersection(text, text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_Intersection($1::geometry, $2::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_intersection(geomin geometry, rast raster, band integer DEFAULT 1)
 RETURNS SETOF geomval
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		intersects boolean := FALSE;
	BEGIN
		intersects := ST_Intersects(geomin, rast, band);
		IF intersects THEN
			-- Return the intersections of the geometry with the vectorized parts of
			-- the raster and the values associated with those parts, if really their
			-- intersection is not empty.
			RETURN QUERY
				SELECT
					intgeom,
					val
				FROM (
					SELECT
						ST_Intersection((gv).geom, geomin) AS intgeom,
						(gv).val
					FROM ST_DumpAsPolygons(rast, band) gv
					WHERE ST_Intersects((gv).geom, geomin)
				) foo
				WHERE NOT ST_IsEmpty(intgeom);
		ELSE
			-- If the geometry does not intersect with the raster, return an empty
			-- geometry and a null value
			RETURN QUERY
				SELECT
					emptygeom,
					NULL::float8
				FROM ST_GeomCollFromText('GEOMETRYCOLLECTION EMPTY', ST_SRID($1)) emptygeom;
		END IF;
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast raster, geomin geometry)
 RETURNS SETOF geomval
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($2, $1, 1) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text DEFAULT 'BOTH'::text, nodataval double precision[] DEFAULT NULL::double precision[])
 RETURNS raster
 LANGUAGE plpgsql
 STABLE
AS $function$
	DECLARE
		rtn raster;
		_returnband text;
		newnodata1 float8;
		newnodata2 float8;
	BEGIN
		newnodata1 := coalesce(nodataval[1], ST_BandNodataValue(rast1, band1), ST_MinPossibleValue(ST_BandPixelType(rast1, band1)));
		newnodata2 := coalesce(nodataval[2], ST_BandNodataValue(rast2, band2), ST_MinPossibleValue(ST_BandPixelType(rast2, band2)));
		
		_returnband := upper(returnband);
		rtn := NULL;
		CASE
			WHEN _returnband = 'BAND1' THEN
				rtn := ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast1.val]', ST_BandPixelType(rast1, band1), 'INTERSECTION', newnodata1::text, newnodata1::text, newnodata1);
				rtn := ST_SetBandNodataValue(rtn, 1, newnodata1);
			WHEN _returnband = 'BAND2' THEN
				rtn := ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast2.val]', ST_BandPixelType(rast2, band2), 'INTERSECTION', newnodata2::text, newnodata2::text, newnodata2);
				rtn := ST_SetBandNodataValue(rtn, 1, newnodata2);
			WHEN _returnband = 'BOTH' THEN
				rtn := ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast1.val]', ST_BandPixelType(rast1, band1), 'INTERSECTION', newnodata1::text, newnodata1::text, newnodata1);
				rtn := ST_SetBandNodataValue(rtn, 1, newnodata1);
				rtn := ST_AddBand(rtn, ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast2.val]', ST_BandPixelType(rast2, band2), 'INTERSECTION', newnodata2::text, newnodata2::text, newnodata2));
				rtn := ST_SetBandNodataValue(rtn, 2, newnodata2);
			ELSE
				RAISE EXCEPTION 'Unknown value provided for returnband: %', returnband;
				RETURN NULL;
		END CASE;
		RETURN rtn;
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($1, $2, $3, $4, $5, ARRAY[$6, $6]) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision[])
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($1, $2, $3, $4, 'BOTH', $5) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($1, $2, $3, $4, 'BOTH', ARRAY[$5, $5]) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, rast2 raster, returnband text DEFAULT 'BOTH'::text, nodataval double precision[] DEFAULT NULL::double precision[])
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($1, 1, $2, 1, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$intersection$function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($1, 1, $2, 1, $3, ARRAY[$4, $4]) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, rast2 raster, nodataval double precision[])
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($1, 1, $2, 1, 'BOTH', $3) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, rast2 raster, nodataval double precision)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($1, 1, $2, 1, 'BOTH', ARRAY[$3, $3]) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast raster, band integer, geomin geometry)
 RETURNS SETOF geomval
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($3, $1, $2) $function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - (T) Returns a geometry that represents the shared portion of geomA and geomB. The geography implementation does a transform to geometry to do the intersection and then transform back to WGS84.]]></comment>
		</function>
		<function name="st_intersection_001" id="Function2000295" isSystem="false" >
			<comment><![CDATA[args: geogA, geogB - (T) Returns a geometry that represents the shared portion of geomA and geomB. The geography implementation does a transform to geometry to do the intersection and then transform back to WGS84.]]></comment>
		</function>
		<function name="st_intersection_002" id="Function2000295" isSystem="false" />
		<function name="st_intersection_003" id="Function2000295" isSystem="false" >
			<comment><![CDATA[args: geom, rast, band_num=1 - Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.]]></comment>
		</function>
		<function name="st_intersection_004" id="Function2000295" isSystem="false" >
			<comment><![CDATA[args: rast, band_num, geom - Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.]]></comment>
		</function>
		<function name="st_intersection_005" id="Function2000295" isSystem="false" >
			<comment><![CDATA[args: rast, geom - Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.]]></comment>
		</function>
		<function name="st_intersection_006" id="Function2000295" isSystem="false" >
			<comment><![CDATA[args: rast1, band_num1, rast2, band_num2, returnband='BOTH', nodataval=NULL - Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.]]></comment>
		</function>
		<function name="st_intersection_007" id="Function2000295" isSystem="false" />
		<function name="st_intersection_008" id="Function2000296" isSystem="false" >
			<comment><![CDATA[args: rast1, band_num1, rast2, band_num2, nodataval - Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.]]></comment>
		</function>
		<function name="st_intersection_009" id="Function2000296" isSystem="false" />
		<function name="st_intersection_010" id="Function2000296" isSystem="false" >
			<comment><![CDATA[args: rast1, rast2, returnband='BOTH', nodataval=NULL - Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.]]></comment>
		</function>
		<function name="st_intersection_011" id="Function2000296" isSystem="false" />
		<function name="st_intersection_012" id="Function2000296" isSystem="false" >
			<comment><![CDATA[args: rast1, rast2, nodataval - Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.]]></comment>
		</function>
		<function name="st_intersection_013" id="Function2000296" isSystem="false" />
		<function name="st_intersects" id="Function2000296" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersects(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Intersects($1,$2)$function$
CREATE OR REPLACE FUNCTION public.st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN TRUE ELSE _st_intersects($1, $2, $3, $4) END $function$
CREATE OR REPLACE FUNCTION public.st_intersects(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT st_intersects($1, NULL::integer, $2, NULL::integer) $function$
CREATE OR REPLACE FUNCTION public.st_intersects(rast raster, geom geometry, nband integer DEFAULT NULL::integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1::geometry && $2 AND _st_intersects($1, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_intersects(rast raster, nband integer, geom geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1::geometry && $3 AND _st_intersects($1, $3, $2) $function$
CREATE OR REPLACE FUNCTION public.st_intersects(geom geometry, rast raster, nband integer DEFAULT NULL::integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1 && $2::geometry AND _st_intersects($1, $2, $3); $function$
CREATE OR REPLACE FUNCTION public.st_intersects(geography, geography)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Distance($1, $2, 0.0, false) < 0.00001$function$
CREATE OR REPLACE FUNCTION public.st_intersects(text, text)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT ST_Intersects($1::geometry, $2::geometry);  $function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns TRUE if the Geometries/Geography "spatially intersect in 2D" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)]]></comment>
		</function>
		<function name="st_intersects_001" id="Function2000296" isSystem="false" >
			<comment><![CDATA[args: geogA, geogB - Returns TRUE if the Geometries/Geography "spatially intersect in 2D" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)]]></comment>
		</function>
		<function name="st_intersects_002" id="Function2000296" isSystem="false" />
		<function name="st_intersects_003" id="Function2000296" isSystem="false" >
			<comment><![CDATA[args: rasta, nbanda, rastb, nbandb - Return true if the raster spatially intersects a separate raster or geometry. If the band number is not provided (or set to NULL), only the convex hull of the raster is considered in the test. If the band number is provided, only those pixels with value (not NODATA) are considered in the test.]]></comment>
		</function>
		<function name="st_intersects_004" id="Function2000296" isSystem="false" >
			<comment><![CDATA[args: rasta, rastb - Return true if the raster spatially intersects a separate raster or geometry. If the band number is not provided (or set to NULL), only the convex hull of the raster is considered in the test. If the band number is provided, only those pixels with value (not NODATA) are considered in the test.]]></comment>
		</function>
		<function name="st_intersects_005" id="Function2000296" isSystem="false" >
			<comment><![CDATA[args: rast, geommin, nband=NULL - Return true if the raster spatially intersects a separate raster or geometry. If the band number is not provided (or set to NULL), only the convex hull of the raster is considered in the test. If the band number is provided, only those pixels with value (not NODATA) are considered in the test.]]></comment>
		</function>
		<function name="st_intersects_006" id="Function2000297" isSystem="false" >
			<comment><![CDATA[args: rast, nband, geommin - Return true if the raster spatially intersects a separate raster or geometry. If the band number is not provided (or set to NULL), only the convex hull of the raster is considered in the test. If the band number is provided, only those pixels with value (not NODATA) are considered in the test.]]></comment>
		</function>
		<function name="st_intersects_007" id="Function2000297" isSystem="false" >
			<comment><![CDATA[args: geommin, rast, nband=NULL - Return true if the raster spatially intersects a separate raster or geometry. If the band number is not provided (or set to NULL), only the convex hull of the raster is considered in the test. If the band number is provided, only those pixels with value (not NODATA) are considered in the test.]]></comment>
		</function>
		<function name="st_isclosed" id="Function2000297" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isclosed(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_isclosed$function$
]]></string>
			<comment><![CDATA[args: g - Returns TRUE if the LINESTRINGs start and end points are coincident. For Polyhedral surface is closed (volumetric).]]></comment>
		</function>
		<function name="st_iscollection" id="Function2000297" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_iscollection(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$ST_IsCollection$function$
]]></string>
			<comment><![CDATA[args: g - Returns TRUE if the argument is a collection (MULTI*, GEOMETRYCOLLECTION, ...)]]></comment>
		</function>
		<function name="st_isempty" id="Function2000297" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isempty(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_isempty$function$
CREATE OR REPLACE FUNCTION public.st_isempty(rast raster)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_isEmpty$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns true if this Geometry is an empty geometrycollection, polygon, point etc.]]></comment>
		</function>
		<function name="st_isempty_001" id="Function2000297" isSystem="false" >
			<comment><![CDATA[args: rast - Returns true if the raster is empty (width = 0 and height = 0). Otherwise, returns false.]]></comment>
		</function>
		<function name="st_isring" id="Function2000297" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isring(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$isring$function$
]]></string>
			<comment><![CDATA[args: g - Returns TRUE if this LINESTRING is both closed and simple.]]></comment>
		</function>
		<function name="st_issimple" id="Function2000297" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_issimple(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$issimple$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns (TRUE) if this Geometry has no anomalous geometric points, such as self intersection or self tangency.]]></comment>
		</function>
		<function name="st_isvalid" id="Function2000297" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isvalid(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$isvalid$function$
CREATE OR REPLACE FUNCTION public.st_isvalid(geometry, integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT (ST_isValidDetail($1, $2)).valid$function$
]]></string>
			<comment><![CDATA[args: g, flags - Returns true if the ST_Geometry is well formed.]]></comment>
		</function>
		<function name="st_isvalid_001" id="Function2000298" isSystem="false" >
			<comment><![CDATA[args: g - Returns true if the ST_Geometry is well formed.]]></comment>
		</function>
		<function name="st_isvaliddetail" id="Function2000298" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isvaliddetail(geometry)
 RETURNS valid_detail
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$isvaliddetail$function$
CREATE OR REPLACE FUNCTION public.st_isvaliddetail(geometry, integer)
 RETURNS valid_detail
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$isvaliddetail$function$
]]></string>
			<comment><![CDATA[args: geom - Returns a valid_detail (valid,reason,location) row stating if a geometry is valid or not and if not valid, a reason why and a location where.]]></comment>
		</function>
		<function name="st_isvaliddetail_001" id="Function2000298" isSystem="false" >
			<comment><![CDATA[args: geom, flags - Returns a valid_detail (valid,reason,location) row stating if a geometry is valid or not and if not valid, a reason why and a location where.]]></comment>
		</function>
		<function name="st_isvalidreason" id="Function2000298" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isvalidreason(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$isvalidreason$function$
CREATE OR REPLACE FUNCTION public.st_isvalidreason(geometry, integer)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
SELECT CASE WHEN valid THEN 'Valid Geometry' ELSE reason END FROM (
	SELECT (ST_isValidDetail($1, $2)).*
) foo
	$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns text stating if a geometry is valid or not and if not valid, a reason why.]]></comment>
		</function>
		<function name="st_isvalidreason_001" id="Function2000298" isSystem="false" >
			<comment><![CDATA[args: geomA, flags - Returns text stating if a geometry is valid or not and if not valid, a reason why.]]></comment>
		</function>
		<function name="st_length" id="Function2000298" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length(text)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_Length($1::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_length(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_length2d_linestring$function$
CREATE OR REPLACE FUNCTION public.st_length(geog geography, use_spheroid boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$geography_length$function$
]]></string>
			<comment><![CDATA[args: a_2dlinestring - Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)]]></comment>
		</function>
		<function name="st_length_001" id="Function2000298" isSystem="false" >
			<comment><![CDATA[args: geog, use_spheroid=true - Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)]]></comment>
		</function>
		<function name="st_length_002" id="Function2000298" isSystem="false" />
		<function name="st_length2d" id="Function2000298" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length2d(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_length2d_linestring$function$
]]></string>
			<comment><![CDATA[args: a_2dlinestring - Returns the 2-dimensional length of the geometry if it is a linestring or multi-linestring. This is an alias for ST_Length]]></comment>
		</function>
		<function name="st_length2d_spheroid" id="Function2000298" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length2d_spheroid(geometry, spheroid)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$LWGEOM_length2d_ellipsoid$function$
]]></string>
			<comment><![CDATA[args: a_linestring, a_spheroid - Calculates the 2D length of a linestring/multilinestring on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.]]></comment>
		</function>
		<function name="st_length_spheroid" id="Function2000299" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length_spheroid(geometry, spheroid)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$LWGEOM_length_ellipsoid_linestring$function$
]]></string>
			<comment><![CDATA[args: a_linestring, a_spheroid - Calculates the 2D or 3D length of a linestring/multilinestring on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.]]></comment>
		</function>
		<function name="st_line_interpolate_point" id="Function2000299" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_line_interpolate_point(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_line_interpolate_point$function$
]]></string>
			<comment><![CDATA[args: a_linestring, a_fraction - Returns a point interpolated along a line. Second argument is a float8 between 0 and 1 representing fraction of total length of linestring the point has to be located.]]></comment>
		</function>
		<function name="st_line_locate_point" id="Function2000299" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_line_locate_point(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_line_locate_point$function$
]]></string>
			<comment><![CDATA[args: a_linestring, a_point - Returns a float between 0 and 1 representing the location of the closest point on LineString to the given Point, as a fraction of total 2d line length.]]></comment>
		</function>
		<function name="st_line_substring" id="Function2000299" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_line_substring(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_line_substring$function$
]]></string>
			<comment><![CDATA[args: a_linestring, startfraction, endfraction - Return a linestring being a substring of the input one starting and ending at the given fractions of total 2d length. Second and third arguments are float8 values between 0 and 1.]]></comment>
		</function>
		<function name="st_linecrossingdirection" id="Function2000299" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linecrossingdirection(geom1 geometry, geom2 geometry)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT CASE WHEN NOT $1 && $2 THEN 0 ELSE _ST_LineCrossingDirection($1,$2) END $function$
]]></string>
			<comment><![CDATA[args: linestringA, linestringB - Given 2 linestrings, returns a number between -3 and 3 denoting what kind of crossing behavior. 0 is no crossing.]]></comment>
		</function>
		<function name="st_linefrommultipoint" id="Function2000299" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linefrommultipoint(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_line_from_mpoint$function$
]]></string>
			<comment><![CDATA[args: aMultiPoint - Creates a LineString from a MultiPoint geometry.]]></comment>
		</function>
		<function name="st_linefromtext" id="Function2000299" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linefromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'LINESTRING'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_linefromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to -1.]]></comment>
		</function>
		<function name="st_linefromtext_001" id="Function2000299" isSystem="false" >
			<comment><![CDATA[args: WKT, srid - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to -1.]]></comment>
		</function>
		<function name="st_linefromwkb" id="Function2000300" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linefromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_linefromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKB, srid - Makes a LINESTRING from WKB with the given SRID]]></comment>
		</function>
		<function name="st_linefromwkb_001" id="Function2000300" isSystem="false" >
			<comment><![CDATA[args: WKB - Makes a LINESTRING from WKB with the given SRID]]></comment>
		</function>
		<function name="st_linemerge" id="Function2000300" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linemerge(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$linemerge$function$
]]></string>
			<comment><![CDATA[args: amultilinestring - Returns a (set of) LineString(s) formed by sewing together a MULTILINESTRING.]]></comment>
		</function>
		<function name="st_linestringfromwkb" id="Function2000300" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linestringfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_linestringfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKB, srid - Makes a geometry from WKB with the given SRID.]]></comment>
		</function>
		<function name="st_linestringfromwkb_001" id="Function2000300" isSystem="false" >
			<comment><![CDATA[args: WKB - Makes a geometry from WKB with the given SRID.]]></comment>
		</function>
		<function name="st_linetocurve" id="Function2000300" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linetocurve(geometry geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_line_desegmentize$function$
]]></string>
			<comment><![CDATA[args: geomANoncircular - Converts a LINESTRING/POLYGON to a CIRCULARSTRING, CURVED POLYGON]]></comment>
		</function>
		<function name="st_locate_along_measure" id="Function2000300" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locate_along_measure(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_locate_between_measures($1, $2, $2) $function$
]]></string>
		</function>
		<function name="st_locate_between_measures" id="Function2000300" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locate_between_measures(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_locate_between_m$function$
]]></string>
		</function>
		<function name="st_locatealong" id="Function2000300" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locatealong(geometry geometry, measure double precision, leftrightoffset double precision DEFAULT 0.0)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$ST_LocateAlong$function$
]]></string>
			<comment><![CDATA[args: ageom_with_measure, a_measure, offset - Return a derived geometry collection value with elements that match the specified measure. Polygonal elements are not supported.]]></comment>
		</function>
		<function name="st_locatebetween" id="Function2000301" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locatebetween(geometry geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision DEFAULT 0.0)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$ST_LocateBetween$function$
]]></string>
			<comment><![CDATA[args: geomA, measure_start, measure_end, offset - Return a derived geometry collection value with elements that match the specified range of measures inclusively. Polygonal elements are not supported.]]></comment>
		</function>
		<function name="st_locatebetweenelevations" id="Function2000301" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locatebetweenelevations(geometry geometry, fromelevation double precision, toelevation double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$ST_LocateBetweenElevations$function$
]]></string>
			<comment><![CDATA[args: geom_mline, elevation_start, elevation_end - Return a derived geometry (collection) value with elements that intersect the specified range of elevations inclusively. Only 3D, 4D LINESTRINGS and MULTILINESTRINGS are supported.]]></comment>
		</function>
		<function name="st_longestline" id="Function2000301" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_longestline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_LongestLine(ST_ConvexHull($1), ST_ConvexHull($2))$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 2-dimensional longest line points of two geometries. The function will only return the first longest line if more than one, that the function finds. The line returned will always start in g1 and end in g2. The length of the line this function returns will always be the same as st_maxdistance returns for g1 and g2.]]></comment>
		</function>
		<function name="st_m" id="Function2000301" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_m(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_m_point$function$
]]></string>
			<comment><![CDATA[args: a_point - Return the M coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
		</function>
		<function name="st_makebox2d" id="Function2000301" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makebox2d(geom1 geometry, geom2 geometry)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX2D_construct$function$
]]></string>
			<comment><![CDATA[args: pointLowLeft, pointUpRight - Creates a BOX2D defined by the given point geometries.]]></comment>
		</function>
		<function name="st_makeemptyraster" id="Function2000301" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makeemptyraster(rast raster)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
		DECLARE
			w int;
			h int;
			ul_x double precision;
			ul_y double precision;
			scale_x double precision;
			scale_y double precision;
			skew_x double precision;
			skew_y double precision;
			sr_id int;
		BEGIN
			SELECT width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid INTO w, h, ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id FROM ST_Metadata(rast);
			RETURN st_makeemptyraster(w, h, ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id);
		END;
    $function$
CREATE OR REPLACE FUNCTION public.st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_makeemptyraster($1, $2, $3, $4, $5, -($5), 0, 0, ST_SRID('POINT(0 0)'::geometry)) $function$
CREATE OR REPLACE FUNCTION public.st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer DEFAULT 0)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_makeEmpty$function$
]]></string>
			<comment><![CDATA[args: width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid=unknown - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).]]></comment>
		</function>
		<function name="st_makeemptyraster_001" id="Function2000301" isSystem="false" >
			<comment><![CDATA[args: width, height, upperleftx, upperlefty, pixelsize - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).]]></comment>
		</function>
		<function name="st_makeemptyraster_002" id="Function2000301" isSystem="false" >
			<comment><![CDATA[args: rast - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).]]></comment>
		</function>
		<function name="st_makeenvelope" id="Function2000301" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makeenvelope(double precision, double precision, double precision, double precision, integer DEFAULT 0)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$ST_MakeEnvelope$function$
]]></string>
			<comment><![CDATA[args: xmin, ymin, xmax, ymax, srid=unknown - Creates a rectangular Polygon formed from the given minimums and maximums. Input values must be in SRS specified by the SRID.]]></comment>
		</function>
		<function name="st_makeline" id="Function2000302" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makeline(geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_makeline_garray$function$
CREATE OR REPLACE FUNCTION public.st_makeline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_makeline$function$
]]></string>
			<comment><![CDATA[args: geoms_array - Creates a Linestring from point or line geometries.]]></comment>
		</function>
		<function name="st_makeline_001" id="Function2000302" isSystem="false" >
			<comment><![CDATA[args: geom1, geom2 - Creates a Linestring from point or line geometries.]]></comment>
		</function>
		<function name="st_makeline_002" id="Function2000302" isSystem="false" >
			<comment><![CDATA[args: geoms - Creates a Linestring from point or line geometries.]]></comment>
		</function>
		<function name="st_makepoint" id="Function2000302" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makepoint(double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_makepoint$function$
CREATE OR REPLACE FUNCTION public.st_makepoint(double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_makepoint$function$
CREATE OR REPLACE FUNCTION public.st_makepoint(double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_makepoint$function$
]]></string>
			<comment><![CDATA[args: x, y - Creates a 2D,3DZ or 4D point geometry.]]></comment>
		</function>
		<function name="st_makepoint_001" id="Function2000302" isSystem="false" >
			<comment><![CDATA[args: x, y, z - Creates a 2D,3DZ or 4D point geometry.]]></comment>
		</function>
		<function name="st_makepoint_002" id="Function2000302" isSystem="false" >
			<comment><![CDATA[args: x, y, z, m - Creates a 2D,3DZ or 4D point geometry.]]></comment>
		</function>
		<function name="st_makepointm" id="Function2000302" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makepointm(double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_makepoint3dm$function$
]]></string>
			<comment><![CDATA[args: x, y, m - Creates a point geometry with an x y and m coordinate.]]></comment>
		</function>
		<function name="st_makepolygon" id="Function2000302" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makepolygon(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_makepoly$function$
CREATE OR REPLACE FUNCTION public.st_makepolygon(geometry, geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_makepoly$function$
]]></string>
			<comment><![CDATA[args: outerlinestring, interiorlinestrings - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.]]></comment>
		</function>
		<function name="st_makepolygon_001" id="Function2000302" isSystem="false" >
			<comment><![CDATA[args: linestring - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.]]></comment>
		</function>
		<function name="st_makevalid" id="Function2000303" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makevalid(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$ST_MakeValid$function$
]]></string>
			<comment><![CDATA[args: input - Attempts to make an invalid geometry valid w/out loosing vertices.]]></comment>
		</function>
		<function name="st_mapalgebraexpr" id="Function2000303" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebraexpr(rast raster, pixeltype text, expression text, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebraexpr($1, 1, $2, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebraexpr(rast raster, band integer, pixeltype text, expression text, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_mapAlgebraExpr$function$
CREATE OR REPLACE FUNCTION public.st_mapalgebraexpr(rast1 raster, rast2 raster, expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_mapalgebraexpr($1, 1, $2, 1, $3, $4, $5, $6, $7, $8) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebraexpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE c
 STABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_mapAlgebra2$function$
]]></string>
			<comment><![CDATA[args: rast, band, pixeltype, expression, nodataval=NULL - 1 raster band version: Creates a new one band raster formed by applying a valid PostgreSQL algebraic operation on the input raster band and of pixeltype provided. Band 1 is assumed if no band is specified.]]></comment>
		</function>
		<function name="st_mapalgebraexpr_001" id="Function2000303" isSystem="false" >
			<comment><![CDATA[args: rast, pixeltype, expression, nodataval=NULL - 1 raster band version: Creates a new one band raster formed by applying a valid PostgreSQL algebraic operation on the input raster band and of pixeltype provided. Band 1 is assumed if no band is specified.]]></comment>
		</function>
		<function name="st_mapalgebraexpr_002" id="Function2000303" isSystem="false" >
			<comment><![CDATA[args: rast1, band1, rast2, band2, expression, pixeltype=same_as_rast1_band, extenttype=INTERSECTION, nodata1expr=NULL, nodata2expr=NULL, nodatanodataval=NULL - 2 raster band version: Creates a new one band raster formed by applying a valid PostgreSQL algebraic operation on the two input raster bands and of pixeltype provided. band 1 of each raster is assumed if no band numbers are specified. The resulting raster will be aligned (scale, skew and pixel corners) on the grid defined by the first raster and have its extent defined by the "extenttype" parameter. Values for "extenttype" can be: INTERSECTION, UNION, FIRST, SECOND.]]></comment>
		</function>
		<function name="st_mapalgebraexpr_003" id="Function2000303" isSystem="false" >
			<comment><![CDATA[args: rast1, rast2, expression, pixeltype=same_as_rast1_band, extenttype=INTERSECTION, nodata1expr=NULL, nodata2expr=NULL, nodatanodataval=NULL - 2 raster band version: Creates a new one band raster formed by applying a valid PostgreSQL algebraic operation on the two input raster bands and of pixeltype provided. band 1 of each raster is assumed if no band numbers are specified. The resulting raster will be aligned (scale, skew and pixel corners) on the grid defined by the first raster and have its extent defined by the "extenttype" parameter. Values for "extenttype" can be: INTERSECTION, UNION, FIRST, SECOND.]]></comment>
		</function>
		<function name="st_mapalgebrafct" id="Function2000303" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[])
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_mapAlgebraFct$function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebrafct($1, $2, $3, $4, NULL) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[])
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebrafct($1, $2, NULL, $3, VARIADIC $4) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebrafct($1, $2, NULL, $3, NULL) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[])
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebrafct($1, 1, $2, $3, VARIADIC $4) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebrafct($1, 1, $2, $3, NULL) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, onerastuserfunc regprocedure, VARIADIC args text[])
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebrafct($1, 1, NULL, $2, VARIADIC $3) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, onerastuserfunc regprocedure)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebrafct($1, 1, NULL, $2, NULL) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast1 raster, band1 integer, rast2 raster, band2 integer, tworastuserfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE c
 STABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_mapAlgebra2$function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast1 raster, rast2 raster, tworastuserfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_mapalgebrafct($1, 1, $2, 1, $3, $4, $5, VARIADIC $6) $function$
]]></string>
			<comment><![CDATA[args: rast, band, pixeltype, onerasteruserfunc, VARIADIC args - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.]]></comment>
		</function>
		<function name="st_mapalgebrafct_001" id="Function2000304" isSystem="false" >
			<comment><![CDATA[args: rast, band, pixeltype, onerasteruserfunc - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.]]></comment>
		</function>
		<function name="st_mapalgebrafct_002" id="Function2000304" isSystem="false" >
			<comment><![CDATA[args: rast, band, onerasteruserfunc, VARIADIC args - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.]]></comment>
		</function>
		<function name="st_mapalgebrafct_003" id="Function2000304" isSystem="false" >
			<comment><![CDATA[args: rast, band, onerasteruserfunc - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.]]></comment>
		</function>
		<function name="st_mapalgebrafct_004" id="Function2000304" isSystem="false" >
			<comment><![CDATA[args: rast, pixeltype, onerasteruserfunc, VARIADIC args - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.]]></comment>
		</function>
		<function name="st_mapalgebrafct_005" id="Function2000304" isSystem="false" >
			<comment><![CDATA[args: rast, pixeltype, onerasteruserfunc - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.]]></comment>
		</function>
		<function name="st_mapalgebrafct_006" id="Function2000304" isSystem="false" >
			<comment><![CDATA[args: rast, onerasteruserfunc, VARIADIC args - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.]]></comment>
		</function>
		<function name="st_mapalgebrafct_007" id="Function2000304" isSystem="false" >
			<comment><![CDATA[args: rast, onerasteruserfunc - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.]]></comment>
		</function>
		<function name="st_mapalgebrafct_008" id="Function2000305" isSystem="false" >
			<comment><![CDATA[args: rast1, band1, rast2, band2, tworastuserfunc, pixeltype=same_as_rast1, extenttype=INTERSECTION, VARIADIC userargs - 2 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the 2 input raster bands and of pixeltype prodived. Band 1 is assumed if no band is specified. Extent type defaults to INTERSECTION if not specified.]]></comment>
		</function>
		<function name="st_mapalgebrafct_009" id="Function2000305" isSystem="false" >
			<comment><![CDATA[args: rast1, rast2, tworastuserfunc, pixeltype=same_as_rast1, extenttype=INTERSECTION, VARIADIC userargs - 2 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the 2 input raster bands and of pixeltype prodived. Band 1 is assumed if no band is specified. Extent type defaults to INTERSECTION if not specified.]]></comment>
		</function>
		<function name="st_mapalgebrafctngb" id="Function2000305" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafctngb(rast raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[])
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_mapAlgebraFctNgb$function$
]]></string>
			<comment><![CDATA[args: rast, band, pixeltype, ngbwidth, ngbheight, onerastngbuserfunc, nodatamode, VARIADIC args - 1-band version: Map Algebra Nearest Neighbor using user-defined PostgreSQL function. Return a raster which values are the result of a PLPGSQL user function involving a neighborhood of values from the input raster band.]]></comment>
		</function>
		<function name="st_max4ma" id="Function2000305" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
    DECLARE
        _matrix float[][];
        max float;
    BEGIN
        _matrix := matrix;
        max := '-Infinity'::float;
        FOR x in array_lower(_matrix, 1)..array_upper(_matrix, 1) LOOP
            FOR y in array_lower(_matrix, 2)..array_upper(_matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF max < _matrix[x][y] THEN
                    max := _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        RETURN max;
    END;
    $function$
]]></string>
			<comment><![CDATA[args: matrix, nodatamode, VARIADIC args - Raster processing function that calculates the maximum pixel value in a neighborhood.]]></comment>
		</function>
		<function name="st_maxdistance" id="Function2000305" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_maxdistance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_MaxDistance(ST_ConvexHull($1), ST_ConvexHull($2))$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 2-dimensional largest distance between two geometries in projected units.]]></comment>
		</function>
		<function name="st_mean4ma" id="Function2000305" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
    DECLARE
        _matrix float[][];
        sum float;
        count float;
    BEGIN
        _matrix := matrix;
        sum := 0;
        count := 0;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF nodatamode = 'ignore' THEN
                        _matrix[x][y] := 0;
                    ELSE
                        _matrix[x][y] := nodatamode::float;
                        count := count + 1;
                    END IF;
                ELSE
                    count := count + 1;
                END IF;
                sum := sum + _matrix[x][y];
            END LOOP;
        END LOOP;
        IF count = 0 THEN
            RETURN NULL;
        END IF;
        RETURN sum / count;
    END;
    $function$
]]></string>
			<comment><![CDATA[args: matrix, nodatamode, VARIADIC args - Raster processing function that calculates the mean pixel value in a neighborhood.]]></comment>
		</function>
		<function name="st_mem_size" id="Function2000306" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mem_size(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_mem_size$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the amount of space (in bytes) the geometry takes.]]></comment>
		</function>
		<function name="st_memcollect" id="Function2000306" isSystem="false" />
		<function name="st_memunion" id="Function2000306" isSystem="false" >
			<comment><![CDATA[args: geomfield - Same as ST_Union, only memory-friendly (uses less memory and more processor time).]]></comment>
		</function>
		<function name="st_metadata" id="Function2000306" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_metadata(rast raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer)
 RETURNS record
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_metadata$function$
]]></string>
			<comment><![CDATA[args: rast - Returns basic meta data about a raster object such as pixel size, rotation (skew), upper, lower left, etc.]]></comment>
		</function>
		<function name="st_min4ma" id="Function2000306" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
    DECLARE
        _matrix float[][];
        min float;
    BEGIN
        _matrix := matrix;
        min := 'Infinity'::float;
        FOR x in array_lower(_matrix, 1)..array_upper(_matrix, 1) LOOP
            FOR y in array_lower(_matrix, 2)..array_upper(_matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF min > _matrix[x][y] THEN
                    min := _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        RETURN min;
    END;
    $function$
]]></string>
			<comment><![CDATA[args: matrix, nodatamode, VARIADIC args - Raster processing function that calculates the minimum pixel value in a neighborhood.]]></comment>
		</function>
		<function name="st_minimumboundingcircle" id="Function2000306" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer DEFAULT 48)
 RETURNS geometry
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
	hull GEOMETRY;
	ring GEOMETRY;
	center GEOMETRY;
	radius DOUBLE PRECISION;
	dist DOUBLE PRECISION;
	d DOUBLE PRECISION;
	idx1 integer;
	idx2 integer;
	l1 GEOMETRY;
	l2 GEOMETRY;
	p1 GEOMETRY;
	p2 GEOMETRY;
	a1 DOUBLE PRECISION;
	a2 DOUBLE PRECISION;

	BEGIN
	-- First compute the ConvexHull of the geometry
	hull = ST_ConvexHull(inputgeom);
	--A point really has no MBC
	IF ST_GeometryType(hull) = 'ST_Point' THEN
		RETURN hull;
	END IF;
	-- convert the hull perimeter to a linestring so we can manipulate individual points
	--If its already a linestring force it to a closed linestring
	ring = CASE WHEN ST_GeometryType(hull) = 'ST_LineString' THEN ST_AddPoint(hull, ST_StartPoint(hull)) ELSE ST_ExteriorRing(hull) END;
	dist = 0;
	-- Brute Force - check every pair
	FOR i in 1 .. (ST_NumPoints(ring)-2)
		LOOP
			FOR j in i .. (ST_NumPoints(ring)-1)
				LOOP
				d = ST_Distance(ST_PointN(ring,i),ST_PointN(ring,j));
				-- Check the distance and update if larger
				IF (d > dist) THEN
					dist = d;
					idx1 = i;
					idx2 = j;
				END IF;
			END LOOP;
		END LOOP;
	-- We now have the diameter of the convex hull.  The following line returns it if desired.
	-- RETURN ST_MakeLine(ST_PointN(ring,idx1),ST_PointN(ring,idx2));
	-- Now for the Minimum Bounding Circle.  Since we know the two points furthest from each
	-- other, the MBC must go through those two points. Start with those points as a diameter of a circle.
	-- The radius is half the distance between them and the center is midway between them
	radius = ST_Distance(ST_PointN(ring,idx1),ST_PointN(ring,idx2)) / 2.0;
	center = ST_Line_interpolate_point(ST_MakeLine(ST_PointN(ring,idx1),ST_PointN(ring,idx2)),0.5);
	-- Loop through each vertex and check if the distance from the center to the point
	-- is greater than the current radius.
	FOR k in 1 .. (ST_NumPoints(ring)-1)
		LOOP
		IF(k <> idx1 and k <> idx2) THEN
			dist = ST_Distance(center,ST_PointN(ring,k));
			IF (dist > radius) THEN
				-- We have to expand the circle.  The new circle must pass trhough
				-- three points - the two original diameters and this point.
				-- Draw a line from the first diameter to this point
				l1 = ST_Makeline(ST_PointN(ring,idx1),ST_PointN(ring,k));
				-- Compute the midpoint
				p1 = ST_line_interpolate_point(l1,0.5);
				-- Rotate the line 90 degrees around the midpoint (perpendicular bisector)
				l1 = ST_Rotate(l1,pi()/2,p1);
				--  Compute the azimuth of the bisector
				a1 = ST_Azimuth(ST_PointN(l1,1),ST_PointN(l1,2));
				--  Extend the line in each direction the new computed distance to insure they will intersect
				l1 = ST_AddPoint(l1,ST_Makepoint(ST_X(ST_PointN(l1,2))+sin(a1)*dist,ST_Y(ST_PointN(l1,2))+cos(a1)*dist),-1);
				l1 = ST_AddPoint(l1,ST_Makepoint(ST_X(ST_PointN(l1,1))-sin(a1)*dist,ST_Y(ST_PointN(l1,1))-cos(a1)*dist),0);
				-- Repeat for the line from the point to the other diameter point
				l2 = ST_Makeline(ST_PointN(ring,idx2),ST_PointN(ring,k));
				p2 = ST_Line_interpolate_point(l2,0.5);
				l2 = ST_Rotate(l2,pi()/2,p2);
				a2 = ST_Azimuth(ST_PointN(l2,1),ST_PointN(l2,2));
				l2 = ST_AddPoint(l2,ST_Makepoint(ST_X(ST_PointN(l2,2))+sin(a2)*dist,ST_Y(ST_PointN(l2,2))+cos(a2)*dist),-1);
				l2 = ST_AddPoint(l2,ST_Makepoint(ST_X(ST_PointN(l2,1))-sin(a2)*dist,ST_Y(ST_PointN(l2,1))-cos(a2)*dist),0);
				-- The new center is the intersection of the two bisectors
				center = ST_Intersection(l1,l2);
				-- The new radius is the distance to any of the three points
				radius = ST_Distance(center,ST_PointN(ring,idx1));
			END IF;
		END IF;
		END LOOP;
	--DONE!!  Return the MBC via the buffer command
	RETURN ST_Buffer(center,radius,segs_per_quarter);
	END;
$function$
]]></string>
			<comment><![CDATA[args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that can fully contain a geometry. Default uses 48 segments per quarter circle.]]></comment>
		</function>
		<function name="st_minpossiblevalue" id="Function2000307" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_minpossiblevalue(pixeltype text)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_minPossibleValue$function$
]]></string>
		</function>
		<function name="st_mlinefromtext" id="Function2000307" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mlinefromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_mlinefromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTILINESTRING'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Return a specified ST_MultiLineString value from WKT representation.]]></comment>
		</function>
		<function name="st_mlinefromtext_001" id="Function2000307" isSystem="false" >
			<comment><![CDATA[args: WKT - Return a specified ST_MultiLineString value from WKT representation.]]></comment>
		</function>
		<function name="st_mlinefromwkb" id="Function2000307" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mlinefromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_mlinefromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_mlinefromwkb_001" id="Function2000307" isSystem="false" />
		<function name="st_mpointfromtext" id="Function2000307" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpointfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_mpointfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.]]></comment>
		</function>
		<function name="st_mpointfromtext_001" id="Function2000307" isSystem="false" >
			<comment><![CDATA[args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.]]></comment>
		</function>
		<function name="st_mpointfromwkb" id="Function2000308" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpointfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_mpointfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_mpointfromwkb_001" id="Function2000308" isSystem="false" />
		<function name="st_mpolyfromtext" id="Function2000308" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpolyfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_mpolyfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.]]></comment>
		</function>
		<function name="st_mpolyfromtext_001" id="Function2000308" isSystem="false" >
			<comment><![CDATA[args: WKT - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.]]></comment>
		</function>
		<function name="st_mpolyfromwkb" id="Function2000308" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpolyfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_mpolyfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_mpolyfromwkb_001" id="Function2000308" isSystem="false" />
		<function name="st_multi" id="Function2000308" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multi(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_force_multi$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns the geometry as a MULTI* geometry. If the geometry is already a MULTI*, it is returned unchanged.]]></comment>
		</function>
		<function name="st_multilinefromwkb" id="Function2000308" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multilinefromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_multilinestringfromtext" id="Function2000309" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multilinestringfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_MLineFromText($1)$function$
CREATE OR REPLACE FUNCTION public.st_multilinestringfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_MLineFromText($1, $2)$function$
]]></string>
		</function>
		<function name="st_multilinestringfromtext_001" id="Function2000309" isSystem="false" />
		<function name="st_multipointfromtext" id="Function2000309" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipointfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_MPointFromText($1)$function$
]]></string>
		</function>
		<function name="st_multipointfromwkb" id="Function2000309" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipointfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_multipointfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_multipointfromwkb_001" id="Function2000309" isSystem="false" />
		<function name="st_multipolyfromwkb" id="Function2000309" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipolyfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_multipolyfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_multipolyfromwkb_001" id="Function2000309" isSystem="false" />
		<function name="st_multipolygonfromtext" id="Function2000309" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipolygonfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_MPolyFromText($1)$function$
CREATE OR REPLACE FUNCTION public.st_multipolygonfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_MPolyFromText($1, $2)$function$
]]></string>
		</function>
		<function name="st_multipolygonfromtext_001" id="Function2000310" isSystem="false" />
		<function name="st_ndims" id="Function2000310" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ndims(geometry)
 RETURNS smallint
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_ndims$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns coordinate dimension of the geometry as a small int. Values are: 2,3 or 4.]]></comment>
		</function>
		<function name="st_node" id="Function2000310" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_node(g geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$ST_Node$function$
]]></string>
			<comment><![CDATA[args: geom - Node a set of linestrings.]]></comment>
		</function>
		<function name="st_npoints" id="Function2000310" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_npoints(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_npoints$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the number of points (vertexes) in a geometry.]]></comment>
		</function>
		<function name="st_nrings" id="Function2000310" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_nrings(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_nrings$function$
]]></string>
			<comment><![CDATA[args: geomA - If the geometry is a polygon or multi-polygon returns the number of rings.]]></comment>
		</function>
		<function name="st_numbands" id="Function2000310" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numbands(raster)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getNumBands$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the number of bands in the raster object.]]></comment>
		</function>
		<function name="st_numgeometries" id="Function2000311" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numgeometries(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_numgeometries_collection$function$
]]></string>
			<comment><![CDATA[args: geom - If geometry is a GEOMETRYCOLLECTION (or MULTI*) return the number of geometries, for single geometries will return 1, otherwise return NULL.]]></comment>
		</function>
		<function name="st_numinteriorring" id="Function2000311" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numinteriorring(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_numinteriorrings_polygon$function$
]]></string>
			<comment><![CDATA[args: a_polygon - Return the number of interior rings of the first polygon in the geometry. Synonym to ST_NumInteriorRings.]]></comment>
		</function>
		<function name="st_numinteriorrings" id="Function2000311" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numinteriorrings(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_numinteriorrings_polygon$function$
]]></string>
			<comment><![CDATA[args: a_polygon - Return the number of interior rings of the first polygon in the geometry. This will work with both POLYGON and MULTIPOLYGON types but only looks at the first polygon. Return NULL if there is no polygon in the geometry.]]></comment>
		</function>
		<function name="st_numpatches" id="Function2000311" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numpatches(geometry)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN ST_NumGeometries($1)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the number of faces on a Polyhedral Surface. Will return null for non-polyhedral geometries.]]></comment>
		</function>
		<function name="st_numpoints" id="Function2000311" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numpoints(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_numpoints_linestring$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the number of points in an ST_LineString or ST_CircularString value.]]></comment>
		</function>
		<function name="st_offsetcurve" id="Function2000312" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_offsetcurve(line geometry, distance double precision, params text DEFAULT ''::text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$ST_OffsetCurve$function$
]]></string>
			<comment><![CDATA[args: line, signed_distance, style_parameters=' - Return an offset line at a given distance and side from an input line. Useful for computing parallel lines about a center line]]></comment>
		</function>
		<function name="st_orderingequals" id="Function2000312" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_orderingequals(geometrya geometry, geometryb geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ 
	SELECT $1 ~= $2 AND _ST_OrderingEquals($1, $2)
	$function$
]]></string>
			<comment><![CDATA[args: A, B - Returns true if the given geometries represent the same geometry and points are in the same directional order.]]></comment>
		</function>
		<function name="st_overlaps" id="Function2000312" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_overlaps(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Overlaps($1,$2)$function$
]]></string>
			<comment><![CDATA[args: A, B - Returns TRUE if the Geometries share space, are of the same dimension, but are not completely contained by each other.]]></comment>
		</function>
		<function name="st_patchn" id="Function2000312" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_patchn(geometry, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN ST_GeometryN($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: geomA, n - Return the 1-based Nth geometry (face) if the geometry is a POLYHEDRALSURFACE, POLYHEDRALSURFACEM. Otherwise, return NULL.]]></comment>
		</function>
		<function name="st_perimeter" id="Function2000312" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_perimeter(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_perimeter2d_poly$function$
CREATE OR REPLACE FUNCTION public.st_perimeter(geog geography, use_spheroid boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$geography_perimeter$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface geometry or geography. (Polygon, Multipolygon). geometry measurement is in units of spatial reference and geography is in meters.]]></comment>
		</function>
		<function name="st_perimeter_001" id="Function2000312" isSystem="false" >
			<comment><![CDATA[args: geog, use_spheroid=true - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface geometry or geography. (Polygon, Multipolygon). geometry measurement is in units of spatial reference and geography is in meters.]]></comment>
		</function>
		<function name="st_perimeter2d" id="Function2000313" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_perimeter2d(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_perimeter2d_poly$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the 2-dimensional perimeter of the geometry, if it is a polygon or multi-polygon. This is currently an alias for ST_Perimeter.]]></comment>
		</function>
		<function name="st_pixelaspolygon" id="Function2000313" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelaspolygon(rast raster, x integer, y integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getPixelPolygon$function$
]]></string>
			<comment><![CDATA[args: rast, columnx, rowy - Returns the geometry that bounds the pixel for a particular row and column.]]></comment>
		</function>
		<function name="st_pixelaspolygons" id="Function2000313" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelaspolygons(rast raster, band integer DEFAULT 1, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE plpgsql
AS $function$
    DECLARE
        rast alias for $1;
        var_w integer;
        var_h integer;
        var_x integer;
        var_y integer;
        value float8 := NULL;
        hasband boolean := TRUE;
    BEGIN
        IF rast IS NOT NULL AND NOT ST_IsEmpty(rast) THEN
            IF ST_HasNoBand(rast, band) THEN
                RAISE NOTICE 'Raster do not have band %. Returning null values', band;
                hasband := false;
            END IF;
            SELECT ST_Width(rast), ST_Height(rast) INTO var_w, var_h;
            FOR var_x IN 1..var_w LOOP
                FOR var_y IN 1..var_h LOOP
                    IF hasband THEN
                        value := ST_Value(rast, band, var_x, var_y);
                    END IF;
                    SELECT ST_PixelAsPolygon(rast, var_x, var_y), value, var_x, var_y INTO geom,val,x,y;
                    RETURN NEXT;
                END LOOP;
            END LOOP;
        END IF;
        RETURN;
    END;
    $function$
]]></string>
			<comment><![CDATA[args: rast, band=1 - Returns the geometry that bounds every pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel.]]></comment>
		</function>
		<function name="st_pixelheight" id="Function2000313" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelheight(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getPixelHeight$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the pixel height in geometric units of the spatial reference system.]]></comment>
		</function>
		<function name="st_pixelwidth" id="Function2000313" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelwidth(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getPixelWidth$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the pixel width in geometric units of the spatial reference system.]]></comment>
		</function>
		<function name="st_point" id="Function2000313" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_point(double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_makepoint$function$
]]></string>
			<comment><![CDATA[args: x_lon, y_lat - Returns an ST_Point with the given coordinate values. OGC alias for ST_MakePoint.]]></comment>
		</function>
		<function name="st_point_inside_circle" id="Function2000314" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_point_inside_circle(geometry, double precision, double precision, double precision)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_inside_circle_point$function$
]]></string>
			<comment><![CDATA[args: a_point, center_x, center_y, radius - Is the point geometry insert circle defined by center_x, center_y, radius]]></comment>
		</function>
		<function name="st_pointfromtext" id="Function2000314" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'POINT'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_pointfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'POINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.]]></comment>
		</function>
		<function name="st_pointfromtext_001" id="Function2000314" isSystem="false" >
			<comment><![CDATA[args: WKT, srid - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.]]></comment>
		</function>
		<function name="st_pointfromwkb" id="Function2000314" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_pointfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'POINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_pointfromwkb_001" id="Function2000314" isSystem="false" />
		<function name="st_pointn" id="Function2000314" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointn(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_pointn_linestring$function$
]]></string>
			<comment><![CDATA[args: a_linestring, n - Return the Nth point in the first linestring or circular linestring in the geometry. Return NULL if there is no linestring in the geometry.]]></comment>
		</function>
		<function name="st_pointonsurface" id="Function2000314" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointonsurface(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$pointonsurface$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns a POINT guaranteed to lie on the surface.]]></comment>
		</function>
		<function name="st_polyfromtext" id="Function2000314" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polyfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'POLYGON'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_polyfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'POLYGON'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_polyfromtext_001" id="Function2000315" isSystem="false" />
		<function name="st_polyfromwkb" id="Function2000315" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polyfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_polyfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'POLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_polyfromwkb_001" id="Function2000315" isSystem="false" />
		<function name="st_polygon" id="Function2000315" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygon(geometry, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ 
	SELECT ST_SetSRID(ST_MakePolygon($1), $2)
	$function$
CREATE OR REPLACE FUNCTION public.st_polygon(rast raster, band integer DEFAULT 1)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
    SELECT st_union(f.geom) AS singlegeom
    FROM (SELECT (st_dumpaspolygons($1, $2)).geom AS geom) AS f;
    $function$
]]></string>
			<comment><![CDATA[args: aLineString, srid - Returns a polygon built from the specified linestring and SRID.]]></comment>
		</function>
		<function name="st_polygon_001" id="Function2000315" isSystem="false" >
			<comment><![CDATA[args: rast, band_num=1 - Returns a polygon geometry formed by the union of pixels that have a pixel value that is not no data value. If no band number is specified, band num defaults to 1.]]></comment>
		</function>
		<function name="st_polygonfromtext" id="Function2000315" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygonfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_PolyFromText($1)$function$
CREATE OR REPLACE FUNCTION public.st_polygonfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_PolyFromText($1, $2)$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.]]></comment>
		</function>
		<function name="st_polygonfromtext_001" id="Function2000315" isSystem="false" >
			<comment><![CDATA[args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.]]></comment>
		</function>
		<function name="st_polygonfromwkb" id="Function2000315" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygonfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_polygonfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1,$2)) = 'POLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_polygonfromwkb_001" id="Function2000315" isSystem="false" />
		<function name="st_polygonize" id="Function2000315" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygonize(geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$polygonize_garray$function$
]]></string>
			<comment><![CDATA[args: geom_array - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.]]></comment>
		</function>
		<function name="st_polygonize_001" id="Function2000315" isSystem="false" >
			<comment><![CDATA[args: geomfield - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.]]></comment>
		</function>
		<function name="st_project" id="Function2000316" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_project(geog geography, distance double precision, azimuth double precision)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE COST 100
AS '$libdir/postgis-2.0', $function$geography_project$function$
]]></string>
			<comment><![CDATA[args: g1, distance, azimuth - Returns a POINT projected from a start point using a bearing and distance.]]></comment>
		</function>
		<function name="st_quantile" id="Function2000316" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, quantiles double precision[])
 RETURNS SETOF quantile
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_quantile($1, 1, TRUE, 1, $2) $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, quantiles double precision[] DEFAULT NULL::double precision[])
 RETURNS SETOF quantile
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _st_quantile($1, $2, $3, 1, $4) $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, nband integer, quantiles double precision[])
 RETURNS SETOF quantile
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_quantile($1, $2, TRUE, 1, $3) $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, $3, 1, ARRAY[$4]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, nband integer, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, TRUE, 1, ARRAY[$3]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT (_st_quantile($1, 1, $2, 1, ARRAY[$3]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_quantile($1, 1, TRUE, 1, ARRAY[$2]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, quantiles double precision[] DEFAULT NULL::double precision[])
 RETURNS SETOF quantile
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_quantile($1, $2, $3, $4, 1, $5) $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, nband integer, quantiles double precision[])
 RETURNS SETOF quantile
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_quantile($1, $2, $3, TRUE, 1, $4) $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, quantiles double precision[])
 RETURNS SETOF quantile
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_quantile($1, $2, 1, TRUE, 1, $3) $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, $3, $4, 1, ARRAY[$5]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, nband integer, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, $3, TRUE, 1, ARRAY[$4]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE
AS $function$ SELECT (_st_quantile($1, $2, 1, $3, 1, ARRAY[$4]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, 1, TRUE, 1, ARRAY[$3]::double precision[])).value $function$
]]></string>
			<comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true, quantiles=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_001" id="Function2000316" isSystem="false" >
			<comment><![CDATA[args: rast, nband, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_002" id="Function2000316" isSystem="false" >
			<comment><![CDATA[args: rast, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_003" id="Function2000316" isSystem="false" >
			<comment><![CDATA[args: rast, nband, exclude_nodata_value, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_004" id="Function2000316" isSystem="false" >
			<comment><![CDATA[args: rast, nband, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_005" id="Function2000316" isSystem="false" >
			<comment><![CDATA[args: rast, exclude_nodata_value, quantile=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_006" id="Function2000316" isSystem="false" >
			<comment><![CDATA[args: rast, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_007" id="Function2000316" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, quantiles=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_008" id="Function2000316" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_009" id="Function2000317" isSystem="false" />
		<function name="st_quantile_010" id="Function2000317" isSystem="false" />
		<function name="st_quantile_011" id="Function2000317" isSystem="false" />
		<function name="st_quantile_012" id="Function2000317" isSystem="false" />
		<function name="st_quantile_013" id="Function2000317" isSystem="false" />
		<function name="st_range4ma" id="Function2000317" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
    DECLARE
        _matrix float[][];
        min float;
        max float;
    BEGIN
        _matrix := matrix;
        min := 'Infinity'::float;
        max := '-Infinity'::float;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF min > _matrix[x][y] THEN
                    min = _matrix[x][y];
                END IF;
                IF max < _matrix[x][y] THEN
                    max = _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        IF max = '-Infinity'::float OR min = 'Infinity'::float THEN
            RETURN NULL;
        END IF;
        RETURN max - min;
    END;
    $function$
]]></string>
			<comment><![CDATA[args: matrix, nodatamode, VARIADIC args - Raster processing function that calculates the range of pixel values in a neighborhood.]]></comment>
		</function>
		<function name="st_raster2worldcoordx" id="Function2000317" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_raster2worldcoordx(rast raster, xr integer)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT longitude FROM _st_raster2worldcoord($1, $2, NULL) $function$
CREATE OR REPLACE FUNCTION public.st_raster2worldcoordx(rast raster, xr integer, yr integer)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT longitude FROM _st_raster2worldcoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, xcolumn, yrow - Returns the geometric X coordinate upper left of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
		</function>
		<function name="st_raster2worldcoordx_001" id="Function2000317" isSystem="false" >
			<comment><![CDATA[args: rast, xcolumn - Returns the geometric X coordinate upper left of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
		</function>
		<function name="st_raster2worldcoordy" id="Function2000317" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_raster2worldcoordy(rast raster, yr integer)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT latitude FROM _st_raster2worldcoord($1, NULL, $2) $function$
CREATE OR REPLACE FUNCTION public.st_raster2worldcoordy(rast raster, xr integer, yr integer)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT latitude FROM _st_raster2worldcoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, xcolumn, yrow - Returns the geometric Y coordinate upper left corner of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
		</function>
		<function name="st_raster2worldcoordy_001" id="Function2000317" isSystem="false" >
			<comment><![CDATA[args: rast, yrow - Returns the geometric Y coordinate upper left corner of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
		</function>
		<function name="st_reclass" id="Function2000317" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_reclass(rast raster, VARIADIC reclassargset reclassarg[])
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		i int;
		expr text;
	BEGIN
		-- for each reclassarg, validate elements as all except nodataval cannot be NULL
		FOR i IN SELECT * FROM generate_subscripts($2, 1) LOOP
			IF $2[i].nband IS NULL OR $2[i].reclassexpr IS NULL OR $2[i].pixeltype IS NULL THEN
				RAISE WARNING 'Values are required for the nband, reclassexpr and pixeltype attributes.';
				RETURN rast;
			END IF;
		END LOOP;
		RETURN _st_reclass($1, VARIADIC $2);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_reclass(rast raster, reclassexpr text, pixeltype text)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_reclass($1, ROW(1, $2, $3, NULL)) $function$
CREATE OR REPLACE FUNCTION public.st_reclass(rast raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_reclass($1, ROW($2, $3, $4, $5)) $function$
]]></string>
			<comment><![CDATA[args: rast, VARIADIC reclassargset - Creates a new raster composed of band types reclassified from original. The nband is the band to be changed. If nband is not specified assumed to be 1. All other bands are returned unchanged. Use case: convert a 16BUI band to a 8BUI and so forth for simpler rendering as viewable formats.]]></comment>
		</function>
		<function name="st_reclass_001" id="Function2000317" isSystem="false" >
			<comment><![CDATA[args: rast, nband, reclassexpr, pixeltype, nodataval=NULL - Creates a new raster composed of band types reclassified from original. The nband is the band to be changed. If nband is not specified assumed to be 1. All other bands are returned unchanged. Use case: convert a 16BUI band to a 8BUI and so forth for simpler rendering as viewable formats.]]></comment>
		</function>
		<function name="st_reclass_002" id="Function2000318" isSystem="false" >
			<comment><![CDATA[args: rast, reclassexpr, pixeltype - Creates a new raster composed of band types reclassified from original. The nband is the band to be changed. If nband is not specified assumed to be 1. All other bands are returned unchanged. Use case: convert a 16BUI band to a 8BUI and so forth for simpler rendering as viewable formats.]]></comment>
		</function>
		<function name="st_relate" id="Function2000318" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_relate(geom1 geometry, geom2 geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$relate_full$function$
CREATE OR REPLACE FUNCTION public.st_relate(geom1 geometry, geom2 geometry, integer)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$relate_full$function$
CREATE OR REPLACE FUNCTION public.st_relate(geom1 geometry, geom2 geometry, text)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$relate_pattern$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.]]></comment>
		</function>
		<function name="st_relate_001" id="Function2000318" isSystem="false" >
			<comment><![CDATA[args: geomA, geomB, BoundaryNodeRule - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.]]></comment>
		</function>
		<function name="st_relate_002" id="Function2000318" isSystem="false" >
			<comment><![CDATA[args: geomA, geomB, intersectionMatrixPattern - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.]]></comment>
		</function>
		<function name="st_relatematch" id="Function2000318" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_relatematch(text, text)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$ST_RelateMatch$function$
]]></string>
			<comment><![CDATA[args: intersectionMatrix, intersectionMatrixPattern - Returns true if intersectionMattrixPattern1 implies intersectionMatrixPattern2]]></comment>
		</function>
		<function name="st_removepoint" id="Function2000318" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_removepoint(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_removepoint$function$
]]></string>
			<comment><![CDATA[args: linestring, offset - Removes point from a linestring. Offset is 0-based.]]></comment>
		</function>
		<function name="st_removerepeatedpoints" id="Function2000318" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_removerepeatedpoints(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$ST_RemoveRepeatedPoints$function$
]]></string>
			<comment><![CDATA[args: geom - Returns a version of the given geometry with duplicated points removed.]]></comment>
		</function>
		<function name="st_resample" id="Function2000318" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_resample(rast raster, ref raster, usescale boolean, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT st_resample($1, $2, $4, $5, $3) $function$
CREATE OR REPLACE FUNCTION public.st_resample(rast raster, ref raster, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, usescale boolean DEFAULT true)
 RETURNS raster
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
	DECLARE
		sr_id int;
		dim_x int;
		dim_y int;
		scale_x double precision;
		scale_y double precision;
		grid_x double precision;
		grid_y double precision;
		skew_x double precision;
		skew_y double precision;
	BEGIN
		SELECT srid, width, height, scalex, scaley, upperleftx, upperlefty, skewx, skewy INTO sr_id, dim_x, dim_y, scale_x, scale_y, grid_x, grid_y, skew_x, skew_y FROM st_metadata($2);
		IF usescale IS TRUE THEN
			dim_x := NULL;
			dim_y := NULL;
		ELSE
			scale_x := NULL;
			scale_y := NULL;
		END IF;
		RETURN _st_resample($1, $3, $4, sr_id, scale_x, scale_y, grid_x, grid_y, skew_x, skew_y, dim_x, dim_y);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_resample(rast raster, width integer, height integer, srid integer DEFAULT NULL::integer, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_resample($1, $9,	$10, $4, NULL, NULL, $5, $6, $7, $8, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_resample(rast raster, srid integer DEFAULT NULL::integer, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_resample($1, $9,	$10, $2, $3, $4, $5, $6, $7, $8) $function$
]]></string>
			<comment><![CDATA[args: rast, srid=NULL, scalex=0, scaley=0, gridx=NULL, gridy=NULL, skewx=0, skewy=0, algorithm=NearestNeighbor, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_resample_001" id="Function2000318" isSystem="false" >
			<comment><![CDATA[args: rast, width, height, srid=same_as_rast, gridx=NULL, gridy=NULL, skewx=0, skewy=0, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_resample_002" id="Function2000319" isSystem="false" >
			<comment><![CDATA[args: rast, ref, algorithm=NearestNeighbour, maxerr=0.125, usescale=true - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_resample_003" id="Function2000319" isSystem="false" >
			<comment><![CDATA[args: rast, ref, usescale, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_rescale" id="Function2000319" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rescale(rast raster, scalexy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_resample($1, $3, $4, NULL, $2, $2) $function$
CREATE OR REPLACE FUNCTION public.st_rescale(rast raster, scalex double precision, scaley double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_resample($1, $4, $5, NULL, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, scalex, scaley, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its scale (or pixel size). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_rescale_001" id="Function2000319" isSystem="false" >
			<comment><![CDATA[args: rast, scalexy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its scale (or pixel size). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_reskew" id="Function2000319" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_reskew(rast raster, skewxy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_resample($1, $3, $4, NULL, 0, 0, NULL, NULL, $2, $2) $function$
CREATE OR REPLACE FUNCTION public.st_reskew(rast raster, skewx double precision, skewy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_resample($1, $4, $5, NULL, 0, 0, NULL, NULL, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, skewx, skewy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its skew (or rotation parameters). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_reskew_001" id="Function2000319" isSystem="false" >
			<comment><![CDATA[args: rast, skewxy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its skew (or rotation parameters). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_reverse" id="Function2000319" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_reverse(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_reverse$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns the geometry with vertex order reversed.]]></comment>
		</function>
		<function name="st_rotate" id="Function2000319" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotate(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)$function$
CREATE OR REPLACE FUNCTION public.st_rotate(geometry, double precision, geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1, ST_X($3) - cos($2) * ST_X($3) + sin($2) * ST_Y($3), ST_Y($3) - sin($2) * ST_X($3) - cos($2) * ST_Y($3), 0)$function$
CREATE OR REPLACE FUNCTION public.st_rotate(geometry, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1,	$3 - cos($2) * $3 + sin($2) * $4, $4 - sin($2) * $3 - cos($2) * $4, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians counter-clockwise about an origin.]]></comment>
		</function>
		<function name="st_rotate_001" id="Function2000319" isSystem="false" >
			<comment><![CDATA[args: geomA, rotRadians, x0, y0 - Rotate a geometry rotRadians counter-clockwise about an origin.]]></comment>
		</function>
		<function name="st_rotate_002" id="Function2000319" isSystem="false" >
			<comment><![CDATA[args: geomA, rotRadians, pointOrigin - Rotate a geometry rotRadians counter-clockwise about an origin.]]></comment>
		</function>
		<function name="st_rotatex" id="Function2000320" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotatex(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the X axis.]]></comment>
		</function>
		<function name="st_rotatey" id="Function2000320" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotatey(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the Y axis.]]></comment>
		</function>
		<function name="st_rotatez" id="Function2000320" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotatez(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Rotate($1, $2)$function$
]]></string>
			<comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the Z axis.]]></comment>
		</function>
		<function name="st_rotation" id="Function2000320" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotation(raster)
 RETURNS double precision
 LANGUAGE sql
AS $function$ SELECT (ST_Geotransform($1)).theta_i $function$
]]></string>
			<comment><![CDATA[args: rast - Returns the rotation of the raster in radian.]]></comment>
		</function>
		<function name="st_samealignment" id="Function2000320" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_samealignment(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_sameAlignment$function$
CREATE OR REPLACE FUNCTION public.st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_samealignment(st_makeemptyraster(1, 1, $1, $2, $3, $4, $5, $6), st_makeemptyraster(1, 1, $7, $8, $9, $10, $11, $12)) $function$
]]></string>
			<comment><![CDATA[args: rastA, rastB - Returns true if rasters have same skew, scale, spatial ref and false if they dont with notice detailing issue.]]></comment>
		</function>
		<function name="st_samealignment_001" id="Function2000320" isSystem="false" >
			<comment><![CDATA[args: ulx1, uly1, scalex1, scaley1, skewx1, skewy1, ulx2, uly2, scalex2, scaley2, skewx2, skewy2 - Returns true if rasters have same skew, scale, spatial ref and false if they dont with notice detailing issue.]]></comment>
		</function>
		<function name="st_scale" id="Function2000320" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_scale(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Scale($1, $2, $3, 1)$function$
CREATE OR REPLACE FUNCTION public.st_scale(geometry, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1,  $2, 0, 0,  0, $3, 0,  0, 0, $4,  0, 0, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, XFactor, YFactor, ZFactor - Scales the geometry to a new size by multiplying the ordinates with the parameters. Ie: ST_Scale(geom, Xfactor, Yfactor, Zfactor).]]></comment>
		</function>
		<function name="st_scale_001" id="Function2000320" isSystem="false" >
			<comment><![CDATA[args: geomA, XFactor, YFactor - Scales the geometry to a new size by multiplying the ordinates with the parameters. Ie: ST_Scale(geom, Xfactor, Yfactor, Zfactor).]]></comment>
		</function>
		<function name="st_scalex" id="Function2000321" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_scalex(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getXScale$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the X component of the pixel width in units of coordinate reference system.]]></comment>
		</function>
		<function name="st_scaley" id="Function2000321" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_scaley(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getYScale$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the Y component of the pixel height in units of coordinate reference system.]]></comment>
		</function>
		<function name="st_segmentize" id="Function2000321" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_segmentize(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_segmentize2d$function$
]]></string>
			<comment><![CDATA[args: geomA, max_length - Return a modified geometry having no segment longer than the given distance. Distance computation is performed in 2d only.]]></comment>
		</function>
		<function name="st_setbandisnodata" id="Function2000322" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setbandisnodata(rast raster, band integer DEFAULT 1)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_setBandIsNoData$function$
]]></string>
			<comment><![CDATA[args: rast, band=1 - Sets the isnodata flag of the band to TRUE. You may want to call this function if ST_BandIsNoData(rast, band) != ST_BandIsNodata(rast, band, TRUE). This is, if the isnodata flag is dirty. Band 1 is assumed if no band is specified.]]></comment>
		</function>
		<function name="st_setbandnodatavalue" id="Function2000322" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setbandnodatavalue(rast raster, nodatavalue double precision)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_setbandnodatavalue($1, 1, $2, FALSE) $function$
CREATE OR REPLACE FUNCTION public.st_setbandnodatavalue(rast raster, band integer, nodatavalue double precision, forcechecking boolean DEFAULT false)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_setBandNoDataValue$function$
]]></string>
			<comment><![CDATA[args: rast, band, nodatavalue, forcechecking=false - Sets the value for the given band that represents no data. Band 1 is assumed if no band is specified. To mark a band as having no nodata value, set the nodata value = NULL.]]></comment>
		</function>
		<function name="st_setbandnodatavalue_001" id="Function2000322" isSystem="false" >
			<comment><![CDATA[args: rast, nodatavalue - Sets the value for the given band that represents no data. Band 1 is assumed if no band is specified. To mark a band as having no nodata value, set the nodata value = NULL.]]></comment>
		</function>
		<function name="st_setgeoreference" id="Function2000322" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setgeoreference(rast raster, georef text, format text DEFAULT 'GDAL'::text)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
    DECLARE
        params text[];
        rastout raster;
    BEGIN
        IF rast IS NULL THEN
            RAISE WARNING 'Cannot set georeferencing on a null raster in st_setgeoreference.';
            RETURN rastout;
        END IF;
        SELECT regexp_matches(georef,
            E'(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s' ||
            E'(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)') INTO params;
        IF NOT FOUND THEN
            RAISE EXCEPTION 'st_setgeoreference requires a string with 6 floating point values.';
        END IF;
        IF format = 'ESRI' THEN
            -- params array is now:
            -- {scalex, skewy, skewx, scaley, upperleftx, upperlefty}
            rastout := st_setscale(rast, params[1]::float8, params[4]::float8);
            rastout := st_setskew(rastout, params[3]::float8, params[2]::float8);
            rastout := st_setupperleft(rastout,
                                   params[5]::float8 - (params[1]::float8 * 0.5),
                                   params[6]::float8 - (params[4]::float8 * 0.5));
        ELSE
            IF format != 'GDAL' THEN
                RAISE WARNING E'Format \'%\' is not recognized, defaulting to GDAL format.', format;
            END IF;
            -- params array is now:
            -- {scalex, skewy, skewx, scaley, upperleftx, upperlefty}
            rastout := st_setscale(rast, params[1]::float8, params[4]::float8);
            rastout := st_setskew( rastout, params[3]::float8, params[2]::float8);
            rastout := st_setupperleft(rastout, params[5]::float8, params[6]::float8);
        END IF;
        RETURN rastout;
    END;
    $function$
]]></string>
			<comment><![CDATA[args: rast, georefcoords, format=GDAL - Set Georeference 6 georeference parameters in a single call. Numbers should be separated by white space. Accepts inputs in GDAL or ESRI format. Default is GDAL.]]></comment>
		</function>
		<function name="st_setgeotransform" id="Function2000322" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setgeotransform(rast raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_setGeotransform$function$
]]></string>
		</function>
		<function name="st_setpoint" id="Function2000322" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setpoint(geometry, integer, geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_setpoint_linestring$function$
]]></string>
			<comment><![CDATA[args: linestring, zerobasedposition, point - Replace point N of linestring with given point. Index is 0-based.]]></comment>
		</function>
		<function name="st_setrotation" id="Function2000323" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setrotation(rast raster, rotation double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_setRotation$function$
]]></string>
			<comment><![CDATA[args: rast, rotation - Set the rotation of the raster in radian.]]></comment>
		</function>
		<function name="st_setscale" id="Function2000323" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setscale(rast raster, scale double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_setScale$function$
CREATE OR REPLACE FUNCTION public.st_setscale(rast raster, scalex double precision, scaley double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_setScaleXY$function$
]]></string>
			<comment><![CDATA[args: rast, xy - Sets the X and Y size of pixels in units of coordinate reference system. Number units/pixel width/height.]]></comment>
		</function>
		<function name="st_setscale_001" id="Function2000323" isSystem="false" >
			<comment><![CDATA[args: rast, x, y - Sets the X and Y size of pixels in units of coordinate reference system. Number units/pixel width/height.]]></comment>
		</function>
		<function name="st_setskew" id="Function2000323" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setskew(rast raster, skew double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_setSkew$function$
CREATE OR REPLACE FUNCTION public.st_setskew(rast raster, skewx double precision, skewy double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_setSkewXY$function$
]]></string>
			<comment><![CDATA[args: rast, skewxy - Sets the georeference X and Y skew (or rotation parameter). If only one is passed in, sets X and Y to the same value.]]></comment>
		</function>
		<function name="st_setskew_001" id="Function2000323" isSystem="false" >
			<comment><![CDATA[args: rast, skewx, skewy - Sets the georeference X and Y skew (or rotation parameter). If only one is passed in, sets X and Y to the same value.]]></comment>
		</function>
		<function name="st_setsrid" id="Function2000323" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setsrid(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_set_srid$function$
CREATE OR REPLACE FUNCTION public.st_setsrid(rast raster, srid integer)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_setSRID$function$
]]></string>
			<comment><![CDATA[args: geom, srid - Sets the SRID on a geometry to a particular integer value.]]></comment>
		</function>
		<function name="st_setsrid_001" id="Function2000323" isSystem="false" >
			<comment><![CDATA[args: rast, srid - Sets the SRID of a raster to a particular integer srid defined in the spatial_ref_sys table.]]></comment>
		</function>
		<function name="st_setupperleft" id="Function2000324" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setupperleft(rast raster, upperleftx double precision, upperlefty double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_setUpperLeftXY$function$
]]></string>
			<comment><![CDATA[args: rast, x, y - Sets the value of the upper left corner of the pixel to projected X and Y coordinates.]]></comment>
		</function>
		<function name="st_setvalue" id="Function2000324" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setvalue(rast raster, pt geometry, newvalue double precision)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_setvalue($1, 1, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_setvalue(rast raster, x integer, y integer, newvalue double precision)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_setvalue($1, 1, $2, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_setvalue(rast raster, band integer, pt geometry, newvalue double precision)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
    DECLARE
        x float8;
        y float8;
        gtype text;
    BEGIN
        gtype := st_geometrytype(pt);
        IF ( gtype != 'ST_Point' ) THEN
            RAISE EXCEPTION 'Attempting to get the value of a pixel with a non-point geometry';
        END IF;
        IF st_srid(pt) != st_srid(rast) THEN
            RAISE NOTICE 'The SRIDs of the raster and point geometry do NOT match. Returning original raster';
            RETURN rast;
        END IF;
        x := st_x(pt);
        y := st_y(pt);
        RETURN st_setvalue(rast,
                           band,
                           st_world2rastercoordx(rast, x, y),
                           st_world2rastercoordy(rast, x, y),
                           newvalue);
    END;
    $function$
CREATE OR REPLACE FUNCTION public.st_setvalue(rast raster, band integer, x integer, y integer, newvalue double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.0', $function$RASTER_setPixelValue$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum, columnx, rowy, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or at a pixel that intersects a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
		</function>
		<function name="st_setvalue_001" id="Function2000324" isSystem="false" >
			<comment><![CDATA[args: rast, columnx, rowy, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or at a pixel that intersects a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
		</function>
		<function name="st_setvalue_002" id="Function2000324" isSystem="false" >
			<comment><![CDATA[args: rast, bandnum, pt, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or at a pixel that intersects a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
		</function>
		<function name="st_setvalue_003" id="Function2000324" isSystem="false" >
			<comment><![CDATA[args: rast, pt, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or at a pixel that intersects a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
		</function>
		<function name="st_sharedpaths" id="Function2000324" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_sharedpaths(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$ST_SharedPaths$function$
]]></string>
			<comment><![CDATA[args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings.]]></comment>
		</function>
		<function name="st_shift_longitude" id="Function2000324" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_shift_longitude(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_longitude_shift$function$
]]></string>
			<comment><![CDATA[args: geomA - Reads every point/vertex in every component of every feature in a geometry, and if the longitude coordinate is <0, adds 360 to it. The result would be a 0-360 version of the data to be plotted in a 180 centric map]]></comment>
		</function>
		<function name="st_shortestline" id="Function2000324" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_shortestline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_shortestline2d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 2-dimensional shortest line between two geometries]]></comment>
		</function>
		<function name="st_simplify" id="Function2000324" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_simplify(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_simplify2d$function$
]]></string>
			<comment><![CDATA[args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm.]]></comment>
		</function>
		<function name="st_simplifypreservetopology" id="Function2000325" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_simplifypreservetopology(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$topologypreservesimplify$function$
]]></string>
			<comment><![CDATA[args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm. Will avoid creating derived geometries (polygons in particular) that are invalid.]]></comment>
		</function>
		<function name="st_skewx" id="Function2000325" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_skewx(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getXSkew$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the georeference X skew (or rotation parameter).]]></comment>
		</function>
		<function name="st_skewy" id="Function2000325" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_skewy(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getYSkew$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the georeference Y skew (or rotation parameter).]]></comment>
		</function>
		<function name="st_slope" id="Function2000325" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_slope(rast raster, band integer, pixeltype text)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_mapalgebrafctngb($1, $2, $3, 1, 1, '_st_slope4ma(float[][], text, text[])'::regprocedure, 'value', st_pixelwidth($1)::text, st_pixelheight($1)::text) $function$
]]></string>
			<comment><![CDATA[args: rast, band, pixeltype - Returns the surface slope of an elevation raster band. Useful for analyzing terrain.]]></comment>
		</function>
		<function name="st_snap" id="Function2000325" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_snap(geom1 geometry, geom2 geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$ST_Snap$function$
]]></string>
			<comment><![CDATA[args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry.]]></comment>
		</function>
		<function name="st_snaptogrid" id="Function2000325" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_snaptogrid(geometry, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_snaptogrid$function$
CREATE OR REPLACE FUNCTION public.st_snaptogrid(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_SnapToGrid($1, 0, 0, $2, $3)$function$
CREATE OR REPLACE FUNCTION public.st_snaptogrid(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_SnapToGrid($1, 0, 0, $2, $2)$function$
CREATE OR REPLACE FUNCTION public.st_snaptogrid(geom1 geometry, geom2 geometry, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_snaptogrid_pointoff$function$
CREATE OR REPLACE FUNCTION public.st_snaptogrid(rast raster, gridx double precision, gridy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_resample($1, $4, $5, NULL, $6, $7, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_resample($1, $6, $7, NULL, $4, $5, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_resample($1, $5, $6, NULL, $4, $4, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: geomA, originX, originY, sizeX, sizeY - Snap all points of the input geometry to a regular grid.]]></comment>
		</function>
		<function name="st_snaptogrid_001" id="Function2000325" isSystem="false" >
			<comment><![CDATA[args: geomA, sizeX, sizeY - Snap all points of the input geometry to a regular grid.]]></comment>
		</function>
		<function name="st_snaptogrid_002" id="Function2000325" isSystem="false" >
			<comment><![CDATA[args: geomA, size - Snap all points of the input geometry to a regular grid.]]></comment>
		</function>
		<function name="st_snaptogrid_003" id="Function2000325" isSystem="false" >
			<comment><![CDATA[args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to a regular grid.]]></comment>
		</function>
		<function name="st_snaptogrid_004" id="Function2000326" isSystem="false" >
			<comment><![CDATA[args: rast, gridx, gridy, algorithm=NearestNeighbour, maxerr=0.125, scalex=DEFAULT 0, scaley=DEFAULT 0 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_snaptogrid_005" id="Function2000326" isSystem="false" >
			<comment><![CDATA[args: rast, gridx, gridy, scalex, scaley, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_snaptogrid_006" id="Function2000326" isSystem="false" >
			<comment><![CDATA[args: rast, gridx, gridy, scalexy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_split" id="Function2000326" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_split(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.0', $function$ST_Split$function$
]]></string>
			<comment><![CDATA[args: input, blade - Returns a collection of geometries resulting by splitting a geometry.]]></comment>
		</function>
		<function name="st_srid" id="Function2000326" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_srid(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_get_srid$function$
CREATE OR REPLACE FUNCTION public.st_srid(raster)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getSRID$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns the spatial reference identifier for the ST_Geometry as defined in spatial_ref_sys table.]]></comment>
		</function>
		<function name="st_srid_001" id="Function2000326" isSystem="false" >
			<comment><![CDATA[args: rast - Returns the spatial reference identifier of the raster as defined in spatial_ref_sys table.]]></comment>
		</function>
		<function name="st_startpoint" id="Function2000326" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_startpoint(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_startpoint_linestring$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the first point of a LINESTRING geometry as a POINT.]]></comment>
		</function>
		<function name="st_stddev4ma" id="Function2000327" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT stddev(unnest) FROM unnest($1) $function$
]]></string>
			<comment><![CDATA[args: matrix, nodatamode, VARIADIC args - Raster processing function that calculates the standard deviation of pixel values in a neighborhood.]]></comment>
		</function>
		<function name="st_sum4ma" id="Function2000327" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
    DECLARE
        _matrix float[][];
        sum float;
    BEGIN
        _matrix := matrix;
        sum := 0;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF nodatamode = 'ignore' THEN
                        _matrix[x][y] := 0;
                    ELSE
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                sum := sum + _matrix[x][y];
            END LOOP;
        END LOOP;
        RETURN sum;
    END;
    $function$
]]></string>
			<comment><![CDATA[args: matrix, nodatamode, VARIADIC args - Raster processing function that calculates the sum of all pixel values in a neighborhood.]]></comment>
		</function>
		<function name="st_summary" id="Function2000327" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_summary(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_summary$function$
CREATE OR REPLACE FUNCTION public.st_summary(geography)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_summary$function$
]]></string>
			<comment><![CDATA[args: g - Returns a text summary of the contents of the geometry.]]></comment>
		</function>
		<function name="st_summary_001" id="Function2000327" isSystem="false" >
			<comment><![CDATA[args: g - Returns a text summary of the contents of the geometry.]]></comment>
		</function>
		<function name="st_summarystats" id="Function2000327" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_summarystats(rast raster, exclude_nodata_value boolean)
 RETURNS summarystats
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_summarystats($1, 1, $2, 1) $function$
CREATE OR REPLACE FUNCTION public.st_summarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean)
 RETURNS summarystats
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, 1, $3, 1) $function$
CREATE OR REPLACE FUNCTION public.st_summarystats(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)
 RETURNS summarystats
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, $3, 1) $function$
CREATE OR REPLACE FUNCTION public.st_summarystats(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)
 RETURNS summarystats
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, $3, $4, 1) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, exclude_nodata_value - Returns summary stats consisting of count,sum,mean,stddev,min,max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
		</function>
		<function name="st_summarystats_001" id="Function2000327" isSystem="false" >
			<comment><![CDATA[args: rast, exclude_nodata_value - Returns summary stats consisting of count,sum,mean,stddev,min,max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
		</function>
		<function name="st_summarystats_002" id="Function2000328" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true - Returns summary stats consisting of count,sum,mean,stddev,min,max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
		</function>
		<function name="st_summarystats_003" id="Function2000328" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, exclude_nodata_value - Returns summary stats consisting of count,sum,mean,stddev,min,max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
		</function>
		<function name="st_symdifference" id="Function2000328" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_symdifference(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$symdifference$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns a geometry that represents the portions of A and B that do not intersect. It is called a symmetric difference because ST_SymDifference(A,B) = ST_SymDifference(B,A).]]></comment>
		</function>
		<function name="st_symmetricdifference" id="Function2000328" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_symmetricdifference(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$symdifference$function$
]]></string>
		</function>
		<function name="st_touches" id="Function2000328" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_touches(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Touches($1,$2)$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect.]]></comment>
		</function>
		<function name="st_transform" id="Function2000328" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_transform(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$transform$function$
CREATE OR REPLACE FUNCTION public.st_transform(rast raster, srid integer, scalexy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_resample($1, $4, $5, $2, $3, $3) $function$
CREATE OR REPLACE FUNCTION public.st_transform(rast raster, srid integer, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_resample($1, $3, $4, $2, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_transform(rast raster, srid integer, scalex double precision, scaley double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_resample($1, $5, $6, $2, $3, $4) $function$
]]></string>
			<comment><![CDATA[args: g1, srid - Returns a new geometry with its coordinates transformed to the SRID referenced by the integer parameter.]]></comment>
		</function>
		<function name="st_transform_001" id="Function2000328" isSystem="false" >
			<comment><![CDATA[args: rast, srid, algorithm=NearestNeighbor, maxerr=0.125, scalex, scaley - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.]]></comment>
		</function>
		<function name="st_transform_002" id="Function2000329" isSystem="false" >
			<comment><![CDATA[args: rast, srid, scalex, scaley, algorithm=NearestNeighbor, maxerr=0.125 - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.]]></comment>
		</function>
		<function name="st_transform_003" id="Function2000329" isSystem="false" />
		<function name="st_translate" id="Function2000329" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_translate(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Translate($1, $2, $3, 0)$function$
CREATE OR REPLACE FUNCTION public.st_translate(geometry, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)$function$
]]></string>
			<comment><![CDATA[args: g1, deltax, deltay, deltaz - Translates the geometry to a new location using the numeric parameters as offsets. Ie: ST_Translate(geom, X, Y) or ST_Translate(geom, X, Y,Z).]]></comment>
		</function>
		<function name="st_translate_001" id="Function2000329" isSystem="false" >
			<comment><![CDATA[args: g1, deltax, deltay - Translates the geometry to a new location using the numeric parameters as offsets. Ie: ST_Translate(geom, X, Y) or ST_Translate(geom, X, Y,Z).]]></comment>
		</function>
		<function name="st_transscale" id="Function2000329" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_transscale(geometry, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1,  $4, 0, 0,  0, $5, 0,
		0, 0, 1,  $2 * $4, $3 * $5, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, deltaX, deltaY, XFactor, YFactor - Translates the geometry using the deltaX and deltaY args, then scales it using the XFactor, YFactor args, working in 2D only.]]></comment>
		</function>
		<function name="st_unaryunion" id="Function2000329" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_unaryunion(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$ST_UnaryUnion$function$
]]></string>
			<comment><![CDATA[args: geom - Like ST_Union, but working at the geometry component level.]]></comment>
		</function>
		<function name="st_union" id="Function2000330" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_union(geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$pgis_union_geometry_array$function$
CREATE OR REPLACE FUNCTION public.st_union(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$geomunion$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns a geometry that represents the point set union of the Geometries.]]></comment>
		</function>
		<function name="st_union_001" id="Function2000330" isSystem="false" >
			<comment><![CDATA[args: g1_array - Returns a geometry that represents the point set union of the Geometries.]]></comment>
		</function>
		<function name="st_union_002" id="Function2000330" isSystem="false" >
			<comment><![CDATA[args: g1field - Returns a geometry that represents the point set union of the Geometries.]]></comment>
		</function>
		<function name="st_union_003" id="Function2000330" isSystem="false" >
			<comment><![CDATA[args: rast - Returns the union of a set of raster tiles into a single raster composed of 1 band. If no band is specified for unioning, band num 1 is assumed. The resulting rasters extent is the extent of the whole set. In the case of intersection, the resulting value is defined by p_expression which is one of the following: LAST - the default when none is specified, MEAN, SUM, FIRST, MAX, MIN.]]></comment>
		</function>
		<function name="st_union_004" id="Function2000330" isSystem="false" >
			<comment><![CDATA[args: rast, band_num - Returns the union of a set of raster tiles into a single raster composed of 1 band. If no band is specified for unioning, band num 1 is assumed. The resulting rasters extent is the extent of the whole set. In the case of intersection, the resulting value is defined by p_expression which is one of the following: LAST - the default when none is specified, MEAN, SUM, FIRST, MAX, MIN.]]></comment>
		</function>
		<function name="st_union_005" id="Function2000330" isSystem="false" >
			<comment><![CDATA[args: rast, p_expression - Returns the union of a set of raster tiles into a single raster composed of 1 band. If no band is specified for unioning, band num 1 is assumed. The resulting rasters extent is the extent of the whole set. In the case of intersection, the resulting value is defined by p_expression which is one of the following: LAST - the default when none is specified, MEAN, SUM, FIRST, MAX, MIN.]]></comment>
		</function>
		<function name="st_union_006" id="Function2000330" isSystem="false" >
			<comment><![CDATA[args: rast, band_num, p_expression - Returns the union of a set of raster tiles into a single raster composed of 1 band. If no band is specified for unioning, band num 1 is assumed. The resulting rasters extent is the extent of the whole set. In the case of intersection, the resulting value is defined by p_expression which is one of the following: LAST - the default when none is specified, MEAN, SUM, FIRST, MAX, MIN.]]></comment>
		</function>
		<function name="st_upperleftx" id="Function2000331" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_upperleftx(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getXUpperLeft$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the upper left X coordinate of raster in projected spatial ref.]]></comment>
		</function>
		<function name="st_upperlefty" id="Function2000331" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_upperlefty(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getYUpperLeft$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the upper left Y coordinate of raster in projected spatial ref.]]></comment>
		</function>
		<function name="st_value" id="Function2000331" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_value(rast raster, pt geometry, hasnodata boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_value($1, 1, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_value(rast raster, x integer, y integer, hasnodata boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_value($1, 1, $2, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_value(rast raster, band integer, pt geometry, hasnodata boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
    DECLARE
        x float8;
        y float8;
        gtype text;
    BEGIN
        gtype := st_geometrytype(pt);
        IF ( gtype != 'ST_Point' ) THEN
            RAISE EXCEPTION 'Attempting to get the value of a pixel with a non-point geometry';
        END IF;
				IF ST_SRID(rast) != ST_SRID(pt) THEN
					RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
				END IF;
        x := st_x(pt);
        y := st_y(pt);
        RETURN st_value(rast,
                        band,
                        st_world2rastercoordx(rast, x, y),
                        st_world2rastercoordy(rast, x, y),
                        hasnodata);
    END;
    $function$
CREATE OR REPLACE FUNCTION public.st_value(rast raster, band integer, x integer, y integer, hasnodata boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getPixelValue$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum, columnx, rowy, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
		</function>
		<function name="st_value_001" id="Function2000331" isSystem="false" >
			<comment><![CDATA[args: rast, columnx, rowy, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
		</function>
		<function name="st_value_002" id="Function2000331" isSystem="false" >
			<comment><![CDATA[args: rast, bandnum, pt, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
		</function>
		<function name="st_value_003" id="Function2000331" isSystem="false" >
			<comment><![CDATA[args: rast, pt, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
		</function>
		<function name="st_valuecount" id="Function2000331" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT value, count FROM _st_valuecount($1, $2, $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT value, count FROM _st_valuecount($1, $2, TRUE, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT value, count FROM _st_valuecount($1, 1, TRUE, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, $3, ARRAY[$4]::double precision[], $5)).count $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, TRUE, ARRAY[$3]::double precision[], $4)).count $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_valuecount($1, 1, TRUE, ARRAY[$2]::double precision[], $3)).count $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, count FROM _st_valuecount($1, $2, $3, $4, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, count FROM _st_valuecount($1, $2, $3, TRUE, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, count FROM _st_valuecount($1, $2, 1, TRUE, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, $3, $4, ARRAY[$5]::double precision[], $6)).count $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, $3, TRUE, ARRAY[$4]::double precision[], $5)).count $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, 1, TRUE, ARRAY[$3]::double precision[], $4)).count $function$
]]></string>
			<comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true, searchvalues=NULL, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_001" id="Function2000332" isSystem="false" >
			<comment><![CDATA[args: rast, nband, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_002" id="Function2000332" isSystem="false" >
			<comment><![CDATA[args: rast, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_003" id="Function2000332" isSystem="false" >
			<comment><![CDATA[args: rast, nband, exclude_nodata_value, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_004" id="Function2000332" isSystem="false" >
			<comment><![CDATA[args: rast, nband, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_005" id="Function2000332" isSystem="false" >
			<comment><![CDATA[args: rast, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_006" id="Function2000332" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, searchvalues=NULL, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_007" id="Function2000332" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_008" id="Function2000332" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_009" id="Function2000333" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband, exclude_nodata_value, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_010" id="Function2000333" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_011" id="Function2000333" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuepercent" id="Function2000333" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, $3, TRUE, ARRAY[$4]::double precision[], $5)).percent $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT value, percent FROM _st_valuecount($1, $2, $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT value, percent FROM _st_valuecount($1, $2, TRUE, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT value, percent FROM _st_valuecount($1, 1, TRUE, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, $3, ARRAY[$4]::double precision[], $5)).percent $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, TRUE, ARRAY[$3]::double precision[], $4)).percent $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_valuecount($1, 1, TRUE, ARRAY[$2]::double precision[], $3)).percent $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, percent FROM _st_valuecount($1, $2, $3, $4, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, percent FROM _st_valuecount($1, $2, $3, TRUE, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, percent FROM _st_valuecount($1, $2, 1, TRUE, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, $3, $4, ARRAY[$5]::double precision[], $6)).percent $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, 1, TRUE, ARRAY[$3]::double precision[], $4)).percent $function$
]]></string>
		</function>
		<function name="st_valuepercent_001" id="Function2000333" isSystem="false" />
		<function name="st_valuepercent_002" id="Function2000333" isSystem="false" />
		<function name="st_valuepercent_003" id="Function2000333" isSystem="false" />
		<function name="st_valuepercent_004" id="Function2000333" isSystem="false" />
		<function name="st_valuepercent_005" id="Function2000333" isSystem="false" />
		<function name="st_valuepercent_006" id="Function2000333" isSystem="false" />
		<function name="st_valuepercent_007" id="Function2000333" isSystem="false" />
		<function name="st_valuepercent_008" id="Function2000333" isSystem="false" />
		<function name="st_valuepercent_009" id="Function2000333" isSystem="false" />
		<function name="st_valuepercent_010" id="Function2000333" isSystem="false" />
		<function name="st_valuepercent_011" id="Function2000333" isSystem="false" />
		<function name="st_width" id="Function2000334" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_width(raster)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.0', $function$RASTER_getWidth$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the width of the raster in pixels.]]></comment>
		</function>
		<function name="st_within" id="Function2000334" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_within(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Contains($2,$1)$function$
]]></string>
			<comment><![CDATA[args: A, B - Returns true if the geometry A is completely inside geometry B]]></comment>
		</function>
		<function name="st_wkbtosql" id="Function2000334" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_wkbtosql(wkb bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_from_WKB$function$
]]></string>
			<comment><![CDATA[args: WKB - Return a specified ST_Geometry value from Well-Known Binary representation (WKB). This is an alias name for ST_GeomFromWKB that takes no srid]]></comment>
		</function>
		<function name="st_wkttosql" id="Function2000334" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_wkttosql(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_from_text$function$
]]></string>
			<comment><![CDATA[args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText]]></comment>
		</function>
		<function name="st_world2rastercoordx" id="Function2000334" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_world2rastercoordx(rast raster, xw double precision)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT columnx FROM _st_world2rastercoord($1, $2, NULL) $function$
CREATE OR REPLACE FUNCTION public.st_world2rastercoordx(rast raster, pt geometry)
 RETURNS integer
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		xr integer;
	BEGIN
		IF ( st_geometrytype(pt) != 'ST_Point' ) THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		SELECT columnx INTO xr FROM _st_world2rastercoord($1, st_x(pt), st_y(pt));
		RETURN xr;
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_world2rastercoordx(rast raster, xw double precision, yw double precision)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT columnx FROM _st_world2rastercoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, xw, yw - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
		</function>
		<function name="st_world2rastercoordx_001" id="Function2000334" isSystem="false" >
			<comment><![CDATA[args: rast, xw - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
		</function>
		<function name="st_world2rastercoordx_002" id="Function2000334" isSystem="false" >
			<comment><![CDATA[args: rast, pt - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
		</function>
		<function name="st_world2rastercoordy" id="Function2000334" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_world2rastercoordy(rast raster, yw double precision)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT rowy FROM _st_world2rastercoord($1, NULL, $2) $function$
CREATE OR REPLACE FUNCTION public.st_world2rastercoordy(rast raster, pt geometry)
 RETURNS integer
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		yr integer;
	BEGIN
		IF ( st_geometrytype(pt) != 'ST_Point' ) THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		SELECT rowy INTO yr FROM _st_world2rastercoord($1, st_x(pt), st_y(pt));
		RETURN yr;
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_world2rastercoordy(rast raster, xw double precision, yw double precision)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT rowy FROM _st_world2rastercoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, xw, yw - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
		</function>
		<function name="st_world2rastercoordy_001" id="Function2000334" isSystem="false" >
			<comment><![CDATA[args: rast, xw - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
		</function>
		<function name="st_world2rastercoordy_002" id="Function2000334" isSystem="false" >
			<comment><![CDATA[args: rast, pt - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
		</function>
		<function name="st_x" id="Function2000334" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_x(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_x_point$function$
]]></string>
			<comment><![CDATA[args: a_point - Return the X coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
		</function>
		<function name="st_xmax" id="Function2000335" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_xmax(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX3D_xmax$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns X maxima of a bounding box 2d or 3d or a geometry.]]></comment>
		</function>
		<function name="st_xmin" id="Function2000335" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_xmin(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX3D_xmin$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns X minima of a bounding box 2d or 3d or a geometry.]]></comment>
		</function>
		<function name="st_y" id="Function2000335" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_y(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_y_point$function$
]]></string>
			<comment><![CDATA[args: a_point - Return the Y coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
		</function>
		<function name="st_ymax" id="Function2000335" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ymax(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX3D_ymax$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Y maxima of a bounding box 2d or 3d or a geometry.]]></comment>
		</function>
		<function name="st_ymin" id="Function2000335" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ymin(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX3D_ymin$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Y minima of a bounding box 2d or 3d or a geometry.]]></comment>
		</function>
		<function name="st_z" id="Function2000335" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_z(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_z_point$function$
]]></string>
			<comment><![CDATA[args: a_point - Return the Z coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
		</function>
		<function name="st_zmax" id="Function2000335" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_zmax(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX3D_zmax$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.]]></comment>
		</function>
		<function name="st_zmflag" id="Function2000335" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_zmflag(geometry)
 RETURNS smallint
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_zmflag$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns ZM (dimension semantic) flag of the geometries as a small int. Values are: 0=2d, 1=3dm, 2=3dz, 3=4d.]]></comment>
		</function>
		<function name="st_zmin" id="Function2000335" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_zmin(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$BOX3D_zmin$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.]]></comment>
		</function>
		<function name="text" id="Function2000335" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.text(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.0', $function$LWGEOM_to_text$function$
]]></string>
		</function>
		<function name="unlockrows" id="Function2000336" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.unlockrows(text)
 RETURNS integer
 LANGUAGE plpgsql
 STRICT
AS $function$ 
DECLARE
	ret int;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;
	EXECUTE 'DELETE FROM authorization_table where authid = ' ||
		quote_literal($1);
	GET DIAGNOSTICS ret = ROW_COUNT;
	RETURN ret;
END;
$function$
]]></string>
			<comment><![CDATA[args: auth_token - Remove all locks held by specified authorization id. Returns the number of locks released.]]></comment>
		</function>
		<function name="updategeometrysrid" id="Function2000336" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updategeometrysrid(character varying, character varying, integer)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('','',$1,$2,$3) into ret;
	RETURN ret;
END;
$function$
CREATE OR REPLACE FUNCTION public.updategeometrysrid(character varying, character varying, character varying, integer)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('',$1,$2,$3,$4) into ret;
	RETURN ret;
END;
$function$
CREATE OR REPLACE FUNCTION public.updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	myrec RECORD;
	okay boolean;
	cname varchar;
	real_schema name;
	unknown_srid integer;
	new_srid integer := new_srid_in;
BEGIN

	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;
		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;
		IF ( okay <> true ) THEN
			RAISE EXCEPTION 'Invalid schema name';
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT INTO real_schema current_schema()::text;
	END IF;
	-- Ensure that column_name is in geometry_columns
	okay = false;
	FOR myrec IN SELECT type, coord_dimension FROM geometry_columns WHERE f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (NOT okay) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;
	-- Ensure that new_srid is valid
	IF ( new_srid > 0 ) THEN
		IF ( SELECT count(*) = 0 from spatial_ref_sys where srid = new_srid ) THEN
			RAISE EXCEPTION 'invalid SRID: % not found in spatial_ref_sys', new_srid;
			RETURN false;
		END IF;
	ELSE
		unknown_srid := ST_SRID('POINT EMPTY'::geometry);
		IF ( new_srid != unknown_srid ) THEN
			new_srid := unknown_srid;
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;
	IF postgis_constraint_srid(schema_name, table_name, column_name) IS NOT NULL THEN 
	-- srid was enforced with constraints before, keep it that way.
        -- Make up constraint name
        cname = 'enforce_srid_'  || column_name;
    
        -- Drop enforce_srid constraint
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' DROP constraint ' || quote_ident(cname);
    
        -- Update geometries SRID
        EXECUTE 'UPDATE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' SET ' || quote_ident(column_name) ||
            ' = ST_SetSRID(' || quote_ident(column_name) ||
            ', ' || new_srid::text || ')';
            
        -- Reset enforce_srid constraint
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' ADD constraint ' || quote_ident(cname) ||
            ' CHECK (st_srid(' || quote_ident(column_name) ||
            ') = ' || new_srid::text || ')';
    ELSE 
        -- We will use typmod to enforce if no srid constraints
        -- We are using postgis_type_name to lookup the new name 
        -- (in case Paul changes his mind and flips geometry_columns to return old upper case name) 
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' || quote_ident(table_name) || 
        ' ALTER COLUMN ' || quote_ident(column_name) || ' TYPE  geometry(' || postgis_type_name(myrec.type, myrec.coord_dimension, true) || ', ' || new_srid::text || ') USING ST_SetSRID(' || quote_ident(column_name) || ',' || new_srid::text || ');' ;
    END IF;
	RETURN real_schema || '.' || table_name || '.' || column_name ||' SRID changed to ' || new_srid::text;
END;
$function$
]]></string>
			<comment><![CDATA[args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.]]></comment>
		</function>
		<function name="updategeometrysrid_001" id="Function2000336" isSystem="false" >
			<comment><![CDATA[args: schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.]]></comment>
		</function>
		<function name="updategeometrysrid_002" id="Function2000336" isSystem="false" >
			<comment><![CDATA[args: table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.]]></comment>
		</function>
		<function name="after_delete_action_graph" id="Function2058465" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.after_delete_action_graph()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
	ag_id bigint;
BEGIN
	--if action has just been deleted just return, let it go.
	PERFORM id FROM action WHERE id = OLD.action_id;
	IF NOT FOUND THEN
		RETURN OLD;
	END IF;
	--action is still present, if it's orphan re-link it to root.
	SELECT INTO ag_id id FROM action_graph WHERE action_id = OLD.action_id LIMIT 1;
	IF NOT FOUND THEN
		INSERT INTO action_graph (action_id,parent_id)
			VALUES (OLD.action_id, (find_root(OLD.action_id)).root_id);
		RAISE NOTICE 'No parent present, action relinked to root';
	ELSIF (OLD.is_main_parent = TRUE) THEN --hey! we just delted the main parent, we need to set a new one!
		UPDATE action_graph SET is_main_parent = TRUE WHERE id = ag_id;
		RAISE NOTICE 'Main parent has been deleted, setting a new one.';
	END IF;
	RETURN OLD;
END
$function$
]]></string>
		</function>
		<function name="after_new_action_graph" id="Function2058466" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.after_new_action_graph()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
	an_id bigint;
BEGIN
	--remove redundant links
	FOR an_id IN SELECT x.par FROM (
		SELECT DISTINCT parent_id par,find_descendants(parent_id) des
		FROM action_graph WHERE action_id = NEW.action_id
	) x WHERE des = NEW.parent_id
	LOOP
		DELETE FROM action_graph WHERE action_id = NEW.action_id AND parent_id = an_id;
		RAISE WARNING 'Redundant link between [%]-->[%] removed',an_id,NEW.action_id;
	END LOOP;
	FOR an_id IN SELECT action_id FROM action_graph WHERE parent_id = NEW.parent_id AND action_id IN (
		SELECT * FROM find_descendants(NEW.action_id) 
	) LOOP
		DELETE FROM action_graph WHERE action_id = an_id AND parent_id = NEW.parent_id;
		RAISE WARNING 'Redundant link between [%]-->[%] removed',NEW.parent_id,an_id;
	END LOOP;
	IF (NEW.is_main_parent) THEN --hey! this new link sould be main parent, let's trigger old main parent removal
		UPDATE action_graph SET is_main_parent = TRUE WHERE id = NEW.id;
	END IF;
	RETURN NEW;
END
$function$
]]></string>
		</function>
		<function name="ca_quantile" id="Function2058467" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.ca_quantile(scenario_id bigint, width integer, height integer)
 RETURNS bytea
 LANGUAGE plr
AS $function$
	library(RPostgreSQL)
	library(igraph)
	require(cairoDevice)
	require(RGtk2)
	pixmap <- gdkPixmapNew(w=width, h=height, depth=24)
	asCairoDevice(pixmap)
	conn <- dbConnect(PostgreSQL(), host = "geopg", dbname = "transafe_dev", user= "transafe_dev", pass="transafe2K13alp!!")
	query <- paste("select ap.name as parent,a.name as action from action_graph ag left join action a on a.id = ag.action_id left join action ap on ap.id = ag.parent_id where a.scenario_id = ",scenario_id,sep="")
	data <- dbGetQuery(conn, query)
	g <- graph.edgelist(as.matrix(data))
	print(g)
	
	plotPixbuf <- gdkPixbufGetFromDrawable(NULL, pixmap, pixmap$getColormap(), 0, 0, 0, 0, width, height)
	buffer <- gdkPixbufSaveToBufferv(plotPixbuf, 'png', character(0), character(0))$buffer
	dev.off()
	return(buffer)
$function$
]]></string>
		</function>
		<function name="find_ancestors" id="Function2058468" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.find_ancestors(action_id bigint)
 RETURNS TABLE(action bigint)
 LANGUAGE plpgsql
AS $function$
BEGIN
	PERFORM id FROM action WHERE id = action_id;
	IF NOT FOUND THEN
		RAISE WARNING 'Action [%] not found.',action_id;
		RETURN;
	END IF;
	RETURN QUERY WITH RECURSIVE ancestors(elem) AS (
		(SELECT ag.parent_id FROM action_graph ag WHERE ag.action_id = $1)
		UNION
		(SELECT ag.parent_id FROM action_graph ag,ancestors
		 WHERE ag.action_id = ancestors.elem)
	)
	SELECT elem FROM ancestors;
END
$function$
]]></string>
			<comment><![CDATA[TODO]]></comment>
		</function>
		<function name="find_available_parents" id="Function2058470" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.find_available_parents(action_id bigint)
 RETURNS TABLE(action bigint)
 LANGUAGE plpgsql
AS $function$
DECLARE
	scen_id bigint;
BEGIN
	SELECT INTO scen_id a.scenario_id FROM action a WHERE a.id = action_id;
	IF NOT FOUND THEN
		RAISE WARNING 'Action % not found.',action_id;
		RETURN;
	END IF;
	RETURN QUERY SELECT id FROM action a WHERE a.scenario_id = scen_id AND a.id NOT IN
	(
		(SELECT action_id)
		UNION
		(SELECT * FROM find_ancestors(action_id))
		UNION
		(SELECT * FROM find_descendants(action_id))
	);
END
$function$
]]></string>
			<comment><![CDATA[TODO]]></comment>
		</function>
		<function name="find_descendants" id="Function2058471" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.find_descendants(action_id bigint)
 RETURNS TABLE(action bigint)
 LANGUAGE plpgsql
AS $function$
BEGIN
	PERFORM id FROM action WHERE id = action_id;
	IF NOT FOUND THEN
		RAISE WARNING 'Action [%] not found.',action_id;
		RETURN;
	END IF;
	RETURN QUERY WITH RECURSIVE childtree(elem) AS (
		(SELECT ag.action_id FROM action_graph ag WHERE parent_id = $1)
		UNION
		(SELECT ag.action_id FROM action_graph ag,childtree
		 WHERE ag.parent_id = childtree.elem)
	)
	SELECT elem FROM childtree;
END
$function$
]]></string>
			<comment><![CDATA[TODO]]></comment>
		</function>
		<function name="find_root" id="Function2058472" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.find_root(action_id bigint, OUT root_id bigint, OUT scenario_id bigint)
 RETURNS record
 LANGUAGE sql
AS $function$
	SELECT id,scenario_id FROM action WHERE name = 'root'
		AND scenario_id = (SELECT scenario_id FROM action WHERE id = action_id);
$function$
]]></string>
			<comment><![CDATA[TODO]]></comment>
		</function>
		<function name="graph_action" id="Function2058473" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.graph_action(scenario_id bigint, width integer, height integer)
 RETURNS bytea
 LANGUAGE plr
AS $function$
	require(RPostgreSQL)
	require(igraph)
	require(cairoDevice)
	require(RGtk2)
	pixmap <- gdkPixmapNew(w=width, h=height, depth=24)
	asCairoDevice(pixmap)
	#conn <- dbConnect(PostgreSQL(), host = "geopg", dbname = "transafe_dev", user= "transafe_dev", pass="transafe2K13alp!!")
	query <- paste("select ap.name as parent,a.name as action from action_graph ag left join action a on a.id = ag.action_id left join action ap on ap.id = ag.parent_id where a.scenario_id = ",scenario_id,sep="")
	data <- dbGetQuery(conn, query)
	g <- plot(graph.edgelist(as.matrix(data)))
	print(g)
	
	plotPixbuf <- gdkPixbufGetFromDrawable(NULL, pixmap, pixmap$getColormap(), 0, 0, 0, 0, width, height)
	buffer <- gdkPixbufSaveToBufferv(plotPixbuf, 'png', character(0), character(0))$buffer
	dev.off()
	return(buffer)
$function$
]]></string>
		</function>
		<function name="install_rcmd" id="Function2058474" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.install_rcmd(text)
 RETURNS text
 LANGUAGE c
 STRICT
AS '$libdir/plr', $function$install_rcmd$function$
]]></string>
		</function>
		<function name="load_r_typenames" id="Function2058475" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.load_r_typenames()
 RETURNS text
 LANGUAGE plr
AS $function$
  sql <- "select upper(typname::text) || 'OID' as typename, oid from pg_catalog.pg_type where typtype = 'b' order by typname"
  rs <- pg.spi.exec(sql)
  for(i in 1:nrow(rs))
  {
    typobj <- rs[i,1]
    typval <- rs[i,2]
    if (substr(typobj,1,1) == "_")
      typobj <- paste("ARRAYOF", substr(typobj,2,nchar(typobj)), sep="")
    assign(typobj, typval, .GlobalEnv)
  }
  return("OK")
$function$
]]></string>
		</function>
		<function name="new_action" id="Function2058476" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.new_action()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
	parent_id bigint;
BEGIN
	IF (NEW.name = 'root') THEN
		RETURN NEW;
	END IF;
	IF (NEW.duration = 0) THEN
		RAISE WARNING 'Action duration cannot be 0 (set default 15)';
		NEW.duration = 15;
	END IF;
	SELECT INTO parent_id id FROM action WHERE name = 'root' AND scenario_id = NEW.scenario_id;
	INSERT INTO action_graph VALUES (DEFAULT,NEW.id,parent_id,TRUE);
	RETURN NEW;
END
$function$
]]></string>
		</function>
		<function name="new_action_graph" id="Function2058477" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.new_action_graph()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
	IF (NEW.parent_id NOT IN (SELECT * FROM find_available_parents(NEW.action_id))) THEN
		RAISE EXCEPTION 'Action [%] is not a valid parent for action [%]',NEW.parent_id,NEW.action_id;
	END IF;
	RETURN NEW;
END
$function$
]]></string>
		</function>
		<function name="new_scenario" id="Function2058478" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.new_scenario()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
	INSERT INTO action VALUES (DEFAULT, NEW.id, 'root', 0, 'start action for scenario '||NEW.name, 0);
	RETURN NEW;
END
$function$
]]></string>
		</function>
		<function name="plr_array_accum" id="Function2058479" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.plr_array_accum(double precision[], double precision)
 RETURNS double precision[]
 LANGUAGE c
AS '$libdir/plr', $function$plr_array_accum$function$
]]></string>
		</function>
		<function name="plr_array_push" id="Function2058480" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.plr_array_push(double precision[], double precision)
 RETURNS double precision[]
 LANGUAGE c
 STRICT
AS '$libdir/plr', $function$plr_array_push$function$
]]></string>
		</function>
		<function name="plr_call_handler" id="Function2058482" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.plr_call_handler()
 RETURNS language_handler
 LANGUAGE c
AS '$libdir/plr', $function$plr_call_handler$function$
]]></string>
		</function>
		<function name="plr_environ" id="Function2058483" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.plr_environ()
 RETURNS SETOF plr_environ_type
 LANGUAGE c
AS '$libdir/plr', $function$plr_environ$function$
]]></string>
		</function>
		<function name="plr_get_raw" id="Function2058484" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.plr_get_raw(bytea)
 RETURNS bytea
 LANGUAGE c
 STRICT
AS '$libdir/plr', $function$plr_get_raw$function$
]]></string>
		</function>
		<function name="plr_set_display" id="Function2058485" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.plr_set_display(text)
 RETURNS text
 LANGUAGE c
 STRICT
AS '$libdir/plr', $function$plr_set_display$function$
]]></string>
		</function>
		<function name="plr_set_rhome" id="Function2058486" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.plr_set_rhome(text)
 RETURNS text
 LANGUAGE c
 STRICT
AS '$libdir/plr', $function$plr_set_rhome$function$
]]></string>
		</function>
		<function name="plr_singleton_array" id="Function2058487" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.plr_singleton_array(double precision)
 RETURNS double precision[]
 LANGUAGE c
 STRICT
AS '$libdir/plr', $function$plr_array$function$
]]></string>
		</function>
		<function name="plr_unset_rhome" id="Function2058488" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.plr_unset_rhome()
 RETURNS text
 LANGUAGE c
AS '$libdir/plr', $function$plr_unset_rhome$function$
]]></string>
		</function>
		<function name="plr_version" id="Function2058489" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.plr_version()
 RETURNS text
 LANGUAGE c
AS '$libdir/plr', $function$plr_version$function$
]]></string>
		</function>
		<function name="r_typenames" id="Function2058490" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.r_typenames()
 RETURNS SETOF r_typename
 LANGUAGE plr
AS $function$
  x <- ls(name = .GlobalEnv, pat = "OID")
  y <- vector()
  for (i in 1:length(x)) {y[i] <- eval(parse(text = x[i]))}
  data.frame(typename = x, typeoid = y)
$function$
]]></string>
		</function>
		<function name="r_version" id="Function2058491" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.r_version()
 RETURNS SETOF r_version_type
 LANGUAGE plr
AS $function$
  cbind(names(version),unlist(version))
$function$
]]></string>
		</function>
		<function name="reload_plr_modules" id="Function2058492" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.reload_plr_modules()
 RETURNS text
 LANGUAGE c
AS '$libdir/plr', $function$reload_plr_modules$function$
]]></string>
		</function>
		<function name="update_action" id="Function2058493" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.update_action()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
	parent_id bigint;
BEGIN
	IF (OLD.name = 'root') THEN
		RAISE WARNING 'root elments are not editable.';
		RETURN OLD;
	END IF;
	IF (NEW.duration = 0) THEN
		RAISE WARNING 'Action duration cannot be 0 (set default 15)';
		NEW.duration = 15;
	END IF;
	RETURN NEW;
END
$function$
]]></string>
		</function>
		<function name="update_action_graph" id="Function2058493" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.update_action_graph()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
	IF (OLD.action_id != NEW.action_id OR OLD.parent_id != NEW.parent_id OR OLD.id != NEW.id) THEN
		RAISE EXCEPTION 'Action graph cannot be updated. Please delete and insert instead. No changes were made.';
	END IF;
	--cannot remove 
	IF (OLD.is_main_parent = TRUE AND NEW.is_main_parent = FALSE
		AND ((SELECT count(id) FROM action_graph WHERE action_id = NEW.action_id AND is_main_parent = TRUE)=1)
	) THEN
		NEW.is_main_parent = TRUE;
		RAISE WARNING 'An action needs at least one main parent. Set a new main parent instead. No changes were made.';
	END IF;
	RETURN NEW;
END
$function$
]]></string>
		</function>
		<function name="update_action_graph_after" id="Function2058494" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.update_action_graph_after()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
	IF (/*OLD.is_main_parent = FALSE AND */NEW.is_main_parent = TRUE) THEN
		UPDATE action_graph SET is_main_parent = FALSE
			WHERE action_id = NEW.action_id AND is_main_parent = TRUE AND parent_id != NEW.parent_id;
	END IF;
	RETURN NEW;
END
$function$
]]></string>
		</function>
		<function name="delete_ev_action" id="Function8170647" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.delete_ev_action()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
	PERFORM id FROM event WHERE id = OLD.event_id AND status = 'open';
	IF FOUND THEN
		RAISE EXCEPTION 'Cannot delete actions of a running event (event id: %)',OLD.event_id;
	END IF;
END
$function$
]]></string>
		</function>
		<function name="akeys" id="Function8970481" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.akeys(hstore)
 RETURNS text[]
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_akeys$function$
]]></string>
		</function>
		<function name="avals" id="Function8970482" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.avals(hstore)
 RETURNS text[]
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_avals$function$
]]></string>
		</function>
		<function name="defined" id="Function8970484" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.defined(hstore, text)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_defined$function$
]]></string>
		</function>
		<function name="delete" id="Function8970485" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.delete(hstore, text)
 RETURNS hstore
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_delete$function$
CREATE OR REPLACE FUNCTION public.delete(hstore, text[])
 RETURNS hstore
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_delete_array$function$
CREATE OR REPLACE FUNCTION public.delete(hstore, hstore)
 RETURNS hstore
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_delete_hstore$function$
]]></string>
		</function>
		<function name="delete_001" id="Function8970487" isSystem="false" />
		<function name="delete_002" id="Function8970490" isSystem="false" />
		<function name="each" id="Function8970500" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.each(hs hstore, OUT key text, OUT value text)
 RETURNS SETOF record
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_each$function$
]]></string>
		</function>
		<function name="exist" id="Function8970502" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.exist(hstore, text)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_exists$function$
]]></string>
		</function>
		<function name="exists_all" id="Function8970503" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.exists_all(hstore, text[])
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_exists_all$function$
]]></string>
		</function>
		<function name="exists_any" id="Function8970504" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.exists_any(hstore, text[])
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_exists_any$function$
]]></string>
		</function>
		<function name="fetchval" id="Function8970505" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.fetchval(hstore, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_fetchval$function$
]]></string>
		</function>
		<function name="ghstore_compress" id="Function8970506" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.ghstore_compress(internal)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$ghstore_compress$function$
]]></string>
		</function>
		<function name="ghstore_consistent" id="Function8970507" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.ghstore_consistent(internal, internal, integer, oid, internal)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$ghstore_consistent$function$
]]></string>
		</function>
		<function name="ghstore_decompress" id="Function8970508" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.ghstore_decompress(internal)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$ghstore_decompress$function$
]]></string>
		</function>
		<function name="ghstore_in" id="Function8970509" isSystem="false" />
		<function name="ghstore_out" id="Function8970510" isSystem="false" />
		<function name="ghstore_penalty" id="Function8970511" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.ghstore_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$ghstore_penalty$function$
]]></string>
		</function>
		<function name="ghstore_picksplit" id="Function8970512" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.ghstore_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$ghstore_picksplit$function$
]]></string>
		</function>
		<function name="ghstore_same" id="Function8970513" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.ghstore_same(internal, internal, internal)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$ghstore_same$function$
]]></string>
		</function>
		<function name="ghstore_union" id="Function8970514" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.ghstore_union(internal, internal)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$ghstore_union$function$
]]></string>
		</function>
		<function name="gin_consistent_hstore" id="Function8970515" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gin_consistent_hstore(internal, smallint, internal, integer, internal, internal)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$gin_consistent_hstore$function$
]]></string>
		</function>
		<function name="gin_extract_hstore" id="Function8970516" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gin_extract_hstore(internal, internal)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$gin_extract_hstore$function$
]]></string>
		</function>
		<function name="gin_extract_hstore_query" id="Function8970516" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gin_extract_hstore_query(internal, internal, smallint, internal, internal)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$gin_extract_hstore_query$function$
]]></string>
		</function>
		<function name="hs_concat" id="Function8970516" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hs_concat(hstore, hstore)
 RETURNS hstore
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_concat$function$
]]></string>
		</function>
		<function name="hs_contained" id="Function8970517" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hs_contained(hstore, hstore)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_contained$function$
]]></string>
		</function>
		<function name="hs_contains" id="Function8970518" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hs_contains(hstore, hstore)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_contains$function$
]]></string>
		</function>
		<function name="hstore" id="Function8970518" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hstore(text[])
 RETURNS hstore
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_from_array$function$
CREATE OR REPLACE FUNCTION public.hstore(record)
 RETURNS hstore
 LANGUAGE c
 IMMUTABLE
AS '$libdir/hstore', $function$hstore_from_record$function$
CREATE OR REPLACE FUNCTION public.hstore(text, text)
 RETURNS hstore
 LANGUAGE c
 IMMUTABLE
AS '$libdir/hstore', $function$hstore_from_text$function$
CREATE OR REPLACE FUNCTION public.hstore(text[], text[])
 RETURNS hstore
 LANGUAGE c
 IMMUTABLE
AS '$libdir/hstore', $function$hstore_from_arrays$function$
]]></string>
		</function>
		<function name="hstore_001" id="Function8970518" isSystem="false" />
		<function name="hstore_002" id="Function8970519" isSystem="false" />
		<function name="hstore_003" id="Function8970519" isSystem="false" />
		<function name="hstore_cmp" id="Function8970519" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hstore_cmp(hstore, hstore)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_cmp$function$
]]></string>
		</function>
		<function name="hstore_eq" id="Function8970520" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hstore_eq(hstore, hstore)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_eq$function$
]]></string>
		</function>
		<function name="hstore_ge" id="Function8970520" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hstore_ge(hstore, hstore)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_ge$function$
]]></string>
		</function>
		<function name="hstore_gt" id="Function8970520" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hstore_gt(hstore, hstore)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_gt$function$
]]></string>
		</function>
		<function name="hstore_hash" id="Function8970521" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hstore_hash(hstore)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_hash$function$
]]></string>
		</function>
		<function name="hstore_in" id="Function8970521" isSystem="false" />
		<function name="hstore_le" id="Function8970521" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hstore_le(hstore, hstore)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_le$function$
]]></string>
		</function>
		<function name="hstore_lt" id="Function8970522" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hstore_lt(hstore, hstore)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_lt$function$
]]></string>
		</function>
		<function name="hstore_ne" id="Function8970522" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hstore_ne(hstore, hstore)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_ne$function$
]]></string>
		</function>
		<function name="hstore_out" id="Function8970522" isSystem="false" />
		<function name="hstore_recv" id="Function8970523" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hstore_recv(internal)
 RETURNS hstore
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_recv$function$
]]></string>
		</function>
		<function name="hstore_send" id="Function8970523" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hstore_send(hstore)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_send$function$
]]></string>
		</function>
		<function name="hstore_to_array" id="Function8970523" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hstore_to_array(hstore)
 RETURNS text[]
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_to_array$function$
]]></string>
		</function>
		<function name="hstore_to_matrix" id="Function8970524" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hstore_to_matrix(hstore)
 RETURNS text[]
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_to_matrix$function$
]]></string>
		</function>
		<function name="hstore_version_diag" id="Function8970524" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hstore_version_diag(hstore)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_version_diag$function$
]]></string>
		</function>
		<function name="isdefined" id="Function8970524" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.isdefined(hstore, text)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_defined$function$
]]></string>
		</function>
		<function name="isexists" id="Function8970525" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.isexists(hstore, text)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_exists$function$
]]></string>
		</function>
		<function name="populate_record" id="Function8970525" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.populate_record(anyelement, hstore)
 RETURNS anyelement
 LANGUAGE c
 IMMUTABLE
AS '$libdir/hstore', $function$hstore_populate_record$function$
]]></string>
		</function>
		<function name="skeys" id="Function8970525" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.skeys(hstore)
 RETURNS SETOF text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_skeys$function$
]]></string>
		</function>
		<function name="slice" id="Function8970526" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.slice(hstore, text[])
 RETURNS hstore
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_slice_to_hstore$function$
]]></string>
		</function>
		<function name="slice_array" id="Function8970526" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.slice_array(hstore, text[])
 RETURNS text[]
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_slice_to_array$function$
]]></string>
		</function>
		<function name="svals" id="Function8970526" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.svals(hstore)
 RETURNS SETOF text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/hstore', $function$hstore_svals$function$
]]></string>
		</function>
		<function name="tconvert" id="Function8970527" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.tconvert(text, text)
 RETURNS hstore
 LANGUAGE c
 IMMUTABLE
AS '$libdir/hstore', $function$hstore_from_text$function$
]]></string>
		</function>
		<function name="ev_logger" id="Function1544934" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.ev_logger()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
    audit_row event_log;
BEGIN
	IF (TG_WHEN <> 'AFTER') THEN
		RAISE EXCEPTION 'ev_logger() may only run as an AFTER trigger';
	END IF;
	IF NOT (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
		RAISE EXCEPTION 'ev_logger() may only be used on UPDATE and INSERT operations';
	END IF;
	IF (TG_TABLE_NAME = 'event') THEN
		audit_row = ROW(
			nextval('event_log_id_seq'), -- event_log id
			NEW.id, -- event_id
			txid_current(),
			statement_timestamp(),
			TG_TABLE_NAME::text, -- table_name
			substring(TG_OP,1,1), -- action
			NEW.id, -- row_id (same as event_id)
			hstore('') --fields
		);
	ELSE
		audit_row = ROW(
			nextval('event_log_id_seq'), -- event_log id
			NEW.event_id, -- event_id
			txid_current(),
			statement_timestamp(),
			TG_TABLE_NAME::text, -- table_name
			substring(TG_OP,1,1), -- action
			NEW.id, -- row_id
			hstore('') --fields
		);
	END IF;
	IF (TG_OP = 'UPDATE') THEN
		audit_row.fields = (hstore(NEW.*) - hstore(OLD.*));
		IF audit_row.fields = hstore('') THEN RETURN NULL; END IF; --skip empty updates
	ELSIF (TG_OP = 'INSERT') THEN
		audit_row.fields = hstore(NEW.*);
	END IF;
	INSERT INTO event_log VALUES (audit_row.*);
	RETURN NULL;
END;
$function$
]]></string>
		</function>
		<function name="after_update_ev_action" id="Function6871534" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.after_update_ev_action()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
	IF (OLD.status != NEW.status) THEN
		--set all children to 'non executable' since the parent action was reverted to a non terminated status
		IF (OLD.status IN ('terminated (success)','terminated (not needed)','terminated (failed)')
			AND NEW.status IN ('executable','running'))
		THEN
			UPDATE ev_action SET status = 'non executable' WHERE id IN 
				(SELECT action_id FROM ev_action_graph WHERE parent_id = NEW.id);
		END IF;
		--check if some children can be marked as 'executable' (only if all parents are teminated)
		IF (OLD.status IN ('executable','running')
			AND NEW.status IN ('terminated (success)','terminated (not needed)','terminated (failed)'))
		THEN
			UPDATE ev_action SET status = 'executable' WHERE id IN 
				(SELECT y.action_id FROM (
					SELECT x.action_id,unnest((ev_action_next_status(x.action_id)).available_statuses) available_status
						FROM (SELECT action_id FROM ev_action_graph WHERE parent_id = NEW.id) x
					) y WHERE y.available_status = 'executable'
				);
		END IF;
	END IF;
	RETURN NEW;
END
$function$
]]></string>
		</function>
		<function name="ev_action_next_status" id="Function6871536" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.ev_action_next_status(ev_action_id bigint, OUT available_statuses text[], OUT reason text)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
DECLARE
	a ev_action;
	tarr text[];
BEGIN
	SELECT INTO a * FROM ev_action WHERE id = ev_action_id;
	IF NOT FOUND THEN
		RAISE EXCEPTION 'Action % not found!', ev_action_id;
	END IF;
	IF (a.status = 'non executable') THEN
		--check if there are non terminated parents
		FOR a IN SELECT ea.* FROM ev_action_graph ag LEFT JOIN ev_action ea ON ea.id = ag.parent_id
			WHERE ag.action_id = ev_action_id
		LOOP
			IF a.status IN ('executable','non executable','running') THEN
				tarr = tarr || a.name;
			END IF;
		END LOOP;
		IF (array_length(tarr, 1) > 0) THEN
			reason = 'Parent action(s) ' || array_to_string(tarr, ', ', '') || ' not completed';
		ELSE
			reason = 'All previous acions are completed.';
			available_statuses = ARRAY['executable'];
		END IF;
		
	ELSIF (a.status = 'executable') THEN
		available_statuses = ARRAY['non executable','running','terminated (success)',
			'terminated (not needed)','terminated (failed)'];
		reason = 'All previous acions are completed.';
		
	ELSIF (a.status = 'running') THEN
		available_statuses = ARRAY['terminated (success)','terminated (not needed)','terminated (failed)'];
		reason = 'Action is running and can be completed.';
		
	ELSIF (a.status IN ('terminated (success)','terminated (not needed)','terminated (failed)')) THEN
		--check if there are running or terminated children
		FOR a IN SELECT ea.* FROM ev_action_graph ag LEFT JOIN ev_action ea ON ea.id = ag.action_id
			WHERE ag.parent_id = ev_action_id
		LOOP
			IF a.status IN ('running','terminated (success)','terminated (not needed)','terminated (failed)') THEN
				tarr = tarr || a.name;
			END IF;
		END LOOP;
		IF (array_length(tarr, 1) > 0) THEN
			reason = 'Child(ren) Action(s) ' || array_to_string(tarr, ', ', '') || ' completed or running. Action cannot be reverted';
			available_statuses = ARRAY['terminated (success)','terminated (not needed)','terminated (failed)'];
		ELSE
			reason = 'Action is completed and can reverted to another status.';
			available_statuses = ARRAY['executable','non executable','terminated (success)',
				'terminated (not needed)','terminated (failed)'];
		END IF;
	END IF;
	
	RETURN;
END
$function$
CREATE OR REPLACE FUNCTION public.ev_action_next_status(event_id bigint, action_name text, OUT available_statuses text[], OUT reason text)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
DECLARE
	avs TEXT[];
	reas TEXT;
BEGIN
	SELECT INTO avs,reas * from ev_action_next_status(
		(SELECT id FROM ev_action ac WHERE ac.event_id = ev_action_next_status.event_id AND ac.name = action_name)
	);
	SELECT INTO available_statuses array(SELECT unnest(avs) EXCEPT SELECT 'non executable'::text);
	reason := reas;
	RETURN;
END
$function$
]]></string>
		</function>
		<function name="update_ev_action" id="Function6871539" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.update_ev_action()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
	IF ((OLD.status != NEW.status) AND
		(NEW.status NOT IN (SELECT unnest(available_statuses) FROM ev_action_next_status(OLD.id)))
	) THEN
		RAISE EXCEPTION 'Status (%) not available for action %!', NEW.status,OLD.name;
	END IF;
	RETURN NEW;
END
$function$
]]></string>
		</function>
		<function name="_gt_group_find_subtree" id="Function8113814" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._gt_group_find_subtree(group_id bigint, catalog_tree_table name)
 RETURNS TABLE(id bigint)
 LANGUAGE plpgsql
AS $function$
BEGIN
	RETURN QUERY EXECUTE 'WITH RECURSIVE subtree(elem) AS (
		(SELECT group_id FROM '||quote_ident($2)||' WHERE parent_group_id = '||$1||')
		UNION
		(SELECT group_id FROM '||quote_ident($2)||',subtree
		 WHERE '||quote_ident($2)||'.parent_group_id = subtree.elem)
	)
	SELECT elem FROM subtree';
END
$function$
]]></string>
			<comment><![CDATA[TODO]]></comment>
		</function>
		<function name="gt_catalog_layer_after_insert_check" id="Function8113816" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gt_catalog_layer_after_insert_check()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
	colname name;
	datatype varchar;
	codefound boolean = false;
	datafound boolean = false;
BEGIN
	IF NEW.geom_column IS NOT NULL THEN
		IF (NEW.geom_column,'geometry'::varchar) NOT IN
		(SELECT column_name, data_type FROM gt_get_table_columns(NEW.tableschema,NEW.tablename)) THEN
			RAISE EXCEPTION 'column ''%'' with type ''geometry'' not found in table ''%.%''',
				NEW.geom_column,NEW.tableschema,NEW.tablename;
		END IF;
	END IF;
	IF NEW.code_column IS NOT NULL THEN
		IF (NEW.code_column,'character varying'::varchar) NOT IN
		(SELECT column_name, data_type FROM gt_get_table_columns(NEW.tableschema,NEW.tablename)) THEN
			RAISE EXCEPTION 'column ''%'' with type ''character varying'' not found in table ''%.%''',
				NEW.code_column,NEW.tableschema,NEW.tablename;
		END IF;
	END IF;
	RETURN NEW;
END
$function$
]]></string>
		</function>
		<function name="gt_catalog_noedit" id="Function8113818" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gt_catalog_noedit()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
	reln name;
BEGIN
	SELECT INTO reln p.relname FROM pg_class p WHERE TG_RELID = p.oid;
	IF (reln = 'gt_catalog') THEN
		RAISE EXCEPTION 'Cannot insert or edit gt_catalog directly!';
	END IF;
	RETURN NEW;
END
$function$
]]></string>
		</function>
		<function name="gt_get_table_columns" id="Function8113824" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gt_get_table_columns(tableschema name, tablename name)
 RETURNS TABLE(column_name name, data_type character varying, is_nullable boolean)
 LANGUAGE plpgsql
AS $function$
DECLARE
	query_text text;
	udt_name varchar;
BEGIN
	query_text := 'SELECT column_name,data_type,is_nullable::boolean,udt_name
			FROM information_schema.columns
			WHERE table_schema = '||quote_literal($1)||' AND table_name = '||quote_literal($2)
			|| ' ORDER BY ordinal_position';
	FOR column_name,data_type,is_nullable,udt_name IN EXECUTE query_text
	LOOP
		IF data_type = 'USER-DEFINED' THEN
			data_type := udt_name;
		END IF;
		RETURN NEXT;
	END LOOP;
	IF NOT FOUND THEN
		RAISE EXCEPTION 'Table % not found in schema %',tablename,tableschema;
	END IF;
END
$function$
]]></string>
			<comment><![CDATA[TODO]]></comment>
		</function>
		<function name="gt_group_tree_check" id="Function8113827" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gt_group_tree_check()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
	IF (TG_OP = 'UPDATE' AND OLD.group_id < 2) THEN
		RAISE EXCEPTION 'Cannot modify root elements';
	END IF;
	IF (NEW.parent_group_id NOT IN
		(SELECT gid FROM gt_select('SELECT group_id FROM '||TG_TABLE_NAME) AS (gid bigint))
	) THEN
		RAISE EXCEPTION 'Parent not present in tree.';
	END IF;
	IF (NEW.group_id IN (SELECT * FROM _gt_group_find_subtree(NEW.group_id,TG_TABLE_NAME))) THEN
		RAISE EXCEPTION 'Cannot set a descendant as parent.';
	END IF;
	RETURN NEW;
END
$function$
]]></string>
		</function>
		<function name="gt_select" id="Function8113828" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gt_select(query_text text)
 RETURNS SETOF record
 LANGUAGE plpgsql
AS $function$
BEGIN
	RETURN QUERY EXECUTE query_text;
END
$function$
]]></string>
			<comment><![CDATA[Executes a select (returns a recordset)]]></comment>
		</function>
		<function name="start_event" id="Function8113829" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.start_event(scenario_name text, is_real boolean, event_geom geometry)
 RETURNS event
 LANGUAGE plpgsql
AS $function$
DECLARE
	ev event;
	scen scenario;
BEGIN
	--let's create the new event!
	SELECT INTO scen * FROM scenario WHERE name = scenario_name;
	IF NOT FOUND THEN
		RAISE EXCEPTION 'Scenario not found!';
	END IF;
	ev.managing_authority_id = scen.managing_authority_id;
	ev.event_name = scen.name;
	ev.event_description = scen.description;
	ev.scenario_geom = scen.geom;
	
	SELECT INTO ev.category_name,ev.category_description,ev.subcategory_name,ev.subcategory_description
		c.name,c.description,sc.name,sc.description
		FROM scenario_subcategory sc LEFT JOIN scenario_category c ON sc.category_id = c.id
		WHERE sc.id = scen.subcategory_id;
	ev.id = nextval('event_id_seq');
	ev.is_real = is_real;
	ev.time_start = statement_timestamp();
	ev.status = 'open'::TEXT;
	ev.time_end = NULL;
	ev.event_geom = event_geom;
	INSERT INTO event VALUES (ev.*);
	--copy actions from the given scenario
	INSERT INTO ev_action (event_id,name,numcode,description,duration) 
		SELECT ev.id,name,numcode,description,duration FROM action WHERE scenario_id = scen.id;
	--copy visualizations
	INSERT INTO ev_visualization (action_id,description,type,resource,options)
		SELECT ea.id,v.description,v.type,v.resource,v.options FROM action a
			RIGHT JOIN visualization v ON a.id = v.action_id
			LEFT JOIN ev_action ea ON ea.name = a.name
			WHERE a.scenario_id = scen.id AND ea.event_id = ev.id;
	--copy action graph (recompute new ids)
	INSERT INTO ev_action_graph (action_id,parent_id,is_main_parent)
		SELECT ea.id action_id,eap.id parent_id,ag.is_main_parent FROM action_graph ag
		LEFT JOIN action a ON a.id = ag.action_id
		LEFT JOIN action ap ON ap.id = ag.parent_id
		LEFT JOIN ev_action ea ON ea.name = a.name
		LEFT JOIN ev_action eap ON eap.name = ap.name
		WHERE a.scenario_id = scen.id AND ap.scenario_id = scen.id
			AND eap.event_id = ev.id AND ea.event_id = ev.id;
	--copy actors
	INSERT INTO ev_actor (event_id,name,istitution,contact_info,email,phone)
		SELECT DISTINCT ev.id,ar.name,ar.istitution,ar.contact_info,ar.email,ar.phone FROM actor ar
		RIGHT JOIN action_m2m_actor m2m ON m2m.actor_id = ar.id
		LEFT JOIN action an ON an.id = m2m.action_id
		WHERE an.scenario_id = scen.id;
	--copy action_m2m_actor (recompute new ids)
	INSERT INTO ev_action_m2m_actor (action_id,actor_id)
		SELECT ea.id,ear.id FROM action_m2m_actor m2m
		LEFT JOIN action a ON a.id = m2m.action_id
		LEFT JOIN actor ar ON ar.id = m2m.actor_id
		LEFT JOIN ev_action ea ON ea.name = a.name
		LEFT JOIN ev_actor ear ON ear.email = ar.email
		WHERE a.scenario_id = scen.id AND ea.event_id = ev.id AND ear.event_id = ev.id;
	--mark root action as terminated
	UPDATE ev_action SET status = 'executable' WHERE event_id = ev.id AND name = 'root';
	UPDATE ev_action SET status = 'terminated (success)' WHERE event_id = ev.id AND name = 'root';
	
	ANALYZE ev_action;
	ANALYZE ev_visualization;
	ANALYZE ev_action_graph;
	ANALYZE ev_actor;
	ANALYZE ev_action_m2m_actor;
	ANALYZE event_log;
	RETURN ev;
END
$function$
]]></string>
		</function>
		<function name="add_vertices_geometry" id="Function3750025" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.add_vertices_geometry(geom_table character varying)
 RETURNS void
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	vertices_table varchar := quote_ident(geom_table) || '_vertices';
BEGIN
	
	BEGIN
		EXECUTE 'SELECT addGeometryColumn(''' || 
                        quote_ident(vertices_table)  || 
                        ''', ''the_geom'', -1, ''POINT'', 2)';
	EXCEPTION 
		WHEN DUPLICATE_COLUMN THEN
	END;
	EXECUTE 'UPDATE ' || quote_ident(vertices_table) || 
                ' SET the_geom = NULL';
	EXECUTE 'UPDATE ' || quote_ident(vertices_table) || 
                ' SET the_geom = ST_STARTPOINT(geometryn(m.the_geom, 1)) FROM ' ||
                 quote_ident(geom_table) || 
                ' m where geom_id = m.source';
	EXECUTE 'UPDATE ' || quote_ident(vertices_table) || 
                ' set the_geom = ST_ENDPOINT(geometryn(m.the_geom, 1)) FROM ' || 
                quote_ident(geom_table) || 
                ' m where geom_id = m.target_id AND ' || 
                quote_ident(vertices_table) || 
                '.the_geom IS NULL';
	RETURN;
END;
$function$
]]></string>
		</function>
		<function name="alphashape" id="Function3750027" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.alphashape(sql text)
 RETURNS SETOF vertex_result
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/librouting_dd', $function$alphashape$function$
]]></string>
		</function>
		<function name="assign_vertex_id" id="Function3750028" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.assign_vertex_id(geom_table character varying, tolerance double precision, geo_cname character varying, gid_cname character varying)
 RETURNS character varying
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
    _r record;
    source_id int;
    target_id int;
    srid integer;
BEGIN
    BEGIN
    DROP TABLE vertices_tmp;
    EXCEPTION 
    WHEN UNDEFINED_TABLE THEN
    END;
    EXECUTE 'CREATE TABLE vertices_tmp (id serial)';
--    FOR _r IN EXECUTE 'SELECT srid FROM geometry_columns WHERE f_table_name='''|| quote_ident(geom_table)||''';' LOOP
--	srid := _r.srid;
--    END LOOP;
    srid := Find_SRID('public',quote_ident(geom_table),quote_ident(geo_cname));

    EXECUTE 'SELECT addGeometryColumn(''vertices_tmp'', ''the_geom'', '||srid||', ''POINT'', 2)';
    CREATE INDEX vertices_tmp_idx ON vertices_tmp USING GIST (the_geom);
			
    FOR _r IN EXECUTE 'SELECT ' || quote_ident(gid_cname) || ' AS id,'
	    || ' ST_STARTPOINT('|| quote_ident(geo_cname) ||') AS source,'
            || ' ST_ENDPOINT('|| quote_ident(geo_cname) ||') as target'
	    || ' FROM ' || quote_ident(geom_table) 
    LOOP
        
        source_id := point_to_id(ST_SETSRID(_r.source, srid), tolerance);
	target_id := point_to_id(ST_SETSRID(_r.target, srid), tolerance);
								
	EXECUTE 'update ' || quote_ident(geom_table) || 
		' SET source = ' || source_id || 
		', target = ' || target_id || 
		' WHERE ' || quote_ident(gid_cname) || ' =  ' || _r.id;
    END LOOP;
    RETURN 'OK';
END;
$function$
]]></string>
		</function>
		<function name="astar_sp" id="Function3750031" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.astar_sp(geom_table character varying, source integer, target integer)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	id integer;
BEGIN
	
	id :=0;
	FOR path_result IN EXECUTE 'SELECT gid,the_geom FROM ' || 
           'astar_sp_directed(''' || 
           quote_ident(geom_table) || ''', ' || quote_literal(source) || ', ' || 
	   quote_literal(target) || ', false, false)'
        LOOP
              geom.gid      := path_result.gid;
              geom.the_geom := path_result.the_geom;
              id := id+1;
	      geom.id       := id;
                 
              RETURN NEXT geom;
        END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="astar_sp_bbox" id="Function3750039" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.astar_sp_bbox(character varying, integer, integer, double precision, double precision, double precision, double precision)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	ll_x ALIAS FOR $4;
	ll_y ALIAS FOR $5;
	ur_x ALIAS FOR $6;
	ur_y ALIAS FOR $7;
	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	srid integer;
	id integer;
BEGIN
	
	id :=0;
	FOR path_result IN EXECUTE 'SELECT gid,the_geom FROM ' || 
           'astar_sp_bbox_directed(''' || 
           quote_ident(geom_table) || ''', ' || quote_literal(sourceid) || ', ' || 
	   quote_literal(targetid) || ', ' || ll_x || ', ' || ll_y || ', ' ||
	   ur_x || ', ' || ur_y || ', false, false)'
        LOOP
               geom.gid      := path_result.gid;
               geom.the_geom := path_result.the_geom;
               id := id+1;
	       geom.id       := id;
                 
               RETURN NEXT geom;
        END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="astar_sp_bbox_directed" id="Function3750040" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.astar_sp_bbox_directed(character varying, integer, integer, double precision, double precision, double precision, double precision, boolean, boolean)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	ll_x ALIAS FOR $4;
	ll_y ALIAS FOR $5;
	ur_x ALIAS FOR $6;
	ur_y ALIAS FOR $7;
	dir ALIAS FOR $8;
	rc ALIAS FOR $9;
	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	srid integer;
	
	query text;
	id integer;
BEGIN
	
	id :=0;
	FOR rec IN EXECUTE
	    'select ST_SRID(the_geom) from ' ||
	    quote_ident(geom_table) || ' limit 1'
	LOOP
	END LOOP;
	srid := rec.srid;
	
	query := 'SELECT gid,the_geom FROM ' || 
           'shortest_path_astar(''SELECT gid as id, source::integer, ' || 
           'target::integer, length::double precision as cost, ' || 
           'x1::double precision, y1::double precision, ' || 
           'x2::double precision, y2::double precision ';
	   
	IF rc THEN query := query || ' , reverse_cost ';
	END IF;
	   
	query := query || 'FROM ' || 
           quote_ident(geom_table) || ' where ST_SETSRID(''''BOX3D('||ll_x||' '||
           ll_y||','||ur_x||' '||ur_y||')''''::BOX3D, ' || srid || 
	   ') && the_geom'', ' || quote_literal(sourceid) || ' , ' || 
           quote_literal(targetid) || ' , '''||text(dir)||''', '''||text(rc)||''' ),'  ||
           quote_ident(geom_table) || ' where edge_id = gid ';
	
	FOR path_result IN EXECUTE query
        LOOP
               geom.gid      := path_result.gid;
               geom.the_geom := path_result.the_geom;
               id := id+1;
	       geom.id       := id;
                 
               RETURN NEXT geom;
        END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="astar_sp_delta" id="Function3750041" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.astar_sp_delta(character varying, integer, integer, double precision)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	delta ALIAS FOR $4;
	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	id integer;
BEGIN
	
	id :=0;
	FOR path_result IN EXECUTE 'SELECT gid,the_geom FROM ' || 
           'astar_sp_delta_directed(''' || 
           quote_ident(geom_table) || ''', ' || quote_literal(sourceid) || ', ' || 
	   quote_literal(targetid) || ', ' || delta || ', false, false)'
        LOOP
                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;
        END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="astar_sp_delta_cc" id="Function3750041" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.astar_sp_delta_cc(character varying, integer, integer, double precision, character varying)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	delta ALIAS FOR $4;
	cost_column ALIAS FOR $5;
	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	id integer;
BEGIN
	
	id :=0;
	FOR path_result IN EXECUTE 'SELECT gid,the_geom FROM ' || 
           'astar_sp_delta_cc_directed(''' || 
           quote_ident(geom_table) || ''', ' || quote_literal(sourceid) || ', ' || 
	   quote_literal(targetid) || ', ' || delta || ',' || 
	   quote_literal(cost_column) || ', false, false)'
        LOOP
                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;
        END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="astar_sp_delta_cc_directed" id="Function3750043" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.astar_sp_delta_cc_directed(character varying, integer, integer, double precision, character varying, boolean, boolean)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	delta ALIAS FOR $4;
	cost_column ALIAS FOR $5;
	dir ALIAS FOR $6;
	rc ALIAS FOR $7;
	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	srid integer;
	source_x float8;
	source_y float8;
	target_x float8;
	target_y float8;
	
	ll_x float8;
	ll_y float8;
	ur_x float8;
	ur_y float8;
	
	query text;
	id integer;
BEGIN
	
	id :=0;
	FOR rec IN EXECUTE
	    'select ST_SRID(the_geom) from ' ||
	    quote_ident(geom_table) || ' limit 1'
	LOOP
	END LOOP;
	srid := rec.srid;
	
	FOR rec IN EXECUTE 
            'select ST_X(ST_STARTPOINT(the_geom)) as source_x from ' || 
            quote_ident(geom_table) || ' where source = ' || 
            sourceid || ' or target='||sourceid||' limit 1'
        LOOP
	END LOOP;
	source_x := rec.source_x;
	
	FOR rec IN EXECUTE 
            'select ST_Y(ST_STARTPOINT(the_geom)) as source_y from ' || 
            quote_ident(geom_table) || ' where source = ' || 
            sourceid ||  ' or target='||sourceid||' limit 1'
        LOOP
	END LOOP;
	source_y := rec.source_y;
	FOR rec IN EXECUTE 
            'select ST_X(ST_STARTPOINT(the_geom)) as target_x from ' ||
            quote_ident(geom_table) || ' where source = ' || 
            targetid ||  ' or target='||targetid||' limit 1'
        LOOP
	END LOOP;
	target_x := rec.target_x;
	
	FOR rec IN EXECUTE 
            'select ST_Y(ST_STARTPOINT(the_geom)) as target_y from ' || 
            quote_ident(geom_table) || ' where source = ' || 
            targetid ||  ' or target='||targetid||' limit 1'
        LOOP
	END LOOP;
	target_y := rec.target_y;

	FOR rec IN EXECUTE 'SELECT CASE WHEN '||source_x||'<'||target_x||
           ' THEN '||source_x||' ELSE '||target_x||
           ' END as ll_x, CASE WHEN '||source_x||'>'||target_x||
           ' THEN '||source_x||' ELSE '||target_x||' END as ur_x'
        LOOP
	END LOOP;
	ll_x := rec.ll_x;
	ur_x := rec.ur_x;
	FOR rec IN EXECUTE 'SELECT CASE WHEN '||source_y||'<'||
            target_y||' THEN '||source_y||' ELSE '||
            target_y||' END as ll_y, CASE WHEN '||
            source_y||'>'||target_y||' THEN '||
            source_y||' ELSE '||target_y||' END as ur_y'
        LOOP
	END LOOP;
	ll_y := rec.ll_y;
	ur_y := rec.ur_y;
	query := 'SELECT gid,the_geom FROM ' || 
          'shortest_path_astar(''SELECT gid as id, source::integer, ' || 
          'target::integer, '||cost_column||'::double precision as cost, ' || 
          'x1::double precision, y1::double precision, x2::double ' ||
          'precision, y2::double precision ';
	
	IF rc THEN query := query || ' , reverse_cost ';
	END IF;
	  
	query := query || 'FROM ' || quote_ident(geom_table) || ' where ST_SETSRID(''''BOX3D('||
          ll_x-delta||' '||ll_y-delta||','||ur_x+delta||' '||
          ur_y+delta||')''''::BOX3D, ' || srid || ') && the_geom'', ' || 
          quote_literal(sourceid) || ' , ' || 
          quote_literal(targetid) || ' , '''||text(dir)||''', '''||text(rc)||''' ),' || 
          quote_ident(geom_table) || ' where edge_id = gid ';
	
	FOR path_result IN EXECUTE query
        LOOP
                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;
        END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="astar_sp_delta_directed" id="Function3750043" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.astar_sp_delta_directed(character varying, integer, integer, double precision, boolean, boolean)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	delta ALIAS FOR $4;
	dir ALIAS FOR $5;
	rc ALIAS FOR $6;
	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	srid integer;
	source_x float8;
	source_y float8;
	target_x float8;
	target_y float8;
	
	ll_x float8;
	ll_y float8;
	ur_x float8;
	ur_y float8;
	
	query text;
	id integer;
BEGIN
	
	id :=0;
	FOR rec IN EXECUTE
	    'select ST_SRID(the_geom) from ' ||
	    quote_ident(geom_table) || ' limit 1'
	LOOP
	END LOOP;
	srid := rec.srid;
	
	FOR rec IN EXECUTE 
            'select ST_X(ST_STARTPOINT(the_geom)) as source_x from ' || 
            quote_ident(geom_table) || ' where source = ' || 
            sourceid ||  ' or target='||sourceid||' limit 1'
        LOOP
	END LOOP;
	source_x := rec.source_x;
	
	FOR rec IN EXECUTE 
            'select ST_Y(ST_STARTPOINT(the_geom)) as source_y from ' || 
            quote_ident(geom_table) || ' where source = ' || 
            sourceid ||  ' or target='||sourceid||' limit 1'
        LOOP
	END LOOP;
	source_y := rec.source_y;
	FOR rec IN EXECUTE 
            'select ST_X(ST_STARTPOINT(the_geom)) as target_x from ' ||
            quote_ident(geom_table) || ' where source = ' || 
            targetid ||  ' or target='||targetid||' limit 1'
        LOOP
	END LOOP;
	target_x := rec.target_x;
	
	FOR rec IN EXECUTE 
            'select ST_Y(ST_STARTPOINT(the_geom)) as target_y from ' || 
            quote_ident(geom_table) || ' where source = ' || 
            targetid ||  ' or target='||targetid||' limit 1'
        LOOP
	END LOOP;
	target_y := rec.target_y;
	FOR rec IN EXECUTE 'SELECT CASE WHEN '||source_x||'<'||target_x||
           ' THEN '||source_x||' ELSE '||target_x||
           ' END as ll_x, CASE WHEN '||source_x||'>'||target_x||
           ' THEN '||source_x||' ELSE '||target_x||' END as ur_x'
        LOOP
	END LOOP;
	ll_x := rec.ll_x;
	ur_x := rec.ur_x;
	FOR rec IN EXECUTE 'SELECT CASE WHEN '||source_y||'<'||
            target_y||' THEN '||source_y||' ELSE '||
            target_y||' END as ll_y, CASE WHEN '||
            source_y||'>'||target_y||' THEN '||
            source_y||' ELSE '||target_y||' END as ur_y'
        LOOP
	END LOOP;
	ll_y := rec.ll_y;
	ur_y := rec.ur_y;
	query := 'SELECT gid,the_geom FROM ' || 
          'shortest_path_astar(''SELECT gid as id, source::integer, ' || 
          'target::integer, length::double precision as cost, ' || 
          'x1::double precision, y1::double precision, x2::double ' ||
          'precision, y2::double precision ';
	  
	IF rc THEN query := query || ' , reverse_cost ';  
	END IF;
	  
	query := query || 'FROM ' || quote_ident(geom_table) || ' where ST_SETSRID(''''BOX3D('||
          ll_x-delta||' '||ll_y-delta||','||ur_x+delta||' '||
          ur_y+delta||')''''::BOX3D, ' || srid || ') && the_geom'', ' || 
          quote_literal(sourceid) || ' , ' || 
          quote_literal(targetid) || ' , '''||text(dir)||''', '''||text(rc)||''' ),' || 
          quote_ident(geom_table) || ' where edge_id = gid ';
	  
	FOR path_result IN EXECUTE query
        LOOP
                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;
--
--                v_id = path_result.vertex_id;
--                e_id = path_result.edge_id;
--                FOR r IN EXECUTE 'SELECT gid, the_geom FROM ' || 
--                      quote_ident(geom_table) || '  WHERE gid = ' || 
--                      quote_literal(e_id) LOOP
--                        geom.gid := r.gid;
--                        geom.the_geom := r.the_geom;
--                        RETURN NEXT geom;
--                END LOOP;
        END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="astar_sp_directed" id="Function3750044" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.astar_sp_directed(geom_table character varying, source integer, target integer, dir boolean, rc boolean)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	query text;
	id integer;
BEGIN
	
	id :=0;
	query := 'SELECT gid,the_geom FROM ' || 
           'shortest_path_astar(''SELECT gid as id, source::integer, ' || 
           'target::integer, length::double precision as cost, ' || 
           'x1::double precision, y1::double precision, ' || 
           'x2::double precision, y2::double precision ';
	   
	IF rc THEN query := query || ' , reverse_cost ';
	END IF;
	query := query || 'FROM ' || quote_ident(geom_table) || ' '', ' || 
           quote_literal(source) || ' , ' || 
           quote_literal(target) || ' , '''||text(dir)||''', '''||text(rc)||'''), ' ||
           quote_ident(geom_table) || ' where edge_id = gid ';
	   
	FOR path_result IN EXECUTE query
        LOOP
              geom.gid      := path_result.gid;
              geom.the_geom := path_result.the_geom;
              id := id+1;
	      geom.id       := id;
                 
              RETURN NEXT geom;
        END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="dijkstra_sp" id="Function3750046" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dijkstra_sp(geom_table character varying, source integer, target integer)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
	r record;
	path_result record;
	v_id integer;
	e_id integer;
	geom geoms;
	id integer;
BEGIN
	
	id :=0;
	
	FOR path_result IN EXECUTE 'SELECT gid,the_geom FROM ' ||
          'shortest_path(''SELECT gid as id, source::integer, target::integer, ' || 
          'length::double precision as cost FROM ' ||
	  quote_ident(geom_table) || ''', ' || quote_literal(source) || 
          ' , ' || quote_literal(target) || ' , false, false), ' || 
          quote_ident(geom_table) || ' where edge_id = gid ' 
        LOOP
                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;
	END LOOP;
	RETURN;
END;
$function$
]]></string>
		</function>
		<function name="dijkstra_sp_delta" id="Function3750047" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dijkstra_sp_delta(character varying, integer, integer, double precision)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	delta ALIAS FOR $4;
	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	id integer;
BEGIN
	
	id :=0;
	FOR path_result IN EXECUTE 'SELECT gid,the_geom FROM ' || 
           'dijkstra_sp_delta_directed(''' || 
           quote_ident(geom_table) || ''', ' || quote_literal(sourceid) || ', ' || 
	   quote_literal(targetid) || ', ' || delta || ', false, false)'
        LOOP
                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;
        END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="dijkstra_sp_delta_directed" id="Function3750048" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dijkstra_sp_delta_directed(character varying, integer, integer, double precision, boolean, boolean)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	delta ALIAS FOR $4;
	dir ALIAS FOR $5;
	rc ALIAS FOR $6;
	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	srid integer;
	source_x float8;
	source_y float8;
	target_x float8;
	target_y float8;
	
	ll_x float8;
	ll_y float8;
	ur_x float8;
	ur_y float8;
	
	query text;
	id integer;
BEGIN
	
	id :=0;
	FOR rec IN EXECUTE
	    'select ST_SRID(the_geom) from ' ||
	    quote_ident(geom_table) || ' limit 1'
	LOOP
	END LOOP;
	srid := rec.srid;
	FOR rec IN EXECUTE 
            'select ST_X(ST_STARTPOINT(the_geom)) as source_x from ' || 
            quote_ident(geom_table) || ' where source = ' || 
            sourceid ||  ' or target='||sourceid||' limit 1'
        LOOP
	END LOOP;
	source_x := rec.source_x;
	
	FOR rec IN EXECUTE 
            'select ST_Y(ST_STARTPOINT(the_geom)) as source_y from ' || 
            quote_ident(geom_table) || ' where source = ' || 
            sourceid ||  ' or target='||sourceid||' limit 1'
        LOOP
	END LOOP;
	source_y := rec.source_y;
	FOR rec IN EXECUTE 
            'select ST_X(ST_STARTPOINT(the_geom)) as target_x from ' ||
            quote_ident(geom_table) || ' where source = ' || 
            targetid ||  ' or target='||targetid||' limit 1'
        LOOP
	END LOOP;
	target_x := rec.target_x;
	
	FOR rec IN EXECUTE 
            'select ST_Y(ST_STARTPOINT(the_geom)) as target_y from ' || 
            quote_ident(geom_table) || ' where source = ' || 
            targetid ||  ' or target='||targetid||' limit 1'
        LOOP
	END LOOP;
	target_y := rec.target_y;

	FOR rec IN EXECUTE 'SELECT CASE WHEN '||source_x||'<'||target_x||
           ' THEN '||source_x||' ELSE '||target_x||
           ' END as ll_x, CASE WHEN '||source_x||'>'||target_x||
           ' THEN '||source_x||' ELSE '||target_x||' END as ur_x'
        LOOP
	END LOOP;
	ll_x := rec.ll_x;
	ur_x := rec.ur_x;
	FOR rec IN EXECUTE 'SELECT CASE WHEN '||source_y||'<'||
            target_y||' THEN '||source_y||' ELSE '||
            target_y||' END as ll_y, CASE WHEN '||
            source_y||'>'||target_y||' THEN '||
            source_y||' ELSE '||target_y||' END as ur_y'
        LOOP
	END LOOP;
	ll_y := rec.ll_y;
	ur_y := rec.ur_y;
	query := 'SELECT gid,the_geom FROM ' || 
          'shortest_path(''SELECT gid as id, source::integer, target::integer, ' || 
          'length::double precision as cost ';
	  
	IF rc THEN query := query || ' , reverse_cost ';
	END IF;
	query := query || ' FROM ' || quote_ident(geom_table) || ' where ST_SETSRID(''''BOX3D('||
          ll_x-delta||' '||ll_y-delta||','||ur_x+delta||' '||
          ur_y+delta||')''''::BOX3D, ' || srid || ') && the_geom'', ' || 
          quote_literal(sourceid) || ' , ' || 
          quote_literal(targetid) || ' , '''||text(dir)||''', '''||text(rc)||''' ), ' ||
          quote_ident(geom_table) || ' where edge_id = gid ';
	  
	FOR path_result IN EXECUTE query
        LOOP
                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;
        END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="dijkstra_sp_directed" id="Function3750049" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dijkstra_sp_directed(geom_table character varying, source integer, target integer, dir boolean, rc boolean)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
	r record;
	path_result record;
	v_id integer;
	e_id integer;
	geom geoms;
	query text;
	id integer;
BEGIN
	
	id :=0;
	
	query := 'SELECT gid,the_geom FROM ' ||
          'shortest_path(''SELECT gid as id, source::integer, target::integer, ' || 
          'length::double precision as cost ';
	  
	IF rc THEN query := query || ', reverse_cost ';  
	END IF;
	
	query := query || 'FROM ' ||  quote_ident(geom_table) || ''', ' || quote_literal(source) || 
          ' , ' || quote_literal(target) || ' , '''||text(dir)||''', '''||text(rc)||'''), ' || 
          quote_ident(geom_table) || ' where edge_id = gid ';
	FOR path_result IN EXECUTE query
        LOOP
                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;
	END LOOP;
	RETURN;
END;
$function$
]]></string>
		</function>
		<function name="driving_distance" id="Function3750050" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.driving_distance(sql text, source_id integer, distance double precision, directed boolean, has_reverse_cost boolean)
 RETURNS SETOF path_result
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/librouting_dd', $function$driving_distance$function$
CREATE OR REPLACE FUNCTION public.driving_distance(table_name character varying, x double precision, y double precision, distance double precision, cost character varying, reverse_cost character varying, directed boolean, has_reverse_cost boolean)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
     q text;
     srid integer;
     r record;
     geom geoms;
BEGIN
     
     FOR r IN EXECUTE 'SELECT srid FROM geometry_columns WHERE f_table_name = '''||table_name||'''' LOOP
     END LOOP;
     
     srid := r.srid;
     
     RAISE NOTICE 'SRID: %', srid;
     q := 'SELECT gid, the_geom FROM points_as_polygon(''SELECT a.vertex_id::integer AS id, b.x1::double precision AS x, b.y1::double precision AS y'||
     ' FROM driving_distance(''''''''SELECT gid AS id,source::integer,target::integer, '||cost||'::double precision AS cost, '||
     reverse_cost||'::double precision as reverse_cost FROM '||
     table_name||' WHERE ST_setSRID(''''''''''''''''BOX3D('||
     x-distance||' '||y-distance||', '||x+distance||' '||y+distance||')''''''''''''''''::BOX3D, '||srid||') && the_geom  '''''''', (SELECT id FROM find_node_by_nearest_link_within_distance(''''''''POINT('||x||' '||y||')'''''''','||distance/10||','''''''''||table_name||''''''''')),'||
     distance||',true,true) a, (SELECT * FROM '||table_name||' WHERE ST_setSRID(''''''''BOX3D('||
     x-distance||' '||y-distance||', '||x+distance||' '||y+distance||')''''''''::BOX3D, '||srid||')&&the_geom) b WHERE a.vertex_id = b.source'')';
     RAISE NOTICE 'Query: %', q;
     
     FOR r IN EXECUTE q LOOP     
        geom.gid := r.gid;
        geom.the_geom := r.the_geom;
        RETURN NEXT geom;
     END LOOP;
     
     RETURN;
END;
$function$
]]></string>
		</function>
		<function name="driving_distance_001" id="Function3750051" isSystem="false" />
		<function name="ev_action_next_status_001" id="Function3750052" isSystem="false" />
		<function name="ev_action_next_status_gui" id="Function3750053" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.ev_action_next_status_gui(action_id bigint, OUT available_statuses text[], OUT reason text)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
DECLARE
	avs TEXT[];
BEGIN
	SELECT INTO avs,reason * from ev_action_next_status(action_id);
	SELECT INTO available_statuses array(SELECT unnest(avs) EXCEPT SELECT 'non executable'::text);
	RETURN;
END
$function$
]]></string>
		</function>
		<function name="insert_vertex" id="Function3750054" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.insert_vertex(vertices_table character varying, geom_id anyelement)
 RETURNS integer
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
        vertex_id int;
        myrec record;
BEGIN
        LOOP
          FOR myrec IN EXECUTE 'SELECT id FROM ' || 
                     quote_ident(vertices_table) || 
                     ' WHERE geom_id = ' || quote_literal(geom_id)  LOOP
                        IF myrec.id IS NOT NULL THEN
                                RETURN myrec.id;
                        END IF;
          END LOOP; 
          EXECUTE 'INSERT INTO ' || quote_ident(vertices_table) || 
                  ' (geom_id) VALUES (' || quote_literal(geom_id) || ')';
        END LOOP;
END;
$function$
]]></string>
		</function>
		<function name="path_fastest" id="Function3750055" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.path_fastest(interruptions_polygons_wtk text, source_id integer, target_id integer)
 RETURNS text
 LANGUAGE sql
AS $function$
	SELECT ST_AsGeoJSON(ST_Union(the_geom))
	FROM Shortest_path(
		'SELECT gid AS id, source, target, time AS cost, reverse_time AS reverse_cost
		FROM brenner WHERE NOT ST_Intersects (
			brenner.the_geom,
			(st_geomfromtext('||quote_literal(interruptions_polygons_wtk)||',4326))
		)',
		source_id,
		target_id,
		false,
		true
	) AS path, brenner AS topo WHERE path.edge_id=topo.gid;
$function$
]]></string>
		</function>
		<function name="path_shortest" id="Function3750056" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.path_shortest(interruptions_polygons_wtk text, source_id integer, target_id integer)
 RETURNS text
 LANGUAGE sql
AS $function$
	SELECT ST_AsGeoJSON(ST_Union(the_geom))
	FROM Shortest_path(
		'select gid AS id, source, target, cost, reverse_cost
		FROM brenner WHERE NOT ST_Intersects (
			brenner.the_geom,
			(st_geomfromtext('||quote_literal(interruptions_polygons_wtk)||',4326))
		)',
		source_id,
		target_id,
		false,
		true
	) AS path, brenner AS topo WHERE path.edge_id=topo.gid;
$function$
]]></string>
		</function>
		<function name="path_vulnerability" id="Function3750056" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.path_vulnerability(vulnerability text, interruptions_polygons_wtk text, source_id integer, target_id integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
	col text;
	result text;
BEGIN
	CASE vulnerability
	    WHEN 'landslides' THEN
		col := 'nat01';
	    WHEN 'mudslides' THEN
		col := 'nat02';
	    WHEN 'floods' THEN
		col := 'nat03';
	    WHEN 'earthquakes' THEN
		col := 'nat04';
	    WHEN 'avalanches' THEN
		col := 'nat05';
	    WHEN 'forestfires' THEN
		col := 'nat06';
	    WHEN 'scree' THEN
		col := 'nat07';
	    ELSE
		RAISE EXCEPTION 'Wrong vulerability type';
	END CASE;
	SELECT INTO result ST_AsGeoJSON(ST_Union(the_geom))
	FROM Shortest_path(
		'select gid AS id, source, target, cost, reverse_cost
		FROM brenner WHERE '||quote_ident(col)||' = 0 AND NOT ST_Intersects (
			brenner.the_geom,
			(st_geomfromtext('||quote_literal(interruptions_polygons_wtk)||',4326))
		)',
		source_id,
		target_id,
		false,
		true
	) AS path, brenner AS topo WHERE path.edge_id=topo.gid;
	RETURN result;
END
$function$
]]></string>
		</function>
		<function name="point_to_id" id="Function3750057" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.point_to_id(p geometry, tolerance double precision)
 RETURNS bigint
 LANGUAGE plpgsql
 STRICT
AS $function$ 
DECLARE
    _r record; 
    _id bigint; 
    _srid integer;
BEGIN
    _srid := Find_SRID('public','vertices_tmp','the_geom');
    SELECT
        ST_Distance(the_geom,GeometryFromText( ST_AsText(p), _srid)) AS d, id, the_geom
    INTO _r FROM vertices_tmp WHERE
        the_geom && Expand(GeometryFromText(ST_AsText(p), _srid), tolerance ) AND ST_Distance(the_geom, GeometryFromText(ST_AsText(p), _srid)) < tolerance
    ORDER BY d LIMIT 1; IF FOUND THEN
        _id:= _r.id;
    ELSE
        INSERT INTO vertices_tmp(the_geom) VALUES (ST_SETSRID(p,_srid)); _id:=lastval();
    END IF;
    RETURN _id;
END; $function$
]]></string>
		</function>
		<function name="points_as_polygon" id="Function3750057" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.points_as_polygon(query character varying)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
     r record;
     path_result record;					     
     i int;							     
     q text;
     x float8[];
     y float8[];
     geom geoms;
     id integer;
BEGIN
	
     id :=0;
									     
     i := 1;								     
     q := 'select 1 as gid, GeometryFromText(''POLYGON((';
     
     FOR path_result IN EXECUTE 'select x, y from alphashape('''|| 
         query || ''')' LOOP
         x[i] = path_result.x;
         y[i] = path_result.y;
         i := i+1;
     END LOOP;
     q := q || x[1] || ' ' || y[1];
     i := 2;
     WHILE x[i] IS NOT NULL LOOP
         q := q || ', ' || x[i] || ' ' || y[i];
         i := i + 1;
     END LOOP;
    q := q || ', ' || x[1] || ' ' || y[1];
    q := q || '))'',-1) as the_geom';
    FOR r in EXECUTE q LOOP
         geom.gid:=r.gid;
         geom.the_geom=r.the_geom;
	 id := id+1;
	 geom.id       := id;
	 RETURN NEXT geom;
    END LOOP;
    RETURN;
END;
$function$
]]></string>
		</function>
		<function name="shootingstar_sp" id="Function3750058" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.shootingstar_sp(character varying, integer, integer, double precision, character varying, boolean, boolean)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	delta ALIAS FOR $4;
        cost_column ALIAS FOR $5;
	dir ALIAS FOR $6;
	rc ALIAS FOR $7;
	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	srid integer;
	source_x float8;
	source_y float8;
	target_x float8;
	target_y float8;
	
	ll_x float8;
	ll_y float8;
	ur_x float8;
	ur_y float8;
	
	query text;
	id integer;
BEGIN
	
	id :=0;
	FOR rec IN EXECUTE
	    'select ST_SRID(the_geom) from ' ||
	    quote_ident(geom_table) || ' limit 1'
	LOOP
	END LOOP;
	srid := rec.srid;
	
	FOR rec IN EXECUTE 
            'select ST_X(ST_STARTPOINT(the_geom)) as source_x from ' || 
            quote_ident(geom_table) || ' where gid = '||sourceid
        LOOP
	END LOOP;
	source_x := rec.source_x;
	
	FOR rec IN EXECUTE 
            'select ST_Y(ST_STARTPOINT(the_geom)) as source_y from ' || 
            quote_ident(geom_table) || ' where gid = ' ||sourceid
        LOOP
	END LOOP;
	source_y := rec.source_y;
	FOR rec IN EXECUTE 
            'select ST_X(ST_STARTPOINT(the_geom)) as target_x from ' ||
            quote_ident(geom_table) || ' where gid = ' ||targetid
        LOOP
	END LOOP;
	target_x := rec.target_x;
	
	FOR rec IN EXECUTE 
            'select ST_Y(ST_STARTPOINT(the_geom)) as target_y from ' || 
            quote_ident(geom_table) || ' where gid = ' ||targetid
        LOOP
	END LOOP;
	target_y := rec.target_y;
	FOR rec IN EXECUTE 'SELECT CASE WHEN '||source_x||'<'||target_x||
           ' THEN '||source_x||' ELSE '||target_x||
           ' END as ll_x, CASE WHEN '||source_x||'>'||target_x||
           ' THEN '||source_x||' ELSE '||target_x||' END as ur_x'
        LOOP
	END LOOP;
	ll_x := rec.ll_x;
	ur_x := rec.ur_x;
	FOR rec IN EXECUTE 'SELECT CASE WHEN '||source_y||'<'||
            target_y||' THEN '||source_y||' ELSE '||
            target_y||' END as ll_y, CASE WHEN '||
            source_y||'>'||target_y||' THEN '||
            source_y||' ELSE '||target_y||' END as ur_y'
        LOOP
	END LOOP;
	ll_y := rec.ll_y;
	ur_y := rec.ur_y;
	query := 'SELECT gid,the_geom FROM ' || 
          'shortest_path_shooting_star(''SELECT gid as id, source::integer, ' || 
          'target::integer, '||cost_column||'::double precision as cost, ' || 
          'x1::double precision, y1::double precision, x2::double ' ||
          'precision, y2::double precision, rule::varchar, ' ||
	  'to_cost::double precision ';
	  
	IF rc THEN query := query || ' , reverse_cost ';  
	END IF;
	  
	query := query || 'FROM ' || quote_ident(geom_table) || ' where ST_SETSRID(''''BOX3D('||
          ll_x-delta||' '||ll_y-delta||','||ur_x+delta||' '||
          ur_y+delta||')''''::BOX3D, ' || srid || ') && the_geom'', ' || 
          quote_literal(sourceid) || ' , ' || 
          quote_literal(targetid) || ' , '''||text(dir)||''', '''||text(rc)||''' ),' || 
          quote_ident(geom_table) || ' where edge_id = gid ';
	  
	FOR path_result IN EXECUTE query
        LOOP
                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;
        END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="shortest_path" id="Function3750059" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.shortest_path(sql text, source_id integer, target_id integer, directed boolean, has_reverse_cost boolean)
 RETURNS SETOF path_result
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/librouting', $function$shortest_path$function$
]]></string>
		</function>
		<function name="shortest_path_astar" id="Function3750060" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.shortest_path_astar(sql text, source_id integer, target_id integer, directed boolean, has_reverse_cost boolean)
 RETURNS SETOF path_result
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/librouting', $function$shortest_path_astar$function$
]]></string>
		</function>
		<function name="shortest_path_shooting_star" id="Function3750061" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.shortest_path_shooting_star(sql text, source_id integer, target_id integer, directed boolean, has_reverse_cost boolean)
 RETURNS SETOF path_result
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/librouting', $function$shortest_path_shooting_star$function$
]]></string>
		</function>
		<function name="text_001" id="Function3750062" isSystem="false" />
		<function name="tsp" id="Function3750063" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.tsp(sql text, ids character varying, source integer)
 RETURNS SETOF path_result
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/librouting_tsp', $function$tsp$function$
]]></string>
		</function>
		<function name="tsp_astar" id="Function3750064" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.tsp_astar(geom_table character varying, ids character varying, source integer, delta double precision)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        r record;
        path_result record;
        v_id integer;
	prev integer;
	geom geoms;
	id integer;
BEGIN
	
	id :=0;
	prev := source;
	FOR path_result IN EXECUTE 'SELECT vertex_id FROM tsp(''select distinct source::integer as source_id, x1::double precision as x, y1::double precision as y from ' ||
	  quote_ident(geom_table) || ' where source in (' || 
          ids || ') UNION select distinct target as source_id, ST_X(ST_ENDPOINT(the_geom)), ST_Y(ST_ENDPOINT(the_geom)) from tsp_test where target in ('||ids||')'', '''|| ids  ||''', '|| source  ||')' LOOP
                v_id = path_result.vertex_id;
		
                FOR r IN EXECUTE 'SELECT gid, the_geom FROM astar_sp_delta( ''' || 
                  quote_ident(geom_table)  ||''', '|| v_id ||', '|| 
                  prev ||','||delta||')' LOOP
                    geom.gid := r.gid;
	            geom.the_geom := r.the_geom;
                    id := id+1;
		    geom.id       := id;
    	            RETURN NEXT geom;
                END LOOP;
		
	prev = v_id;
	END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="tsp_astar_directed" id="Function3750065" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.tsp_astar_directed(geom_table character varying, ids character varying, source integer, delta double precision, dir boolean, rc boolean)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        r record;
        path_result record;
        v_id integer;
	prev integer;
	geom geoms;
	
	query text;
	id integer;
BEGIN
	
	id :=0;
	prev := source;
	query := 'SELECT vertex_id FROM tsp(''select distinct source::integer '||
		'as source_id, x1::double precision as x, y1::double precision as y ';
		
	IF rc THEN query := query || ' , reverse_cost ';
	END IF;
	query := query || 'from ' || quote_ident(geom_table) || ' where source in (' || 
          ids || ') UNION select distinct target as source_id, x1::double precision as x, y1::double precision as y ';
	IF rc THEN query := query || ' , reverse_cost ';
	END IF;
        
        query := query || 'from tsp_test where target in ('||ids||')'', '''|| ids  ||''', '|| source  ||')';
	
	FOR path_result IN EXECUTE query
	LOOP
                v_id = path_result.vertex_id;
		
                FOR r IN EXECUTE 'SELECT gid, the_geom FROM astar_sp_delta_directed( ''' || 
                  quote_ident(geom_table)  ||''', '|| v_id ||', '|| 
                  prev ||','||delta||', '''||text(dir)||''', '''||text(rc)||''')' LOOP
                    geom.gid := r.gid;
	            geom.the_geom := r.the_geom;
                    id := id+1;
		    geom.id       := id;
    	            RETURN NEXT geom;
                END LOOP;
		
	prev = v_id;
	END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="tsp_dijkstra" id="Function3750066" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.tsp_dijkstra(geom_table character varying, ids character varying, source integer)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        r record;
        path_result record;
        v_id integer;
	prev integer;
	geom geoms;
	id integer;
BEGIN
	
	id :=0;
	prev := source;
	FOR path_result IN EXECUTE 'SELECT vertex_id FROM tsp(''select distinct source::integer as source_id, ST_X(ST_STARTPOINT(the_geom)), ST_Y(ST_STARTPOINT(the_geom)) from ' ||
	   quote_ident(geom_table) || ' where source in (' || 
           ids || ') UNION select distinct target as source_id, ST_X(ST_ENDPOINT(the_geom)), ST_Y(ST_ENDPOINT(the_geom)) from tsp_test where target in ('||ids||')'', '''|| ids  ||''', '|| source  ||')' LOOP
                v_id = path_result.vertex_id;
		
                FOR r IN EXECUTE 'SELECT gid, the_geom FROM dijkstra_sp_delta( ''' || 
                  quote_ident(geom_table)  ||''', '|| v_id ||', '|| 
                  prev ||',0.03)' LOOP
                    geom.gid := r.gid;
	            geom.the_geom := r.the_geom;
                    id := id+1;
		    geom.id       := id;
    	            RETURN NEXT geom;
                END LOOP;
		
	prev = v_id;
	END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="tsp_dijkstra_directed" id="Function3750067" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.tsp_dijkstra_directed(geom_table character varying, ids character varying, source integer, delta double precision, dir boolean, rc boolean)
 RETURNS SETOF geoms
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        r record;
        path_result record;
        v_id integer;
	prev integer;
	geom geoms;
	
	query text;
	id integer;
BEGIN
	
	id :=0;
	prev := source;
	
	query := 'SELECT vertex_id FROM tsp(''select distinct source::integer as source_id, '||
		    'ST_X(ST_STARTPOINT(the_geom)), ST_Y(ST_STARTPOINT(the_geom))';
		    
	IF rc THEN query := query || ' , reverse_cost ';
	END IF;
	query := query || ' from ' || quote_ident(geom_table) || ' where source in (' || 
           ids || ') UNION select distinct target as source_id, ST_X(ST_ENDPOINT(the_geom)), ST_Y(ST_ENDPOINT(the_geom))';
        
        IF rc THEN query := query || ' , reverse_cost ';
	END IF;
	query := query || 'from tsp_test where target in ('||ids||')'', '''|| ids  ||''', '|| source  ||')';
	   
	FOR path_result IN EXECUTE query
	LOOP
                v_id = path_result.vertex_id;
		
                FOR r IN EXECUTE 'SELECT gid, the_geom FROM dijkstra_sp_delta_directed( ''' || 
                  quote_ident(geom_table)  ||''', '|| v_id ||', '|| 
                  prev ||','||delta||', '''||text(dir)||''', '''||text(rc)||''')' LOOP
                    geom.gid := r.gid;
	            geom.the_geom := r.the_geom;
                    id := id+1;
		    geom.id       := id;
    	            RETURN NEXT geom;
                END LOOP;
		
	prev = v_id;
	END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="tsp_ids" id="Function3750068" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.tsp_ids(geom_table character varying, ids character varying, source integer)
 RETURNS SETOF integer
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
        r record;
        path_result record;
        v_id integer;
	prev integer;
BEGIN
	prev := -1;
	FOR path_result IN EXECUTE 'SELECT vertex_id FROM tsp(''select distinct source::integer as source_id, ST_X(ST_STARTPOINT(the_geom)), ST_Y(ST_STARTPOINT(the_geom)) from ' ||
		quote_ident(geom_table) || ' where source in (' || 
                ids || ')  UNION select distinct target as source_id, ST_X(ST_ENDPOINT(the_geom)), ST_Y(ST_ENDPOINT(the_geom)) from tsp_test where target in ('||ids||')'', '''|| ids  ||''', '|| source  ||')' LOOP
                v_id = path_result.vertex_id;
        RETURN NEXT v_id;
	END LOOP;
        RETURN;
END;
$function$
]]></string>
		</function>
		<function name="update_cost_from_distance" id="Function3750069" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.update_cost_from_distance(geom_table character varying)
 RETURNS void
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE 
BEGIN
	BEGIN
	  EXECUTE 'CREATE INDEX ' || quote_ident(geom_table) || 
                  '_edge_id_idx ON ' || quote_ident(geom_table) || 
                  ' (edge_id)';
	EXCEPTION 
		WHEN DUPLICATE_TABLE THEN
		RAISE NOTICE 'Not creating index, already there';
	END;
	EXECUTE 'UPDATE ' || quote_ident(geom_table) || 
              '_edges SET cost = (SELECT sum( length( g.the_geom ) ) FROM ' || 
              quote_ident(geom_table) || 
              ' g WHERE g.edge_id = id GROUP BY id)';
	RETURN;
END;
$function$
]]></string>
		</function>
	</schema>
	<connector name="PostgreSQL" database="PostgreSQL" driver_class="org.postgresql.Driver" driver_jar="postgresql-9.1-902.jdbc3.jar" host="geopg" port="5432" instance="transafe_dev" user="transafe_dev" passwd="dHJhbkBzYWZlLmFscA==" schema_mapping="" />
	<layout id="Layout2000347" name="public" show_relation_columns="y" >
		<entity schema="public" name="scenario_category" color="c4fdb1" x="1275" y="180" />
		<entity schema="public" name="action_graph" color="c4fdb1" x="1065" y="450" />
		<entity schema="public" name="admin_tools_menu_bookmark" color="ffcc66" x="540" y="810" />
		<entity schema="public" name="auth_user_groups" color="ffcc66" x="420" y="1125" />
		<entity schema="public" name="auth_group" color="ffcc66" x="420" y="1290" />
		<entity schema="public" name="auth_group_permissions" color="ffcc66" x="555" y="1290" />
		<entity schema="public" name="auth_user_user_permissions" color="ffcc66" x="600" y="1110" />
		<entity schema="public" name="django_session" color="ffcc66" x="240" y="1080" />
		<entity schema="public" name="django_flatpage_sites" color="ffcc66" x="75" y="1005" />
		<entity schema="public" name="django_site" color="ffcc66" x="105" y="1155" />
		<entity schema="public" name="auth_permission" color="ffcc66" x="780" y="1275" />
		<entity schema="public" name="admin_tools_dashboard_preferences" color="ffcc66" x="600" y="930" />
		<entity schema="public" name="plrutils_database" color="ffcc66" x="810" y="1080" />
		<entity schema="public" name="django_admin_log" color="ffcc66" x="270" y="1230" />
		<entity schema="public" name="django_content_type" color="ffcc66" x="45" y="1275" />
		<entity schema="public" name="auth_user" color="ffcc66" x="345" y="765" />
		<entity schema="public" name="django_flatpage" color="ffcc66" x="150" y="780" />
		<entity schema="public" name="event" color="ffff99" x="1065" y="780" />
		<entity schema="public" name="scenario_subcategory" color="c4fdb1" x="1035" y="150" />
		<entity schema="public" name="scenario" color="c4fdb1" x="1140" y="300" />
		<entity schema="public" name="plrutils_graphfunction" color="ffcc66" x="750" y="810" />
		<entity schema="public" name="action" color="c4fdb1" x="1260" y="510" />
		<entity schema="public" name="gt_catalog_layer" color="9de5fd" x="255" y="360" />
		<entity schema="public" name="gt_layer_meta" color="9de5fd" x="45" y="360" />
		<entity schema="public" name="gt_catalog" color="9de5fd" x="60" y="165" />
		<entity schema="public" name="gt_layer_group" color="9de5fd" x="240" y="180" />
		<entity schema="public" name="gt_style" color="9de5fd" x="480" y="330" />
		<entity schema="public" name="gt_layer_tree" color="9de5fd" x="465" y="180" />
		<entity schema="public" name="interruptions" color="9de5fd" x="495" y="510" />
		<entity schema="public" name="visualization" color="c4fdb1" x="1455" y="510" />
		<entity schema="public" name="managing_authority" color="fea4a4" x="855" y="450" />
		<entity schema="public" name="ev_action_graph" color="ffff99" x="1020" y="1050" />
		<entity schema="public" name="ev_actor" color="ffff99" x="1500" y="810" />
		<entity schema="public" name="ev_message" color="ffff99" x="1335" y="960" />
		<entity schema="public" name="action_m2m_actor" color="c4fdb1" x="1335" y="315" />
		<entity schema="public" name="actor" color="c4fdb1" x="1515" y="315" />
		<entity schema="public" name="ev_action" color="ffff99" x="1215" y="1095" />
		<entity schema="public" name="ev_action_m2m_actor" color="ffff99" x="1470" y="1050" />
		<entity schema="public" name="ev_visualization" color="ffff99" x="1410" y="1155" />
		<entity schema="public" name="brenner" color="9de5fd" x="630" y="60" />
		<entity schema="public" name="event_log" color="ffff99" x="1320" y="765" />
		<group name="Users" color="fea4a4" >
			<entity schema="public" name="managing_authority" />
		</group>
		<group name="Scenario" color="c4fdb1" >
			<entity schema="public" name="scenario" />
			<entity schema="public" name="action" />
			<entity schema="public" name="visualization" />
			<entity schema="public" name="actor" />
			<entity schema="public" name="action_m2m_actor" />
			<entity schema="public" name="action_graph" />
			<entity schema="public" name="scenario_subcategory" />
			<entity schema="public" name="scenario_category" />
		</group>
		<group name="Map, Layers and Routing" color="9de5fd" >
			<entity schema="public" name="interruptions" />
			<entity schema="public" name="gt_catalog_layer" />
			<entity schema="public" name="gt_style" />
			<entity schema="public" name="gt_catalog" />
			<entity schema="public" name="gt_layer_group" />
			<entity schema="public" name="gt_layer_tree" />
			<entity schema="public" name="gt_layer_meta" />
			<entity schema="public" name="brenner" />
		</group>
		<group name="Django" color="ffcc66" >
			<entity schema="public" name="admin_tools_menu_bookmark" />
			<entity schema="public" name="auth_user_groups" />
			<entity schema="public" name="auth_group" />
			<entity schema="public" name="auth_group_permissions" />
			<entity schema="public" name="auth_user_user_permissions" />
			<entity schema="public" name="django_session" />
			<entity schema="public" name="django_flatpage" />
			<entity schema="public" name="django_flatpage_sites" />
			<entity schema="public" name="django_site" />
			<entity schema="public" name="auth_permission" />
			<entity schema="public" name="admin_tools_dashboard_preferences" />
			<entity schema="public" name="plrutils_graphfunction" />
			<entity schema="public" name="plrutils_database" />
			<entity schema="public" name="django_admin_log" />
			<entity schema="public" name="django_content_type" />
			<entity schema="public" name="auth_user" />
		</group>
		<group name="Live Event" color="ffff99" >
			<entity schema="public" name="ev_action" />
			<entity schema="public" name="ev_visualization" />
			<entity schema="public" name="ev_action_m2m_actor" />
			<entity schema="public" name="ev_action_graph" />
			<entity schema="public" name="ev_actor" />
			<entity schema="public" name="event" />
			<entity schema="public" name="ev_message" />
			<entity schema="public" name="event_log" />
		</group>
	</layout>
</project>