# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#     * Rearrange models' order
#     * Make sure each model has one field with primary_key=True
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [appname]'
# into your database.
from __future__ import unicode_literals

from django.db import models

class Action(models.Model):
    id = models.BigIntegerField(primary_key=True)
    scenario = models.ForeignKey('Scenario')
    name = models.TextField()
    numcode = models.IntegerField()
    description = models.TextField()
    duration = models.IntegerField()
    class Meta:
        db_table = 'action'

class ActionGraph(models.Model):
    id = models.BigIntegerField(primary_key=True)
    action = models.ForeignKey(Action)
    parent = models.ForeignKey(Action)
    is_main_parent = models.BooleanField()
    class Meta:
        db_table = 'action_graph'

class ActionM2MActor(models.Model):
    id = models.BigIntegerField(primary_key=True)
    action = models.ForeignKey(Action)
    actor = models.ForeignKey('Actor')
    class Meta:
        db_table = 'action_m2m_actor'

class Actor(models.Model):
    id = models.BigIntegerField(primary_key=True)
    name = models.TextField()
    istitution = models.TextField()
    contact_info = models.TextField()
    email = models.TextField(unique=True)
    phone = models.TextField()
    class Meta:
        db_table = 'actor'

class AdminToolsDashboardPreferences(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('AuthUser')
    data = models.TextField()
    dashboard_id = models.CharField(max_length=100)
    class Meta:
        db_table = 'admin_tools_dashboard_preferences'

class AdminToolsMenuBookmark(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('AuthUser')
    url = models.CharField(max_length=255)
    title = models.CharField(max_length=255)
    class Meta:
        db_table = 'admin_tools_menu_bookmark'

class Alpcheck2(models.Model):
    gid = models.IntegerField(primary_key=True)
    externalid = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    cod_node_a = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    cod_node_b = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    oneway = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    roadtype = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    stateroadn = models.CharField(max_length=50, blank=True)
    streetname = models.CharField(max_length=50, blank=True)
    alpcheckco = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    lanes = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    capacity = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    v0 = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    vc = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    lcf = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    aadt_lv = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    aadt_hv = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    aadt_tot = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    length = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    lv_ab = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    hv_ab = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    dgtv_ab = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    lv_ba = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    hv_ba = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    dgtv_ba = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    the_geom = models.TextField(blank=True) # This field type is a guess.
    source = models.IntegerField(null=True, blank=True)
    target = models.IntegerField(null=True, blank=True)
    cost = models.FloatField(null=True, blank=True)
    available = models.BooleanField()
    id = models.IntegerField(null=True, blank=True)
    time = models.FloatField(null=True, blank=True)
    class Meta:
        db_table = 'alpcheck2'

class AuthGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=80)
    class Meta:
        db_table = 'auth_group'

class AuthGroupPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    group = models.ForeignKey(AuthGroup)
    permission = models.ForeignKey('AuthPermission')
    class Meta:
        db_table = 'auth_group_permissions'

class AuthPermission(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=50)
    content_type_id = models.IntegerField()
    codename = models.CharField(max_length=100)
    class Meta:
        db_table = 'auth_permission'

class AuthUser(models.Model):
    id = models.IntegerField(primary_key=True)
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField()
    is_superuser = models.BooleanField()
    username = models.CharField(max_length=30)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=75)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    class Meta:
        db_table = 'auth_user'

class AuthUserGroups(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    group = models.ForeignKey(AuthGroup)
    class Meta:
        db_table = 'auth_user_groups'

class AuthUserUserPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    permission = models.ForeignKey(AuthPermission)
    class Meta:
        db_table = 'auth_user_user_permissions'

class DjangoAdminLog(models.Model):
    id = models.IntegerField(primary_key=True)
    action_time = models.DateTimeField()
    user = models.ForeignKey(AuthUser)
    content_type = models.ForeignKey('DjangoContentType', null=True, blank=True)
    object_id = models.TextField(blank=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    class Meta:
        db_table = 'django_admin_log'

class DjangoContentType(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=100)
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)
    class Meta:
        db_table = 'django_content_type'

class DjangoSession(models.Model):
    session_key = models.CharField(max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()
    class Meta:
        db_table = 'django_session'

class DjangoSite(models.Model):
    id = models.IntegerField(primary_key=True)
    domain = models.CharField(max_length=100)
    name = models.CharField(max_length=50)
    class Meta:
        db_table = 'django_site'

class Event(models.Model):
    id = models.BigIntegerField(primary_key=True)
    scenario = models.ForeignKey('Scenario')
    status = models.TextField()
    is_real = models.BooleanField()
    time_start = models.DateTimeField(null=True, blank=True)
    time_end = models.DateTimeField(null=True, blank=True)
    geom = models.TextField() # This field type is a guess.
    class Meta:
        db_table = 'event'

class EventAction(models.Model):
    id = models.BigIntegerField(primary_key=True)
    event = models.ForeignKey(Event)
    action = models.ForeignKey(Action)
    status = models.TextField()
    class Meta:
        db_table = 'event_action'

class EventActionLog(models.Model):
    id = models.BigIntegerField(primary_key=True)
    event_action = models.ForeignKey(EventAction)
    ts = models.DateTimeField()
    status = models.TextField()
    annotation = models.TextField(blank=True)
    class Meta:
        db_table = 'event_action_log'

class EventAnnotationLog(models.Model):
    id = models.BigIntegerField(primary_key=True)
    event = models.ForeignKey(Event)
    ts = models.DateTimeField()
    annotation = models.TextField()
    class Meta:
        db_table = 'event_annotation_log'

class EventStaticLog(models.Model):
    id = models.BigIntegerField(primary_key=True)
    event = models.ForeignKey(Event)
    ts = models.DateTimeField()
    action_type = models.TextField()
    action_id = models.BigIntegerField(null=True, blank=True)
    action_name = models.TextField(blank=True)
    action_description = models.TextField(blank=True)
    action_value = models.TextField()
    annotation = models.TextField(blank=True)
    class Meta:
        db_table = 'event_static_log'

class GeographyColumns(models.Model):
    f_table_catalog = models.TextField(blank=True) # This field type is a guess.
    f_table_schema = models.TextField(blank=True) # This field type is a guess.
    f_table_name = models.TextField(blank=True) # This field type is a guess.
    f_geography_column = models.TextField(blank=True) # This field type is a guess.
    coord_dimension = models.IntegerField(null=True, blank=True)
    srid = models.IntegerField(null=True, blank=True)
    type = models.TextField(blank=True)
    class Meta:
        db_table = 'geography_columns'

class GeometryColumns(models.Model):
    f_table_catalog = models.CharField(max_length=256, blank=True)
    f_table_schema = models.CharField(max_length=256, blank=True)
    f_table_name = models.CharField(max_length=256, blank=True)
    f_geometry_column = models.CharField(max_length=256, blank=True)
    coord_dimension = models.IntegerField(null=True, blank=True)
    srid = models.IntegerField(null=True, blank=True)
    type = models.CharField(max_length=30, blank=True)
    class Meta:
        db_table = 'geometry_columns'

class Interruptions(models.Model):
    gid = models.IntegerField(primary_key=True)
    id = models.IntegerField(null=True, blank=True)
    geom = models.TextField(blank=True) # This field type is a guess.
    class Meta:
        db_table = 'interruptions'

class ManagingAuthority(models.Model):
    id = models.BigIntegerField(primary_key=True)
    auth_user = models.ForeignKey(AuthUser)
    name = models.TextField(unique=True)
    description = models.TextField()
    address = models.TextField()
    email = models.TextField()
    phone = models.TextField()
    class Meta:
        db_table = 'managing_authority'

class RasterColumns(models.Model):
    r_table_catalog = models.TextField(blank=True) # This field type is a guess.
    r_table_schema = models.TextField(blank=True) # This field type is a guess.
    r_table_name = models.TextField(blank=True) # This field type is a guess.
    r_raster_column = models.TextField(blank=True) # This field type is a guess.
    srid = models.IntegerField(null=True, blank=True)
    scale_x = models.FloatField(null=True, blank=True)
    scale_y = models.FloatField(null=True, blank=True)
    blocksize_x = models.IntegerField(null=True, blank=True)
    blocksize_y = models.IntegerField(null=True, blank=True)
    same_alignment = models.BooleanField(null=True, blank=True)
    regular_blocking = models.BooleanField(null=True, blank=True)
    num_bands = models.IntegerField(null=True, blank=True)
    pixel_types = models.TextField(blank=True) # This field type is a guess.
    nodata_values = models.TextField(blank=True) # This field type is a guess.
    out_db = models.TextField(blank=True) # This field type is a guess.
    extent = models.TextField(blank=True) # This field type is a guess.
    class Meta:
        db_table = 'raster_columns'

class RasterOverviews(models.Model):
    o_table_catalog = models.TextField(blank=True) # This field type is a guess.
    o_table_schema = models.TextField(blank=True) # This field type is a guess.
    o_table_name = models.TextField(blank=True) # This field type is a guess.
    o_raster_column = models.TextField(blank=True) # This field type is a guess.
    r_table_catalog = models.TextField(blank=True) # This field type is a guess.
    r_table_schema = models.TextField(blank=True) # This field type is a guess.
    r_table_name = models.TextField(blank=True) # This field type is a guess.
    r_raster_column = models.TextField(blank=True) # This field type is a guess.
    overview_factor = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'raster_overviews'

class Scenario(models.Model):
    id = models.BigIntegerField(primary_key=True)
    managing_authority = models.ForeignKey(ManagingAuthority)
    subcategory = models.ForeignKey('ScenarioSubcategory', null=True, blank=True)
    name = models.TextField(unique=True)
    description = models.TextField()
    geom = models.TextField(blank=True) # This field type is a guess.
    class Meta:
        db_table = 'scenario'

class ScenarioCategory(models.Model):
    id = models.BigIntegerField(primary_key=True)
    name = models.TextField(unique=True)
    description = models.TextField()
    class Meta:
        db_table = 'scenario_category'

class ScenarioSubcategory(models.Model):
    id = models.BigIntegerField(primary_key=True)
    category = models.ForeignKey(ScenarioCategory)
    name = models.TextField(unique=True)
    description = models.TextField()
    class Meta:
        db_table = 'scenario_subcategory'

class SpatialRefSys(models.Model):
    srid = models.IntegerField(primary_key=True)
    auth_name = models.CharField(max_length=256, blank=True)
    auth_srid = models.IntegerField(null=True, blank=True)
    srtext = models.CharField(max_length=2048, blank=True)
    proj4text = models.CharField(max_length=2048, blank=True)
    class Meta:
        db_table = 'spatial_ref_sys'

class Visualization(models.Model):
    id = models.BigIntegerField(primary_key=True)
    action = models.ForeignKey(Action)
    description = models.TextField(blank=True)
    type = models.TextField()
    content = models.TextField()
    class Meta:
        db_table = 'visualization'

